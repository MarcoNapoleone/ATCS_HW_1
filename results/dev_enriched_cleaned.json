[
  {
    "question_id": 1471,
    "db_id": "debit_card_specializing",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) FROM customers",
    "text_2_sql": "SELECT ROUND( COUNT(CASE WHEN currency = 'EUR' THEN 1 END)::NUMERIC / NULLIF(COUNT(CASE WHEN currency = 'CZK' THEN 1 END), 0), 2) AS eur_czk_ratio FROM customers WHERE currency IN ('EUR', 'CZK')",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of customers who pay in EUR against customers who pay in CZK? -- External Knowledge: {'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'pay': {'column_name': 'Currency', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1472,
    "db_id": "debit_card_specializing",
    "question": "In 2012, who had the least consumption in LAM?",
    "true_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT c.customerid, y.consumption FROM customers c JOIN yearmonth y ON c.customerid = y.customerid WHERE c.segment = 'LAM' AND EXTRACT(YEAR FROM TO_DATE(y.date, 'YYYY-MM')) = 2012 ORDER BY y.consumption ASC LIMIT 1",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In 2012, who had the least consumption in LAM? -- External Knowledge: {'2012': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'LAM': {'column_name': 'Segment', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1473,
    "db_id": "debit_card_specializing",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "true_sql": "SELECT AVG(T2.Consumption) / NULLIF(12, 0) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "text_2_sql": "SELECT AVG(ym.consumption) as avg_monthly_consumption FROM yearmonth ym JOIN customers c ON ym.customerid = c.customerid WHERE c.segment = 'SME' AND EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) = 2013",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the average monthly consumption of customers in SME for the year 2013? -- External Knowledge: {'SME': {'column_name': 'Segment', 'table_name': 'customers'}, 'monthly': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2013': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1476,
    "db_id": "debit_card_specializing",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "true_sql": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN CAST(T2.Consumption AS float) ELSE 0 END) -SUM(CASE WHEN T1.Currency = 'EUR' THEN CAST(T2.Consumption AS float) ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE substring(T2.Date, 1, 4) = '2012'",
    "text_2_sql": "SELECT SUM(CASE WHEN c.currency = 'CZK' THEN y.consumption ELSE 0 END) AS czk_consumption, SUM(CASE WHEN c.currency = 'EUR' THEN y.consumption ELSE 0 END) AS eur_consumption, SUM(CASE WHEN c.currency = 'CZK' THEN y.consumption ELSE 0 END) - SUM(CASE WHEN c.currency = 'EUR' THEN y.consumption ELSE 0 END) AS consumption_difference FROM yearmonth y JOIN customers c ON y.customerid = c.customerid WHERE EXTRACT(YEAR FROM TO_DATE(y.date, 'YYYY-MM')) = 2012",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012? -- External Knowledge: {'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1479,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "true_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) AS year, SUM(ym.consumption) AS total_consumption FROM yearmonth ym JOIN transactions_1k t ON ym.customerid = t.customerid JOIN customers c ON t.customerid = c.customerid JOIN products p ON t.productid = p.productid WHERE c.currency = 'CZK' AND p.description LIKE '%gas%' GROUP BY EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) ORDER BY total_consumption DESC LIMIT 1",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which year recorded the most consumption of gas paid in CZK? -- External Knowledge: {'year': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'gas': {'column_name': 'ProductID', 'table_name': 'transactions_1k'}, 'CZK': {'column_name': 'Currency', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1480,
    "db_id": "debit_card_specializing",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "true_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT TO_CHAR(TO_DATE(ym.date, 'YYYY-MM'), 'Month') AS peak_month FROM yearmonth ym JOIN customers c ON ym.customerid = c.customerid JOIN transactions_1k t ON c.customerid = t.customerid JOIN products p ON t.productid = p.productid WHERE EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) = 2013 AND c.segment = 'SME' AND p.productid = (SELECT productid FROM products WHERE description LIKE '%gas%' LIMIT 1) GROUP BY TO_CHAR(TO_DATE(ym.date, 'YYYY-MM'), 'Month'), TO_DATE(ym.date, 'YYYY-MM') ORDER BY SUM(ym.consumption) DESC LIMIT 1",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the gas consumption peak month for SME customers in 2013? -- External Knowledge: {'gas': {'column_name': 'ProductID', 'table_name': 'products'}, 'month': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2013': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'SME': {'column_name': 'Segment', 'table_name': 'customers'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1481,
    "db_id": "debit_card_specializing",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0) - CAST(SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0), CAST(SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0) - CAST(SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0), CAST(SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0) - CAST(SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS REAL) / NULLIF(COUNT(T1.CustomerID), 0) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = (SELECT MIN(Consumption) FROM yearmonth) AND T2.Date::text BETWEEN '201301' AND '201312'",
    "text_2_sql": "WITH customer_segments AS ( SELECT c.customerid, c.segment, c.currency FROM customers c WHERE c.currency = 'CZK' ), annual_consumption AS ( SELECT cs.customerid, cs.segment, EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) AS year, SUM(ym.consumption) AS total_consumption FROM customer_segments cs JOIN yearmonth ym ON cs.customerid = ym.customerid WHERE EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) = 2013 GROUP BY cs.customerid, cs.segment, EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) ), segment_averages AS ( SELECT segment, AVG(total_consumption) AS avg_consumption FROM annual_consumption GROUP BY segment ) SELECT MAX(CASE WHEN segment = 'LAM' THEN avg_consumption END) - MAX(CASE WHEN segment = 'SME' THEN avg_consumption END) AS LAM_SME_diff, MAX(CASE WHEN segment = 'KAM' THEN avg_consumption END) - MAX(CASE WHEN segment = 'LAM' THEN avg_consumption END) AS KAM_LAM_diff, MAX(CASE WHEN segment = 'KAM' THEN avg_consumption END) - MAX(CASE WHEN segment = 'SME' THEN avg_consumption END) AS KAM_SME_diff FROM segment_averages",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? -- External Knowledge: {'KAM': {'column_name': 'Segment', 'table_name': 'customers'}, 'LAM': {'column_name': 'Segment', 'table_name': 'customers'}, 'SME': {'column_name': 'Segment', 'table_name': 'customers'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1482,
    "db_id": "debit_card_specializing",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T1.Segment = 'SME' AND T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'SME' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END)) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T1.Segment = 'SME' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END), 0), CAST(SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END), 0), CAST(SUM(CASE WHEN T1.Segment = 'KAM' AND T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'KAM' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T1.Segment = 'KAM' AND T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END), 0) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "text_2_sql": "WITH segment_consumption AS ( SELECT c.segment, EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) AS year, SUM(ym.consumption) AS total_consumption FROM customers c JOIN yearmonth ym ON c.customerid = ym.customerid WHERE c.currency = 'EUR' AND c.segment IN ('SME', 'LAM', 'KAM') AND EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) IN (2012, 2013) GROUP BY c.segment, EXTRACT(YEAR FROM TO_DATE(ym.date, 'YYYY-MM')) ), segment_growth AS ( SELECT segment, (MAX(CASE WHEN year = 2013 THEN total_consumption END) - MAX(CASE WHEN year = 2012 THEN total_consumption END)) / MAX(CASE WHEN year = 2012 THEN total_consumption END) * 100 AS growth_percentage FROM segment_consumption GROUP BY segment ) SELECT segment, growth_percentage, CASE WHEN growth_percentage = (SELECT MAX(growth_percentage) FROM segment_growth) THEN 'Biggest Increase' WHEN growth_percentage = (SELECT MIN(growth_percentage) FROM segment_growth) THEN 'Lowest Increase' END AS growth_category FROM segment_growth WHERE growth_percentage IN ( (SELECT MAX(growth_percentage) FROM segment_growth), (SELECT MIN(growth_percentage) FROM segment_growth) ) ORDER BY growth_percentage DESC",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? -- External Knowledge: {'EUR': {'column_name': 'Currency', 'table_name': 'customers'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2013': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'paid': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'LAM': {'column_name': 'Segment', 'table_name': 'customers'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1483,
    "db_id": "debit_card_specializing",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "true_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "text_2_sql": "SELECT SUM(consumption) AS total_consumption FROM yearmonth WHERE customerid = 6 AND date >= '2013-08-01' AND date <= '2013-11-30'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much did customer 6 consume in total between August and November 2013? -- External Knowledge: {'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'consume': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'August': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'November': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2013': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1484,
    "db_id": "debit_card_specializing",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "true_sql": "SELECT SUM(CASE WHEN Country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN Country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations WHERE Segment = 'Discount'",
    "text_2_sql": "SELECT (SELECT COUNT(*) FROM gasstations WHERE country = 'Czech Republic' AND segment = 'discount') - (SELECT COUNT(*) FROM gasstations WHERE country = 'Slovakia' AND segment = 'discount') AS difference_in_discount_stations",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia? -- External Knowledge: {'stations': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'gas': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'Czech': {'column_name': 'Country', 'table_name': 'gasstations'}, 'Slovakia': {'column_name': 'Country', 'table_name': 'gasstations'}, 'discount': {'column_name': 'Segment', 'table_name': 'gasstations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1486,
    "db_id": "debit_card_specializing",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "true_sql": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE Segment = 'SME'",
    "text_2_sql": "SELECT CASE WHEN COUNT(CASE WHEN currency = 'CZK' THEN 1 END) > COUNT(CASE WHEN currency = 'EUR' THEN 1 END) THEN 'Yes, ' || (COUNT(CASE WHEN currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN currency = 'EUR' THEN 1 END))::TEXT || ' more' ELSE 'No' END AS result FROM customers WHERE segment = 'SME'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more? -- External Knowledge: {'euros': {'column_name': 'Currency', 'table_name': 'customers'}, 'koruna': {'column_name': 'Currency', 'table_name': 'customers'}, 'SMEs': {'column_name': 'Segment', 'table_name': 'customers'}, 'Czech': {'column_name': 'Country', 'table_name': 'gasstations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1490,
    "db_id": "debit_card_specializing",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.CustomerID), 0) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN ym.consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM customers c JOIN yearmonth ym ON c.customerid = ym.customerid WHERE c.segment = 'LAM'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many percent of LAM customer consumed more than 46.73? -- External Knowledge: {'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'LAM': {'column_name': 'Segment', 'table_name': 'customers'}, 'consumed': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'percent': {'column_name': 'Consumption', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1493,
    "db_id": "debit_card_specializing",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CustomerID), 0) FROM yearmonth WHERE Date = '201202'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM yearmonth WHERE date LIKE '2012-02%'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In February 2012, what percentage of customers consumed more than 528.3? -- External Knowledge: {'consumed': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'February': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1493,
    "db_id": "debit_card_specializing",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CustomerID), 0) FROM yearmonth WHERE Date = '201202'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM yearmonth WHERE date LIKE '2012-02%'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In February 2012, what percentage of customers consumed more than 528.3? -- External Knowledge: {'consumed': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'February': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1493,
    "db_id": "debit_card_specializing",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CustomerID), 0) FROM yearmonth WHERE Date = '201202'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM yearmonth WHERE date LIKE '2012-02%'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In February 2012, what percentage of customers consumed more than 528.3? -- External Knowledge: {'consumed': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'February': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1498,
    "db_id": "debit_card_specializing",
    "question": "What is the highest monthly consumption in the year 2012?",
    "true_sql": "SELECT SUM(CAST(Consumption AS float)) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(consumption) AS highest_monthly_consumption FROM yearmonth WHERE date LIKE '2012%'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the highest monthly consumption in the year 2012? -- External Knowledge: {'monthly': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'highest': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'year': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1500,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "true_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "text_2_sql": "SELECT DISTINCT p.description FROM products p JOIN transactions_1k t ON p.productid = t.productid WHERE EXTRACT(YEAR FROM t.date) = 2013 AND EXTRACT(MONTH FROM t.date) = 9",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the product description of the products consumed in September, 2013. -- External Knowledge: {'products': {'column_name': 'ProductID', 'table_name': 'products'}, 'product': {'column_name': 'Description', 'table_name': 'products'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1501,
    "db_id": "debit_card_specializing",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "true_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "text_2_sql": "SELECT DISTINCT g.country FROM gasstations g JOIN transactions_1k t ON g.gasstationid = t.gasstationid WHERE EXTRACT(YEAR FROM t.date) = 2013 AND EXTRACT(MONTH FROM t.date) = 6",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the countries of the gas stations with transactions taken place in June, 2013. -- External Knowledge: {'stations': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'June': {'column_name': 'Date', 'table_name': 'transactions_1k'}, 'gas': {'column_name': 'GasStationID', 'table_name': 'transactions_1k'}, 'countries': {'column_name': 'Country', 'table_name': 'gasstations'}, '2013': {'column_name': 'Date', 'table_name': 'transactions_1k'}, 'transactions': {'column_name': 'TransactionID', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1505,
    "db_id": "debit_card_specializing",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "true_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "text_2_sql": "SELECT COUNT(DISTINCT c.customerid) FROM customers c JOIN yearmonth y ON c.customerid = y.customerid WHERE c.currency = 'euro' AND y.consumption > 1000",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the customers who paid in euro, how many of them have a monthly consumption of over 1000? -- External Knowledge: {'euro': {'column_name': 'Currency', 'table_name': 'customers'}, 'monthly': {'column_name': 'Date', 'table_name': 'yearmonth'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1506,
    "db_id": "debit_card_specializing",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "true_sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "text_2_sql": "SELECT DISTINCT p.description FROM products p JOIN transactions_1k t ON p.productid = t.productid JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.country = 'Czech Republic'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic. -- External Knowledge: {'stations': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'gas': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'descriptions': {'column_name': 'Description', 'table_name': 'products'}, 'Czech Republic': {'column_name': 'Country', 'table_name': 'gasstations'}, 'transactions': {'column_name': 'TransactionID', 'table_name': 'transactions_1k'}, 'product': {'column_name': 'ProductID', 'table_name': 'products'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1507,
    "db_id": "debit_card_specializing",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "true_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "text_2_sql": "SELECT DISTINCT t.time FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.chainid = 11 ORDER BY t.time",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. -- External Knowledge: {'stations': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'chain': {'column_name': 'ChainID', 'table_name': 'gasstations'}, 'transactions': {'column_name': 'TransactionID', 'table_name': 'transactions_1k'}, 'time': {'column_name': 'Time', 'table_name': 'transactions_1k'}, 'gas': {'column_name': 'GasStationID', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "true_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND TO_CHAR(CAST(T1.Date AS TIMESTAMP), 'YYYY') >= '2012'",
    "text_2_sql": "SELECT COUNT(t.transactionid) FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE g.country = 'Czech Republic' AND t.date > '2012-01-01'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1? -- External Knowledge: {'transactions': {'column_name': 'TransactionID', 'table_name': 'transactions_1k'}, 'gas': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'stations': {'column_name': 'GasStationID', 'table_name': 'gasstations'}, 'Czech Republic': {'column_name': 'Country', 'table_name': 'gasstations'}, 'after': {'column_name': 'Date', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1514,
    "db_id": "debit_card_specializing",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "true_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "text_2_sql": "SELECT DISTINCT c.currency FROM transactions_1k t JOIN customers c ON t.customerid = c.customerid WHERE t.date = '2012-08-24' AND t.time = '16:25:00'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What kind of currency did the customer paid at 16:25:00 in 2012/8/24? -- External Knowledge: {'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'currency': {'column_name': 'Currency', 'table_name': 'customers'}, 'paid': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'at': {'column_name': 'Time', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1515,
    "db_id": "debit_card_specializing",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "true_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "text_2_sql": "SELECT c.segment FROM customers c JOIN transactions_1k t ON c.customerid = t.customerid WHERE t.date = '2012-08-23' AND t.time = '21:20:00' LIMIT 1",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What segment did the customer have at 2012/8/23 21:20:00? -- External Knowledge: {'segment': {'column_name': 'Segment', 'table_name': 'customers'}, 'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'at': {'column_name': 'Date', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1521,
    "db_id": "debit_card_specializing",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "true_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "text_2_sql": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE t.date = '2012-08-26' AND t.time >= '08:00:00' AND t.time < '09:00:00' AND g.country = 'CZE'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE? -- External Knowledge: {'happened': {'column_name': 'Date', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1524,
    "db_id": "debit_card_specializing",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "true_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = '548.4'",
    "text_2_sql": "SELECT DISTINCT g.country FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE t.date = '2012-08-24' AND t.amount = 548.4",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's the nationality of the customer who spent 548.4 in 2012/8/24? -- External Knowledge: {'spent': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'nationality': {'column_name': 'Country', 'table_name': 'gasstations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1525,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.CustomerID), 0) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT CASE WHEN c.currency = 'EUR' THEN c.customerid END) * 100.0 / COUNT(DISTINCT c.customerid), 2) AS percentage FROM customers c JOIN transactions_1k t ON c.customerid = t.customerid WHERE t.date = '2012-08-25'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of the customers who used EUR in 2012/8/25? -- External Knowledge: {'EUR': {'column_name': 'Currency', 'table_name': 'customers'}, 'customers': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'used': {'column_name': 'Date', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1526,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END), 0) FROM yearmonth WHERE CustomerID = (SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 1513.12 )",
    "text_2_sql": "WITH customer_info AS ( SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' AND price = 634.8 ), consumption_data AS ( SELECT customerid, EXTRACT(YEAR FROM TO_DATE(date, 'YYYY/MM')) AS year, SUM(consumption) AS total_consumption FROM yearmonth WHERE customerid = (SELECT customerid FROM customer_info) AND EXTRACT(YEAR FROM TO_DATE(date, 'YYYY/MM')) IN (2012, 2013) GROUP BY customerid, EXTRACT(YEAR FROM TO_DATE(date, 'YYYY/MM')) ) SELECT (consumption_2012 - consumption_2013) / consumption_2012 * 100 AS decrease_rate FROM ( SELECT MAX(CASE WHEN year = 2012 THEN total_consumption END) AS consumption_2012, MAX(CASE WHEN year = 2013 THEN total_consumption END) AS consumption_2013 FROM consumption_data ) subquery",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? -- External Knowledge: {'2012': {'column_name': 'Date', 'table_name': 'transactions_1k'}, 'decrease': {'column_name': 'Consumption', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1528,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Country = 'SVK' AND Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN Country = 'SVK' THEN 1 ELSE 0 END), 0) FROM gasstations",
    "text_2_sql": "SELECT COUNT(CASE WHEN segment = 'premium' THEN 1 END) * 100.0 / COUNT(*) AS premium_percentage FROM gasstations WHERE country = 'SVK'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"? -- External Knowledge: {'SVK': {'column_name': 'Country', 'table_name': 'gasstations'}, 'premium': {'column_name': 'Segment', 'table_name': 'gasstations'}, 'Country': {'column_name': 'Country', 'table_name': 'gasstations'}, 'segment': {'column_name': 'Segment', 'table_name': 'gasstations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1529,
    "db_id": "debit_card_specializing",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "true_sql": "SELECT SUM(T1.Price ), SUM(CASE WHEN T3.Date = '201201' THEN T1.Price ELSE 0 END) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "text_2_sql": "SELECT SUM(t.price * t.amount) AS total_spent, SUM(CASE WHEN EXTRACT(YEAR FROM t.date) = 2012 AND EXTRACT(MONTH FROM t.date) = 1 THEN t.price * t.amount ELSE 0 END) AS january_2012_spent FROM transactions_1k t WHERE t.customerid = 38508",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012? -- External Knowledge: {'38508': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'January': {'column_name': 'Date', 'table_name': 'transactions_1k'}, 'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'spent': {'column_name': 'Amount', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1531,
    "db_id": "debit_card_specializing",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "true_sql": "SELECT T2.CustomerID, SUM(T2.Price / NULLIF(T2.Amount, 0)), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = (SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC NULLS LAST LIMIT 1) GROUP BY T2.CustomerID, T1.Currency",
    "text_2_sql": "SELECT c.customerid, SUM(t.amount) AS total_spending, AVG(t.price) AS avg_price_per_item, c.currency FROM customers c JOIN transactions_1k t ON c.customerid = t.customerid GROUP BY c.customerid, c.currency ORDER BY total_spending DESC LIMIT 1",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? -- External Knowledge: {'customer': {'column_name': 'CustomerID', 'table_name': 'customers'}, 'currency': {'column_name': 'Currency', 'table_name': 'customers'}, 'spending': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'price': {'column_name': 'Price', 'table_name': 'transactions_1k'}, 'purchased': {'column_name': 'ProductID', 'table_name': 'transactions_1k'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "true_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / NULLIF(T1.Amount, 0) > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "text_2_sql": "SELECT DISTINCT t.customerid, y.consumption FROM transactions_1k t JOIN yearmonth y ON t.customerid = y.customerid WHERE t.productid = 5 AND t.price / t.amount > 29.00 AND y.date = '2012-08'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012. -- External Knowledge: {'paid': {'column_name': 'Price', 'table_name': 'transactions_1k'}, 'unit': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'product': {'column_name': 'ProductID', 'table_name': 'transactions_1k'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'August': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "true_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / NULLIF(T1.Amount, 0) > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "text_2_sql": "SELECT DISTINCT y.customerid, y.consumption FROM transactions_1k t JOIN yearmonth y ON t.customerid = y.customerid WHERE t.productid = 5 AND t.price / t.amount > 29.00 AND y.date = '2012-08'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012. -- External Knowledge: {'paid': {'column_name': 'Price', 'table_name': 'transactions_1k'}, 'unit': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'product': {'column_name': 'ProductID', 'table_name': 'transactions_1k'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'August': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "true_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / NULLIF(T1.Amount, 0) > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "text_2_sql": "SELECT DISTINCT t.customerid, y.consumption FROM transactions_1k t JOIN yearmonth y ON t.customerid = y.customerid WHERE t.productid = 5 AND t.price / t.amount > 29.00 AND y.date = '2012-08'",
    "prompt": "CREATE TABLE customers ( `customerid` BIGINT NOT NULL, `segment` TEXT NULL, `currency` TEXT NULL ); CREATE TABLE gasstations ( `gasstationid` BIGINT NOT NULL, `chainid` BIGINT NULL, `country` TEXT NULL, `segment` TEXT NULL ); CREATE TABLE products ( `productid` BIGINT NOT NULL, `description` TEXT NULL ); CREATE TABLE transactions_1k ( `price` REAL NULL, `date` DATE NULL, `transactionid` BIGINT NOT NULL, `customerid` BIGINT NULL, `cardid` BIGINT NULL, `gasstationid` BIGINT NULL, `productid` BIGINT NULL, `amount` BIGINT NULL, `time` TEXT NULL ); CREATE TABLE yearmonth ( `customerid` BIGINT NULL, `consumption` REAL NULL, `date` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012. -- External Knowledge: {'paid': {'column_name': 'Price', 'table_name': 'transactions_1k'}, 'unit': {'column_name': 'Amount', 'table_name': 'transactions_1k'}, 'product': {'column_name': 'ProductID', 'table_name': 'transactions_1k'}, 'consumption': {'column_name': 'Consumption', 'table_name': 'yearmonth'}, 'August': {'column_name': 'Date', 'table_name': 'yearmonth'}, '2012': {'column_name': 'Date', 'table_name': 'yearmonth'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1312,
    "db_id": "student_club",
    "question": "What's Angela Sanders's major?",
    "true_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "text_2_sql": "SELECT m.major_name FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Angela' AND mb.last_name = 'Sanders'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's Angela Sanders's major? -- External Knowledge: {'major': {'column_name': 'major_name', 'table_name': 'Major'}, 'Angela': {'column_name': 'first_name', 'table_name': 'Member'}, 'Sanders': {'column_name': 'last_name', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1317,
    "db_id": "student_club",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "true_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT COUNT(DISTINCT m.member_id) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'medium'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size? -- External Knowledge: {'students': {'column_name': 'link_to_member', 'table_name': 'Attendance'}, 'attended': {'column_name': 'link_to_event', 'table_name': 'Attendance'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'Women': {'column_name': 'event_name', 'table_name': 'Event'}, 'Soccer': {'column_name': 'event_name', 'table_name': 'Event'}, 'medium': {'column_name': 't_shirt_size', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1322,
    "db_id": "student_club",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "true_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Meeting'",
    "text_2_sql": "SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'meeting' AND e.event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(DISTINCT link_to_member) > 10 )",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the events attended by more than 10 members of the Student_Club, how many of them are meetings? -- External Knowledge: {'members': {'column_name': 'link_to_member', 'table_name': 'Attendance'}, 'attended': {'column_name': 'link_to_event', 'table_name': 'Attendance'}, 'events': {'column_name': 'event_id', 'table_name': 'Event'}, 'meetings': {'column_name': 'type', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1323,
    "db_id": "student_club",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "true_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Fundraiser'",
    "text_2_sql": "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type != 'fundraiser' GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the names of events that had an attendance of over 20 students but were not fundraisers. -- External Knowledge: {'attendance': {'column_name': 'link_to_member', 'table_name': 'Attendance'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}, 'students': {'column_name': 'link_to_member', 'table_name': 'Attendance'}, '20': {'column_name': 'link_to_member', 'table_name': 'Attendance'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1331,
    "db_id": "student_club",
    "question": "What is the amount of the funds that the Vice President received?",
    "true_sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "text_2_sql": "SELECT i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the amount of the funds that the Vice President received? -- External Knowledge: {'amount': {'column_name': 'amount', 'table_name': 'Income'}, 'Vice': {'column_name': 'position', 'table_name': 'Member'}, 'President': {'column_name': 'position', 'table_name': 'Member'}, 'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1334,
    "db_id": "student_club",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "true_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "text_2_sql": "SELECT DISTINCT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the full name of the Student_Club members that grew up in Illinois state. -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'Illinois': {'column_name': 'state', 'table_name': 'Zip_Code'}, 'full': {'column_name': 'first_name', 'table_name': 'Member'}, 'grew': {'column_name': 'zip', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1338,
    "db_id": "student_club",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "true_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "text_2_sql": "SELECT DISTINCT e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Was each expense in October Meeting on October 8, 2019 approved? -- External Knowledge: {'October': {'column_name': 'event_date', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1339,
    "db_id": "student_club",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "true_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "text_2_sql": "SELECT AVG(e.cost) AS average_cost FROM member m JOIN expense ex ON m.member_id = ex.link_to_member JOIN budget b ON ex.link_to_budget = b.budget_id JOIN event e ON b.link_to_event = e.event_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (EXTRACT(MONTH FROM TO_DATE(e.event_date, 'YYYY-MM-DD')) IN (9, 10))",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the total average cost that Elijah Allen spent in the events on September and October. -- External Knowledge: {'October': {'column_name': 'event_date', 'table_name': 'Event'}, 'September': {'column_name': 'event_date', 'table_name': 'Event'}, 'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'Elijah': {'column_name': 'first_name', 'table_name': 'Member'}, 'Allen': {'column_name': 'last_name', 'table_name': 'Member'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1339,
    "db_id": "student_club",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "true_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "text_2_sql": "SELECT AVG(e.cost) AS average_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (EXTRACT(MONTH FROM TO_DATE(ev.event_date, 'YYYY-MM-DD')) IN (9, 10))",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the total average cost that Elijah Allen spent in the events on September and October. -- External Knowledge: {'October': {'column_name': 'event_date', 'table_name': 'Event'}, 'September': {'column_name': 'event_date', 'table_name': 'Event'}, 'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'Elijah': {'column_name': 'first_name', 'table_name': 'Member'}, 'Allen': {'column_name': 'last_name', 'table_name': 'Member'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1340,
    "db_id": "student_club",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "true_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "text_2_sql": "SELECT ABS(SUM(CASE WHEN EXTRACT(YEAR FROM TO_DATE(e.event_date, 'YYYY-MM-DD')) = 2019 THEN b.spent ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM TO_DATE(e.event_date, 'YYYY-MM-DD')) = 2020 THEN b.spent ELSE 0 END)) AS difference FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE EXTRACT(YEAR FROM TO_DATE(e.event_date, 'YYYY-MM-DD')) IN (2019, 2020)",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020. -- External Knowledge: {'year': {'column_name': 'event_date', 'table_name': 'Event'}, 'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'amount': {'column_name': 'amount', 'table_name': 'Budget'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1344,
    "db_id": "student_club",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "true_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "text_2_sql": "SELECT notes FROM event WHERE type = 'fundraising' AND event_date = '2019/9/14'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the notes of the fundraising on 2019/9/14? -- External Knowledge: {'notes': {'column_name': 'notes', 'table_name': 'Event'}, 'fundraising': {'column_name': 'type', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1346,
    "db_id": "student_club",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "true_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "text_2_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Tell the phone number of \"Carlo Jacobs\". -- External Knowledge: {'phone': {'column_name': 'phone', 'table_name': 'Member'}, 'Carlo': {'column_name': 'first_name', 'table_name': 'Member'}, 'Jacobs': {'column_name': 'last_name', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1350,
    "db_id": "student_club",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "true_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "text_2_sql": "SELECT e.status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description LIKE '%Post Cards, Posters%' AND ex.expense_date = '2019/8/20'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'status': {'column_name': 'status', 'table_name': 'Event'}, 'Posters': {'column_name': 'expense_description', 'table_name': 'Expense'}, 'bought': {'column_name': 'expense_date', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1351,
    "db_id": "student_club",
    "question": "What was Brent Thomason's major?",
    "true_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "text_2_sql": "SELECT m.major_name FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was Brent Thomason's major? -- External Knowledge: {'major': {'column_name': 'major_name', 'table_name': 'Major'}, 'Thomason': {'column_name': 'last_name', 'table_name': 'Member'}, 'Brent': {'column_name': 'first_name', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1352,
    "db_id": "student_club",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "true_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business' AND m.t_shirt_size = 'medium'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the club members from \"Business\" major, how many of them wear medium size t-shirt? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'size': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'major': {'column_name': 'major_name', 'table_name': 'Major'}, 'Business': {'column_name': 'major_name', 'table_name': 'Major'}, 'medium': {'column_name': 't_shirt_size', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1356,
    "db_id": "student_club",
    "question": "Which department was the President of the club in?",
    "true_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "text_2_sql": "SELECT m.department FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.position = 'President' LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which department was the President of the club in? -- External Knowledge: {'department': {'column_name': 'department', 'table_name': 'Major'}, 'President': {'column_name': 'position', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1357,
    "db_id": "student_club",
    "question": "State the date Connor Hilton paid his/her dues.",
    "true_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "text_2_sql": "SELECT i.date_received FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.amount > 0",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the date Connor Hilton paid his/her dues. -- External Knowledge: {'Connor': {'column_name': 'first_name', 'table_name': 'Member'}, 'Hilton': {'column_name': 'last_name', 'table_name': 'Member'}, 'date': {'column_name': 'date_received', 'table_name': 'Income'}, 'paid': {'column_name': 'amount', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END), 0) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "text_2_sql": "SELECT COUNT(*) AS count FROM ( SELECT b1.amount AS kickoff_amount, b2.amount AS october_amount FROM budget b1 JOIN event e1 ON b1.link_to_event = e1.event_id JOIN budget b2 ON b2.category = b1.category JOIN event e2 ON b2.link_to_event = e2.event_id WHERE e1.event_name = 'Yearly Kickoff' AND e2.event_name = 'October Meeting' AND b1.category = 'Advertisement' AND b1.amount > b2.amount ) subquery",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? -- External Knowledge: {'meeting': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1361,
    "db_id": "student_club",
    "question": "What is the total cost of the pizzas for all the events?",
    "true_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "text_2_sql": "SELECT SUM(e.cost) AS total_pizza_cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE e.expense_description ILIKE '%pizza%'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the total cost of the pizzas for all the events? -- External Knowledge: {'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}, 'total': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1362,
    "db_id": "student_club",
    "question": "How many cities are there in Orange County, Virginia?",
    "true_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "text_2_sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many cities are there in Orange County, Virginia? -- External Knowledge: {'Orange': {'column_name': 'county', 'table_name': 'Zip_Code'}, 'County': {'column_name': 'county', 'table_name': 'Zip_Code'}, 'cities': {'column_name': 'city', 'table_name': 'Zip_Code'}, 'Virginia': {'column_name': 'state', 'table_name': 'Zip_Code'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1368,
    "db_id": "student_club",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "true_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "text_2_sql": "SELECT m.major_name FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.phone = '809-555-3360'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What does the person with the phone number \"809-555-3360\" major in? -- External Knowledge: {'person': {'column_name': 'member_id', 'table_name': 'Member'}, 'phone': {'column_name': 'phone', 'table_name': 'Member'}, 'major': {'column_name': 'major_name', 'table_name': 'Major'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1371,
    "db_id": "student_club",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "true_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "text_2_sql": "SELECT COUNT(DISTINCT a.link_to_member) FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many members attended the \"Women's Soccer\" event? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'attended': {'column_name': 'link_to_member', 'table_name': 'Attendance'}, 'Soccer': {'column_name': 'event_name', 'table_name': 'Event'}, 'event': {'column_name': 'event_id', 'table_name': 'Event'}, 'Women': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1375,
    "db_id": "student_club",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "true_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "text_2_sql": "SELECT m.member_id, m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'School of Applied Sciences, Technology and Education'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the members of the \"School of Applied Sciences, Technology and Education\" department. -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'department': {'column_name': 'department', 'table_name': 'Major'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1376,
    "db_id": "student_club",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / NULLIF(T1.amount, 0) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.event_name, b.spent / b.amount AS spend_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'closed' AND b.amount > 0 ORDER BY spend_ratio DESC LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among all the closed events, which event has the highest spend-to-budget ratio? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'closed': {'column_name': 'status', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1378,
    "db_id": "student_club",
    "question": "What is the highest amount of budget spend for an event?",
    "true_sql": "SELECT MAX(spent) FROM budget",
    "text_2_sql": "SELECT MAX(spent) AS highest_budget_spend FROM budget WHERE link_to_event IS NOT NULL",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the highest amount of budget spend for an event? -- External Knowledge: {'spend': {'column_name': 'spent', 'table_name': 'Budget'}, 'budget': {'column_name': 'amount', 'table_name': 'Budget'}, 'highest': {'column_name': 'amount', 'table_name': 'Budget'}, 'amount': {'column_name': 'amount', 'table_name': 'Budget'}, 'event': {'column_name': 'link_to_event', 'table_name': 'Budget'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1380,
    "db_id": "student_club",
    "question": "What is the total amount of money spent for food?",
    "true_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "text_2_sql": "SELECT SUM(spent) AS total_spent_on_food FROM budget WHERE category = 'food'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the total amount of money spent for food? -- External Knowledge: {'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'amount': {'column_name': 'amount', 'table_name': 'Budget'}, 'money': {'column_name': 'amount', 'table_name': 'Budget'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1381,
    "db_id": "student_club",
    "question": "List the name of students that have attended more than 7 events.",
    "true_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id, T1.first_name, T1.last_name HAVING COUNT(T2.link_to_event) > 7",
    "text_2_sql": "SELECT m.first_name, m.last_name, COUNT(a.link_to_event) AS event_count FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id, m.first_name, m.last_name HAVING COUNT(a.link_to_event) > 7 ORDER BY event_count DESC",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the name of students that have attended more than 7 events. -- External Knowledge: {'students': {'column_name': 'first_name', 'table_name': 'Member'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}, 'attended': {'column_name': 'link_to_event', 'table_name': 'Attendance'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "true_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "text_2_sql": "SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_event JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff' AND m.position = 'student' AND b.category = 'budget'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which student has been entrusted to manage the budget for the Yearly Kickoff? -- External Knowledge: {'budget': {'column_name': 'category', 'table_name': 'Budget'}, 'student': {'column_name': 'position', 'table_name': 'Member'}, 'Yearly': {'column_name': 'event_name', 'table_name': 'Event'}, 'Kickoff': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1389,
    "db_id": "student_club",
    "question": "Which event has the lowest cost?",
    "true_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT e.event_name, MIN(ex.cost) as lowest_cost FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget GROUP BY e.event_id, e.event_name ORDER BY lowest_cost ASC LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which event has the lowest cost? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(T3.cost), 0) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "text_2_sql": "SELECT ROUND( (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100, 2) AS yearly_kickoff_percentage FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(T3.cost), 0) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "text_2_sql": "SELECT ROUND( (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100, 2) AS yearly_kickoff_percentage FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(T3.cost), 0) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "text_2_sql": "SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS yearly_kickoff_percentage FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1392,
    "db_id": "student_club",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "true_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY source DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT source, SUM(amount) as total_amount FROM income WHERE EXTRACT(YEAR FROM date_received::date) = 2019 AND EXTRACT(MONTH FROM date_received::date) = 9 GROUP BY source ORDER BY total_amount DESC LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Indicate the top source of funds received in September 2019 based on their amount. -- External Knowledge: {'source': {'column_name': 'source', 'table_name': 'Income'}, 'September': {'column_name': 'date_received', 'table_name': 'Income'}, '2019': {'column_name': 'date_received', 'table_name': 'Income'}, 'amount': {'column_name': 'amount', 'table_name': 'Income'}, 'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1394,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "true_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "text_2_sql": "SELECT COUNT(DISTINCT m.member_id) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Physics Teaching'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many members of the Student_Club have major in 'Physics Teaching'? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'major': {'column_name': 'major_name', 'table_name': 'Major'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1398,
    "db_id": "student_club",
    "question": "Name the event with the highest amount spent on advertisement.",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'advertisement' ORDER BY b.spent DESC LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the event with the highest amount spent on advertisement. -- External Knowledge: {'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'amount': {'column_name': 'amount', 'table_name': 'Budget'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "true_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "text_2_sql": "SELECT CASE WHEN EXISTS ( SELECT 1 FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer' ) THEN 'Yes' ELSE 'No' END AS attended_womens_soccer",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Did Maya Mclean attend the 'Women's Soccer' event? -- External Knowledge: {'Soccer': {'column_name': 'event_name', 'table_name': 'Event'}, 'Maya': {'column_name': 'first_name', 'table_name': 'Member'}, 'Mclean': {'column_name': 'last_name', 'table_name': 'Member'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'attend': {'column_name': 'link_to_event', 'table_name': 'Attendance'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1401,
    "db_id": "student_club",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "true_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "text_2_sql": "SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description LIKE '%posters%'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Indicate the cost of posters for 'September Speaker' event. -- External Knowledge: {'Speaker': {'column_name': 'event_name', 'table_name': 'Event'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'posters': {'column_name': 'expense_description', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1403,
    "db_id": "student_club",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE e.status = 'closed' GROUP BY e.event_id, e.event_name, b.amount HAVING SUM(ex.cost) - b.amount = ( SELECT MAX(total_cost - budget_amount) FROM ( SELECT e2.event_id, b2.amount AS budget_amount, SUM(ex2.cost) AS total_cost FROM event e2 JOIN budget b2 ON e2.event_id = b2.link_to_event JOIN expense ex2 ON b2.budget_id = ex2.link_to_budget WHERE e2.status = 'closed' GROUP BY e2.event_id, b2.amount ) subquery ) LIMIT 1",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Indicate the name of the closed event whose cost has exceeded the budget the most. -- External Knowledge: {'closed': {'column_name': 'status', 'table_name': 'Event'}, 'budget': {'column_name': 'amount', 'table_name': 'Budget'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'exceeded': {'column_name': 'spent', 'table_name': 'Budget'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1404,
    "db_id": "student_club",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "true_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' GROUP BY T1.type",
    "text_2_sql": "SELECT e.expense_description, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes' GROUP BY e.expense_description",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Identify the type of expenses and their total value approved for 'October Meeting' event. -- External Knowledge: {'type': {'column_name': 'type', 'table_name': 'Event'}, 'approved': {'column_name': 'approved', 'table_name': 'Expense'}, 'expenses': {'column_name': 'expense_description', 'table_name': 'Expense'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}, 'value': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1405,
    "db_id": "student_club",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "true_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "text_2_sql": "SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' ORDER BY b.amount ASC",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. -- External Knowledge: {'budgeted': {'column_name': 'amount', 'table_name': 'Budget'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1409,
    "db_id": "student_club",
    "question": "Mention the total expense used on 8/20/2019.",
    "true_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "text_2_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Mention the total expense used on 8/20/2019. -- External Knowledge: {'expense': {'column_name': 'cost', 'table_name': 'Expense'}, 'total': {'column_name': 'cost', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1410,
    "db_id": "student_club",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "true_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id, m.first_name, m.last_name",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred? -- External Knowledge: {'total': {'column_name': 'cost', 'table_name': 'Expense'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'member': {'column_name': 'member_id', 'table_name': 'Member'}, 'full': {'column_name': 'first_name', 'table_name': 'Member'}, 'incurred': {'column_name': 'expense_date', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1411,
    "db_id": "student_club",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "true_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "text_2_sql": "SELECT e.expense_description FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State what kind of expenses that Sacha Harrison incurred? -- External Knowledge: {'Harrison': {'column_name': 'last_name', 'table_name': 'Member'}, 'Sacha': {'column_name': 'first_name', 'table_name': 'Member'}, 'expenses': {'column_name': 'expense_description', 'table_name': 'Expense'}, 'incurred': {'column_name': 'expense_date', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1422,
    "db_id": "student_club",
    "question": "State the category of events were held at MU 215.",
    "true_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "text_2_sql": "SELECT DISTINCT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the category of events were held at MU 215. -- External Knowledge: {'category': {'column_name': 'category', 'table_name': 'Budget'}, 'events': {'column_name': 'event_name', 'table_name': 'Event'}, 'held': {'column_name': 'location', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "true_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "text_2_sql": "SELECT DISTINCT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'environmental engineering'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the last name of members with a major in environmental engineering and include its department and college name. -- External Knowledge: {'last': {'column_name': 'last_name', 'table_name': 'Member'}, 'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'major': {'column_name': 'major_name', 'table_name': 'Major'}, 'department': {'column_name': 'department', 'table_name': 'Major'}, 'college': {'column_name': 'college', 'table_name': 'Major'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1427,
    "db_id": "student_club",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "true_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "text_2_sql": "SELECT DISTINCT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'guest speaker' AND b.spent = 0",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent? -- External Knowledge: {'budget': {'column_name': 'category', 'table_name': 'Budget'}, 'guest': {'column_name': 'type', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.income_id), 0) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'medium'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'size': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'medium': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'amount': {'column_name': 'amount', 'table_name': 'Income'}, 'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.income_id), 0) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'medium'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'size': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'medium': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'amount': {'column_name': 'amount', 'table_name': 'Income'}, 'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.income_id), 0) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'medium'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club? -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'size': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'medium': {'column_name': 't_shirt_size', 'table_name': 'Member'}, 'amount': {'column_name': 'amount', 'table_name': 'Income'}, 'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1435,
    "db_id": "student_club",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "true_sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND DATE(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "text_2_sql": "SELECT event_name FROM event WHERE status = 'closed' AND type = 'game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. -- External Knowledge: {'closed': {'column_name': 'status', 'table_name': 'Event'}, 'event': {'column_name': 'event_name', 'table_name': 'Event'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "true_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > (SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member)",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) GROUP BY m.member_id, m.first_name, m.last_name, m.phone",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the full name and contact number of members who had to spend more than average on each expense. -- External Knowledge: {'members': {'column_name': 'member_id', 'table_name': 'Member'}, 'expense': {'column_name': 'expense_id', 'table_name': 'Expense'}, 'spend': {'column_name': 'cost', 'table_name': 'Expense'}, 'full': {'column_name': 'first_name', 'table_name': 'Member'}, 'contact': {'column_name': 'phone', 'table_name': 'Member'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1460,
    "db_id": "student_club",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "true_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description IN ('water', 'veggie tray', 'supplies') GROUP BY m.member_id, m.first_name, m.last_name, e.cost",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. -- External Knowledge: {'spent': {'column_name': 'spent', 'table_name': 'Budget'}, 'cost': {'column_name': 'cost', 'table_name': 'Expense'}, 'member': {'column_name': 'link_to_member', 'table_name': 'Expense'}, 'water': {'column_name': 'expense_description', 'table_name': 'Expense'}, 'veggie': {'column_name': 'expense_description', 'table_name': 'Expense'}, 'supplies': {'column_name': 'expense_description', 'table_name': 'Expense'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1464,
    "db_id": "student_club",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "true_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '9/9/2019';",
    "prompt": "CREATE TABLE major ( `major_id` TEXT NOT NULL, `major_name` TEXT NULL, `department` TEXT NULL, `college` TEXT NULL ); CREATE TABLE member ( `zip` BIGINT NULL, `first_name` TEXT NULL, `last_name` TEXT NULL, `email` TEXT NULL, `position` TEXT NULL, `t_shirt_size` TEXT NULL, `phone` TEXT NULL, `member_id` TEXT NOT NULL, `link_to_major` TEXT NULL ); CREATE TABLE attendance ( `link_to_event` TEXT NOT NULL, `link_to_member` TEXT NOT NULL ); CREATE TABLE budget ( `remaining` REAL NULL, `spent` REAL NULL, `amount` BIGINT NULL, `budget_id` TEXT NOT NULL, `link_to_event` TEXT NULL, `category` TEXT NULL, `event_status` TEXT NULL ); CREATE TABLE event ( `event_id` TEXT NOT NULL, `event_name` TEXT NULL, `event_date` TEXT NULL, `type` TEXT NULL, `notes` TEXT NULL, `location` TEXT NULL, `status` TEXT NULL ); CREATE TABLE expense ( `cost` REAL NULL, `expense_description` TEXT NULL, `expense_date` TEXT NULL, `expense_id` TEXT NOT NULL, `approved` TEXT NULL, `link_to_member` TEXT NULL, `link_to_budget` TEXT NULL ); CREATE TABLE income ( `amount` BIGINT NULL, `income_id` TEXT NOT NULL, `date_received` TEXT NULL, `source` TEXT NULL, `notes` TEXT NULL, `link_to_member` TEXT NULL ); CREATE TABLE zip_code ( `zip_code` BIGINT NOT NULL, `type` TEXT NULL, `city` TEXT NULL, `county` TEXT NULL, `state` TEXT NULL, `short_state` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. -- External Knowledge: {'received': {'column_name': 'date_received', 'table_name': 'Income'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1149,
    "db_id": "thrombosis_prediction",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) FROM Patient WHERE SEX = 'M'",
    "text_2_sql": "SELECT CASE WHEN COUNT(CASE WHEN Admission = 'inpatient' THEN 1 END) > COUNT(CASE WHEN Admission = 'outpatient' THEN 1 END) THEN 'More inpatients' ELSE 'More outpatients' END AS patient_type_comparison, ABS( (COUNT(CASE WHEN Admission = 'inpatient' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN Admission = 'outpatient' THEN 1 END) * 100.0 / COUNT(*)) ) AS percentage_deviation FROM Patient WHERE SEX = 'male'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Are there more in-patient or outpatient who were male? What is the deviation in percentage? -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'outpatient': {'column_name': 'Admission', 'table_name': 'Patient'}, 'were': {'column_name': 'Admission', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1149,
    "db_id": "thrombosis_prediction",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) FROM Patient WHERE SEX = 'M'",
    "text_2_sql": "SELECT CASE WHEN inpatient_count > outpatient_count THEN 'In-patient' ELSE 'Outpatient' END AS patient_type, ABS(inpatient_percentage - outpatient_percentage) AS percentage_deviation FROM ( SELECT COUNT(*) FILTER (WHERE Admission = 'In-patient' AND SEX = 'Male') AS inpatient_count, COUNT(*) FILTER (WHERE Admission = 'Outpatient' AND SEX = 'Male') AS outpatient_count, COUNT(*) FILTER (WHERE Admission = 'In-patient' AND SEX = 'Male') * 100.0 / NULLIF(COUNT(*) FILTER (WHERE SEX = 'Male'), 0) AS inpatient_percentage, COUNT(*) FILTER (WHERE Admission = 'Outpatient' AND SEX = 'Male') * 100.0 / NULLIF(COUNT(*) FILTER (WHERE SEX = 'Male'), 0) AS outpatient_percentage FROM Patient ) subquery",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Are there more in-patient or outpatient who were male? What is the deviation in percentage? -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'outpatient': {'column_name': 'Admission', 'table_name': 'Patient'}, 'were': {'column_name': 'Admission', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1150,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient were born after 1930?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(Birthday AS TIMESTAMP), 'YYYY') > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(*), 0) FROM Patient WHERE SEX = 'F'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN SEX = 'F' AND Birthday > '1930-12-31' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_born_after_1930 FROM Patient WHERE SEX IS NOT NULL AND Birthday IS NOT NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of female patient were born after 1930? -- External Knowledge: {'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'after': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1152,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "true_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) FROM Patient WHERE Diagnosis = 'SLE'",
    "text_2_sql": "SELECT CAST(COUNT(CASE WHEN Admission = 'Outpatient' THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN Admission = 'Inpatient' THEN 1 END), 0) AS outpatient_to_inpatient_ratio FROM Patient WHERE Diagnosis = 'SLE' AND \"First Date\" IS NOT NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'followed': {'column_name': 'First Date', 'table_name': 'Patient'}, 'treatment': {'column_name': 'Admission', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "true_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "text_2_sql": "SELECT p.Diagnosis, l.Date FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.ID = '30609' ORDER BY l.Date;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient. -- External Knowledge: {'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'date': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'tests': {'column_name': 'ID', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "true_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "text_2_sql": "SELECT p.Diagnosis, l.Date FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.ID = '30609' ORDER BY l.Date;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient. -- External Knowledge: {'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'date': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'tests': {'column_name': 'ID', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "true_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "text_2_sql": "SELECT p.Diagnosis, l.Date FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.ID = '30609' ORDER BY l.Date;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient. -- External Knowledge: {'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'date': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'tests': {'column_name': 'ID', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE l.LDH > (SELECT MAX(normal_range) FROM LDH_reference_table) OR l.LDH < (SELECT MIN(normal_range) FROM LDH_reference_table)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the patient ID, sex and birthday of patient with LDH beyond normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'LDH': {'column_name': 'LDH', 'table_name': 'Laboratory'}, 'birthday': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE l.LDH > (SELECT MAX(normal_range) FROM LDH_reference) OR l.LDH < (SELECT MIN(normal_range) FROM LDH_reference)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the patient ID, sex and birthday of patient with LDH beyond normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'LDH': {'column_name': 'LDH', 'table_name': 'Laboratory'}, 'birthday': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE l.LDH > (SELECT MAX(normal_range) FROM LDH_reference_table) OR l.LDH < (SELECT MIN(normal_range) FROM LDH_reference_table)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the patient ID, sex and birthday of patient with LDH beyond normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'LDH': {'column_name': 'LDH', 'table_name': 'Laboratory'}, 'birthday': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "text_2_sql": "SELECT p.ID, EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.APTT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the ID and age of patient with positive degree of coagulation. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'coagulation': {'column_name': 'APTT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "text_2_sql": "SELECT p.ID, EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.APTT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the ID and age of patient with positive degree of coagulation. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'coagulation': {'column_name': 'APTT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "text_2_sql": "SELECT p.ID, EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.APTT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the ID and age of patient with positive degree of coagulation. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'coagulation': {'column_name': 'APTT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 'severe'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 'severe'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 'severe'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "true_sql": "SELECT COUNT(*) FROM Patient WHERE TO_CHAR(CAST(Description AS TIMESTAMP), 'YYYY') = '1997' AND SEX = 'F' AND Admission = '-'",
    "text_2_sql": "SELECT COUNT(DISTINCT p1.patient_id) FROM Patient p1 JOIN Patient p2 ON p1.patient_id = p2.patient_id WHERE p1.SEX = 'F' AND EXTRACT(YEAR FROM p1.\"First Date\") = 1997 AND p1.Admission = 'hospital' AND p2.Admission = 'outpatient' AND p2.\"First Date\" = p1.\"First Date\" + INTERVAL '1 day'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic? -- External Knowledge: {'1997': {'column_name': 'First Date', 'table_name': 'Patient'}, 'hospital': {'column_name': 'Admission', 'table_name': 'Patient'}, 'outpatient': {'column_name': 'Admission', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "true_sql": "SELECT COUNT(*) FROM Patient WHERE TO_CHAR(CAST(Description AS TIMESTAMP), 'YYYY') = '1997' AND SEX = 'F' AND Admission = '-'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Patient p2 ON p.patient_id = p2.patient_id WHERE p.SEX = 'F' AND EXTRACT(YEAR FROM p.\"First Date\") = 1997 AND p.Admission = 'hospital' AND p2.Admission = 'outpatient' AND p2.\"First Date\" = p.\"First Date\" + INTERVAL '1 day'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic? -- External Knowledge: {'1997': {'column_name': 'First Date', 'table_name': 'Patient'}, 'hospital': {'column_name': 'Admission', 'table_name': 'Patient'}, 'outpatient': {'column_name': 'Admission', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "true_sql": "SELECT COUNT(*) FROM Patient WHERE TO_CHAR(CAST(Description AS TIMESTAMP), 'YYYY') = '1997' AND SEX = 'F' AND Admission = '-'",
    "text_2_sql": "SELECT COUNT(*) FROM Patient WHERE EXTRACT(YEAR FROM \"First Date\") = 1997 AND SEX = 'F' AND Admission = 'hospital' AND EXISTS ( SELECT 1 FROM Patient p2 WHERE p2.Admission = 'outpatient' AND p2.\"First Date\" > Patient.\"First Date\" AND p2.\"First Date\" = ( SELECT MIN(p3.\"First Date\") FROM Patient p3 WHERE p3.Admission = 'outpatient' AND p3.\"First Date\" > Patient.\"First Date\" ) )",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic? -- External Knowledge: {'1997': {'column_name': 'First Date', 'table_name': 'Patient'}, 'hospital': {'column_name': 'Admission', 'table_name': 'Patient'}, 'outpatient': {'column_name': 'Admission', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "true_sql": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND TO_CHAR(CAST(T2.\"Examination Date\" AS TIMESTAMP), 'YYYY') = '1997' AND T2.Thrombosis = 1",
    "text_2_sql": "SELECT COUNT(*) AS women_count FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE p.SEX = 'F' AND e.\"Examination Date\" >= '1997-01-01' AND e.\"Examination Date\" < '1998-01-01' AND e.Thrombosis = (SELECT MAX(Thrombosis) FROM Examination WHERE \"Examination Date\" >= '1997-01-01' AND \"Examination Date\" < '1998-01-01')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many of the patients with the most serious thrombosis cases examined in 1997 are women? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, '1997': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'women': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "true_sql": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND TO_CHAR(CAST(T2.\"Examination Date\" AS TIMESTAMP), 'YYYY') = '1997' AND T2.Thrombosis = 1",
    "text_2_sql": "SELECT COUNT(*) AS women_count FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE p.SEX = 'F' AND e.\"Examination Date\" >= '1997-01-01' AND e.\"Examination Date\" < '1998-01-01' AND e.Thrombosis = (SELECT MAX(Thrombosis) FROM Examination WHERE \"Examination Date\" >= '1997-01-01' AND \"Examination Date\" < '1998-01-01')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many of the patients with the most serious thrombosis cases examined in 1997 are women? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, '1997': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'women': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "true_sql": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND TO_CHAR(CAST(T2.\"Examination Date\" AS TIMESTAMP), 'YYYY') = '1997' AND T2.Thrombosis = 1",
    "text_2_sql": "SELECT COUNT(*) AS women_count FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE p.SEX = 'F' AND e.\"Examination Date\" >= '1997-01-01' AND e.\"Examination Date\" < '1998-01-01' AND e.Thrombosis = (SELECT MAX(Thrombosis) FROM Examination WHERE \"Examination Date\" >= '1997-01-01' AND \"Examination Date\" < '1998-01-01')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many of the patients with the most serious thrombosis cases examined in 1997 are women? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, '1997': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'women': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "true_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE NOT T2.Symptoms IS NULL ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.Symptoms, p.Diagnosis FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.DateOfBirth = ( SELECT MIN(DateOfBirth) FROM Patient WHERE PatientID IN ( SELECT DISTINCT PatientID FROM Examination ) ) ORDER BY e.\"Examination Date\" ASC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "true_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE NOT T2.Symptoms IS NULL ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.Symptoms, p.Diagnosis FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.DateOfBirth = (SELECT MIN(DateOfBirth) FROM Patient) AND e.\"Examination Date\" = ( SELECT MIN(\"Examination Date\") FROM Examination WHERE PatientID = p.PatientID ) LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "true_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE NOT T2.Symptoms IS NULL ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.Symptoms, p.Diagnosis FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.DateOfBirth = ( SELECT MAX(DateOfBirth) FROM Patient WHERE PatientID IN ( SELECT DISTINCT PatientID FROM Examination ) ) ORDER BY e.\"Examination Date\" ASC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "true_sql": "SELECT T1.Date, EXTRACT(YEAR FROM T2.\"First Date\") - EXTRACT(YEAR FROM T2.Birthday) AS Age, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "text_2_sql": "SELECT L.Date AS Lab_Completion_Date, EXTRACT(YEAR FROM AGE(P.\"First Date\", P.Birthday)) AS Age_At_Arrival FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' ORDER BY P.Birthday ASC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? -- External Knowledge: {'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'date': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'SJS': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'arrived': {'column_name': 'First Date', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT ROUND(CAST(SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) AS NUMERIC) / NULLIF(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END), 0), 2) AS male_to_female_ratio FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.UA > (SELECT AVG(UA) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of male to female patients among all those with abnormal uric acid counts? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT ROUND(CAST(SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) AS NUMERIC) / NULLIF(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END), 0), 2) AS male_to_female_ratio FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.UA > (SELECT AVG(UA) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of male to female patients among all those with abnormal uric acid counts? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT ROUND(CAST(SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) AS NUMERIC) / NULLIF(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END), 0), 2) AS male_to_female_ratio FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.UA > (SELECT AVG(UA) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of male to female patients among all those with abnormal uric acid counts? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN 1990 AND 1993 AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.Birthday) < 18",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE e.\"Examination Date\" BETWEEN '1990-01-01' AND '1993-12-31' AND (e.\"Examination Date\"::date - p.Birthday::date) / 365.25 < 18",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many underage patients were examined during the course of the three-year period from 1990 to 1993? -- External Knowledge: {'1990': {'column_name': 'Examination Date', 'table_name': 'Examination'}, '1993': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'examined': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'underage': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN 1990 AND 1993 AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.Birthday) < 18",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE e.\"Examination Date\" BETWEEN '1990-01-01' AND '1993-12-31' AND (e.\"Examination Date\" - p.\"Birthday\") < INTERVAL '18 years'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many underage patients were examined during the course of the three-year period from 1990 to 1993? -- External Knowledge: {'1990': {'column_name': 'Examination Date', 'table_name': 'Examination'}, '1993': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'examined': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'underage': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN 1990 AND 1993 AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.Birthday) < 18",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE e.\"Examination Date\" BETWEEN '1990-01-01' AND '1993-12-31' AND (e.\"Examination Date\"::date - p.Birthday::date) / 365.25 < 18",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many underage patients were examined during the course of the three-year period from 1990 to 1993? -- External Knowledge: {'1990': {'column_name': 'Examination Date', 'table_name': 'Examination'}, '1993': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'examined': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'underage': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "true_sql": "SELECT EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) AS age_difference, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB IS NOT NULL ORDER BY T2.HGB DESC LIMIT 1",
    "text_2_sql": "SELECT EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination, e.\"Diagnosis\" FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.\"HGB\" = (SELECT MAX(\"HGB\") FROM Laboratory) LIMIT 1;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis? -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'hemoglobin': {'column_name': 'HGB', 'table_name': 'Laboratory'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "true_sql": "SELECT EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) AS age_difference, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB IS NOT NULL ORDER BY T2.HGB DESC LIMIT 1",
    "text_2_sql": "SELECT EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS patient_age, e.\"Diagnosis\" FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.\"HGB\" = (SELECT MAX(\"HGB\") FROM Laboratory) LIMIT 1;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis? -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'hemoglobin': {'column_name': 'HGB', 'table_name': 'Laboratory'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "true_sql": "SELECT EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) AS age_difference, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB IS NOT NULL ORDER BY T2.HGB DESC LIMIT 1",
    "text_2_sql": "SELECT EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination, e.\"Diagnosis\" FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.\"HGB\" = (SELECT MAX(\"HGB\") FROM Laboratory) LIMIT 1;",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis? -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Examination'}, 'examination': {'column_name': 'Examination Date', 'table_name': 'Examination'}, 'hemoglobin': {'column_name': 'HGB', 'table_name': 'Laboratory'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "true_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND \"Examination Date\" = '1993-11-12'",
    "text_2_sql": "SELECT e.\"aCL IgG\" FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.Diagnosis = 'SLE' AND p.DiagnosisDate = '1994-02-19' AND e.ExaminationDate = '1993-11-12'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'antibody': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'concentration': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'status': {'column_name': 'aCL IgG', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "true_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND \"Examination Date\" = '1993-11-12'",
    "text_2_sql": "SELECT e.\"aCL IgG\" FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.Diagnosis = 'SLE' AND p.DiagnosisDate = '1994-02-19' AND e.ExaminationDate = '1993-11-12'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'antibody': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'concentration': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'status': {'column_name': 'aCL IgG', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "true_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND \"Examination Date\" = '1993-11-12'",
    "text_2_sql": "SELECT e.\"aCL IgG\" FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID WHERE p.Diagnosis = 'SLE' AND p.DiagnosisDate = '1994-02-19' AND e.ExaminationDate = '1993-11-12'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'antibody': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'concentration': {'column_name': 'aCL IgG', 'table_name': 'Examination'}, 'status': {'column_name': 'aCL IgG', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T2.date::text LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / NULLIF(SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "text_2_sql": "SELECT (nov.T_CHO - dec.T_CHO) / nov.T_CHO * 100 AS decrease_rate FROM Patient p JOIN Laboratory nov ON p.PatientID = nov.PatientID JOIN Laboratory dec ON p.PatientID = dec.PatientID WHERE p.Birthday = '1959-02-18' AND EXTRACT(YEAR FROM nov.Date) = 1981 AND EXTRACT(MONTH FROM nov.Date) = 11 AND EXTRACT(YEAR FROM dec.Date) = 1981 AND EXTRACT(MONTH FROM dec.Date) = 12 LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? -- External Knowledge: {'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'total cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'November': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'December': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1981': {'column_name': 'Date', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T2.date::text LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / NULLIF(SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "text_2_sql": "SELECT (nov.T_CHO - dec.T_CHO) / nov.T_CHO * 100 AS decrease_rate FROM Patient p JOIN Laboratory nov ON p.PatientID = nov.PatientID JOIN Laboratory dec ON p.PatientID = dec.PatientID WHERE p.Birthday = '1959-02-18' AND EXTRACT(YEAR FROM nov.Date) = 1981 AND EXTRACT(MONTH FROM nov.Date) = 11 AND EXTRACT(YEAR FROM dec.Date) = 1981 AND EXTRACT(MONTH FROM dec.Date) = 12 LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? -- External Knowledge: {'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'total cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'November': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'December': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1981': {'column_name': 'Date', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T2.date::text LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / NULLIF(SUM(CASE WHEN T2.date::text LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "text_2_sql": "SELECT (nov.T_CHO - dec.T_CHO) / nov.T_CHO * 100 AS decrease_rate FROM Patient p JOIN Laboratory nov ON p.PatientID = nov.PatientID JOIN Laboratory dec ON p.PatientID = dec.PatientID WHERE p.Birthday = '1959-02-18' AND EXTRACT(YEAR FROM nov.Date) = 1981 AND EXTRACT(MONTH FROM nov.Date) = 11 AND EXTRACT(YEAR FROM dec.Date) = 1981 AND EXTRACT(MONTH FROM dec.Date) = 12 LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? -- External Knowledge: {'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'total cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'November': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'December': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1981': {'column_name': 'Date', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "true_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.Date BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. -- External Knowledge: {'examined': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'ALB': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'greater': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'GPT', 'table_name': 'Laboratory'}, '30': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'than': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "true_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.Date BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. -- External Knowledge: {'examined': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'ALB': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'greater': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'GPT', 'table_name': 'Laboratory'}, '30': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'than': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "true_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.Date BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. -- External Knowledge: {'examined': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'ALB': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'greater': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'GPT', 'table_name': 'Laboratory'}, '30': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'than': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1189,
    "db_id": "thrombosis_prediction",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "true_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S' AND \"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S')",
    "text_2_sql": "SELECT COUNT(*) AS patient_count FROM Examination e WHERE e.\"Thrombosis\" = 2 AND e.\"ANA Pattern\" = 'S' AND e.\"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'ANA': {'column_name': 'ANA', 'table_name': 'Examination'}, 'pattern': {'column_name': 'ANA Pattern', 'table_name': 'Examination'}, 'antibody': {'column_name': 'aCL IgM', 'table_name': 'Examination'}, 'IgM': {'column_name': 'aCL IgM', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1189,
    "db_id": "thrombosis_prediction",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "true_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S' AND \"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S')",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE e.Thrombosis = 2 AND e.ANA Pattern = 'S' AND e.aCL IgM > ( SELECT AVG(aCL IgM) * 1.2 FROM Examination )",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'ANA': {'column_name': 'ANA', 'table_name': 'Examination'}, 'pattern': {'column_name': 'ANA Pattern', 'table_name': 'Examination'}, 'antibody': {'column_name': 'aCL IgM', 'table_name': 'Examination'}, 'IgM': {'column_name': 'aCL IgM', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1189,
    "db_id": "thrombosis_prediction",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "true_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S' AND \"aCL IgM\" > (SELECT AVG(\"aCL IgM\") * 1.2 FROM Examination WHERE Thrombosis = 2 AND \"ANA Pattern\" = 'S')",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id WHERE e.Thrombosis = 2 AND e.ANA Pattern = 'S' AND e.aCL IgM > ( SELECT AVG(aCL IgM) * 1.2 FROM Examination )",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'ANA': {'column_name': 'ANA', 'table_name': 'Examination'}, 'pattern': {'column_name': 'ANA Pattern', 'table_name': 'Examination'}, 'antibody': {'column_name': 'aCL IgM', 'table_name': 'Examination'}, 'IgM': {'column_name': 'aCL IgM', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.\"T-BIL\" < 2.0 AND T2.Date::text LIKE '1991-10-%'",
    "text_2_sql": "SELECT DISTINCT p.PatientID, p.Name FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON p.PatientID = l.PatientID WHERE e.ExamType = 'Outpatient' AND l.Date BETWEEN '1991-10-01' AND '1991-10-31' AND l.T-BIL BETWEEN 0.3 AND 1.2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. -- External Knowledge: {'October': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1991': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'test': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.\"T-BIL\" < 2.0 AND T2.Date::text LIKE '1991-10-%'",
    "text_2_sql": "SELECT DISTINCT p.PatientID, p.Name FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON p.PatientID = l.PatientID WHERE e.Type = 'Outpatient' AND l.Date BETWEEN '1991-10-01' AND '1991-10-31' AND l.T_BIL BETWEEN 0.3 AND 1.2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. -- External Knowledge: {'October': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1991': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'test': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.\"T-BIL\" < 2.0 AND T2.Date::text LIKE '1991-10-%'",
    "text_2_sql": "SELECT DISTINCT p.PatientID, p.Name FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON p.PatientID = l.PatientID WHERE e.ExamType = 'Outpatient' AND l.Date BETWEEN '1991-10-01' AND '1991-10-31' AND l.T-BIL BETWEEN 0.3 AND 1.2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. -- External Knowledge: {'October': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1991': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'test': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "true_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "text_2_sql": "SELECT AVG(l.ALB) as average_albumin FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'F' AND p.Diagnosis = 'SLE' AND l.PLT > 400",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'albumin': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'blood': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'PLT': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "true_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "text_2_sql": "SELECT AVG(l.ALB) as average_albumin FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'F' AND l.PLT > 400 AND p.Diagnosis = 'SLE'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'albumin': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'blood': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'PLT': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "true_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "text_2_sql": "SELECT AVG(l.ALB) as average_albumin FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'F' AND l.PLT > 400 AND p.Diagnosis = 'SLE'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'albumin': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'blood': {'column_name': 'ALB', 'table_name': 'Laboratory'}, 'PLT': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1198,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients were given an APS diagnosis?",
    "true_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "text_2_sql": "SELECT COUNT(*) AS female_aps_patients FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many female patients were given an APS diagnosis? -- External Knowledge: {'female': {'column_name': 'SEX', 'table_name': 'Patient'}, 'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'APS': {'column_name': 'Diagnosis', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1201,
    "db_id": "thrombosis_prediction",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(ID), 0) FROM Patient WHERE Diagnosis = 'RA' AND TO_CHAR(CAST(Birthday AS TIMESTAMP), 'YYYY') = '1980'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_women FROM Patient WHERE EXTRACT(YEAR FROM Birthday) = 1980 AND Diagnosis = 'RA';",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of patients who were born in 1980 and were diagnosed with RA are women? -- External Knowledge: {'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'RA': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'women': {'column_name': 'SEX', 'table_name': 'Patient'}, '1980': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "true_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN TRUE ELSE FALSE END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "text_2_sql": "SELECT CASE WHEN l.UA BETWEEN 3.5 AND 7.2 THEN 'Within normal range' ELSE 'Outside normal range' END AS uric_acid_status FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE p.ID = 57266",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Was the patient with the number 57266's uric acid within a normal range? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}, '57266': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "true_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN TRUE ELSE FALSE END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "text_2_sql": "SELECT CASE WHEN l.UA BETWEEN 3.5 AND 7.2 THEN 'Within normal range' ELSE 'Outside normal range' END AS uric_acid_status FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE p.ID = 57266",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Was the patient with the number 57266's uric acid within a normal range? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}, '57266': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "true_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN TRUE ELSE FALSE END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "text_2_sql": "SELECT CASE WHEN l.UA BETWEEN 2.4 AND 6.0 THEN 'Within normal range' ELSE 'Outside normal range' END AS uric_acid_status FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id WHERE p.ID = 57266",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Was the patient with the number 57266's uric acid within a normal range? -- External Knowledge: {'uric': {'column_name': 'UA', 'table_name': 'Laboratory'}, 'acid': {'column_name': 'UA', 'table_name': 'Laboratory'}, '57266': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.SEX = 'male' AND l.GPT > ( SELECT MAX(normal_range) FROM ( SELECT 'male' AS sex, 0 AS min_range, 50 AS max_range UNION ALL SELECT 'female' AS sex, 0 AS min_range, 35 AS max_range ) AS normal_ranges WHERE sex = p.SEX )",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range. -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.SEX = 'male' AND l.GPT > ( SELECT MAX(normal_range) FROM ( SELECT 'male' AS sex, 0 AS min_range, 50 AS max_range UNION ALL SELECT 'female' AS sex, 0 AS min_range, 35 AS max_range ) AS normal_ranges WHERE sex = p.SEX )",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range. -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "text_2_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE p.SEX = 'male' AND l.GPT > ( SELECT MAX(normal_range) FROM ( SELECT 'male' AS gender, 0 AS min_range, 50 AS max_range UNION ALL SELECT 'female' AS gender, 0 AS min_range, 35 AS max_range ) AS normal_ranges WHERE gender = 'male' ) GROUP BY p.ID HAVING COUNT(DISTINCT CASE WHEN l.GPT > ( SELECT MAX(normal_range) FROM ( SELECT 'male' AS gender, 0 AS min_range, 50 AS max_range UNION ALL SELECT 'female' AS gender, 0 AS min_range, 35 AS max_range ) AS normal_ranges WHERE gender = 'male' ) THEN 1 END) > 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range. -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'GPT': {'column_name': 'GPT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "true_sql": "SELECT DISTINCT ON (T1.Birthday) T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "text_2_sql": "SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.GPT > (SELECT MAX(NormalRange) FROM Laboratory WHERE TestName = 'GPT') ORDER BY p.Birthday ASC",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'date of birth': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "true_sql": "SELECT DISTINCT ON (T1.Birthday) T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "text_2_sql": "SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.GPT > (SELECT MAX(NormalRange) FROM Laboratory WHERE TestName = 'GPT') ORDER BY p.Birthday ASC",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'date of birth': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "true_sql": "SELECT DISTINCT ON (T1.Birthday) T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "text_2_sql": "SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.GPT > (SELECT MAX(normal_range) FROM Laboratory WHERE test_name = 'GPT') OR l.GPT < (SELECT MIN(normal_range) FROM Laboratory WHERE test_name = 'GPT') ORDER BY p.Birthday ASC",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth. -- External Knowledge: {'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ALT': {'column_name': 'GPT', 'table_name': 'Laboratory'}, 'date of birth': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1220,
    "db_id": "thrombosis_prediction",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "text_2_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UN BETWEEN 19 AND 21",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing? -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'birthday': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'UN': {'column_name': 'UN', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "true_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 GROUP BY T1.SEX,T1.ID",
    "text_2_sql": "SELECT p.SEX, COUNT(*) as patient_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.\"T-BIL\" NOT BETWEEN 0.3 AND 1.2 GROUP BY p.SEX ORDER BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'total': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "true_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 GROUP BY T1.SEX,T1.ID",
    "text_2_sql": "SELECT p.SEX, COUNT(*) as patient_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.\"T-BIL\" NOT BETWEEN 0.3 AND 1.2 GROUP BY p.SEX ORDER BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'total': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "true_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 GROUP BY T1.SEX,T1.ID",
    "text_2_sql": "SELECT p.SEX, COUNT(*) as patient_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.\"T-BIL\" NOT BETWEEN 0.3 AND 1.2 GROUP BY p.SEX ORDER BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'total': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}, 'bilirubin': {'column_name': 'T-BIL', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "true_sql": "SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-CHO\" >= 250 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday))) AS average_age FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'M' AND l.\"T-CHO\" > 200 GROUP BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average age of the male patient with high cholesterol? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "true_sql": "SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-CHO\" >= 250 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday))) AS average_age FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'M' AND l.\"T-CHO\" > 200 GROUP BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average age of the male patient with high cholesterol? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "true_sql": "SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-CHO\" >= 250 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday))) AS average_age FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'M' AND l.\"T-CHO\" > 200 GROUP BY p.SEX",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average age of the male patient with high cholesterol? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'cholesterol': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 50",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) AS patient_count FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.TG NOT BETWEEN 50 AND 150 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) > 50",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'TG': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'triglyceride': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 50",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.TG NOT BETWEEN 50 AND 150 AND DATE_PART('year', AGE(CURRENT_DATE, p.Birthday)) > 50",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'TG': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'triglyceride': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 50",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) AS patient_count FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.TG NOT BETWEEN 50 AND 150 AND DATE_PART('year', AGE(CURRENT_DATE, p.Birthday)) > 50",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years? -- External Knowledge: {'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'TG': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'triglyceride': {'column_name': 'TG', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1231,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE TO_CHAR(CAST(T1.Birthday AS TIMESTAMP), 'YYYY') BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "text_2_sql": "SELECT COUNT(DISTINCT p.ID) AS male_patients_count FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND p.SEX = 'M' AND l.CPK > (SELECT MAX(normal_range) FROM Laboratory_normal_ranges WHERE test = 'CPK')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range? -- External Knowledge: {'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'patients': {'column_name': 'ID', 'table_name': 'Patient'}, 'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, 'phosphokinase': {'column_name': 'CPK', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1231,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE TO_CHAR(CAST(T1.Birthday AS TIMESTAMP), 'YYYY') BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "text_2_sql": "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND p.SEX = 'M' AND (l.CPK < 30 OR l.CPK > 200)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range? -- External Knowledge: {'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'patient': {'column_name': 'ID', 'table_name': 'Patient'}, 'patients': {'column_name': 'ID', 'table_name': 'Patient'}, 'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, 'phosphokinase': {'column_name': 'CPK', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.\"T-CHO\" < 250",
    "text_2_sql": "SELECT p.ID, p.SEX, p.AGE FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (l.GLU < l.GLU_LOW OR l.GLU > l.GLU_HIGH) AND (l.T_CHO >= l.T_CHO_LOW AND l.T_CHO <= l.T_CHO_HIGH)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. -- External Knowledge: {'glucose': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'GLU': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'T-CHO': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.\"T-CHO\" < 250",
    "text_2_sql": "SELECT p.ID, p.SEX, p.AGE FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (l.GLU < l.GLU_LOW OR l.GLU > l.GLU_HIGH) AND (l.T_CHO >= l.T_CHO_LOW AND l.T_CHO <= l.T_CHO_HIGH)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. -- External Knowledge: {'glucose': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'GLU': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'T-CHO': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.\"T-CHO\" < 250",
    "text_2_sql": "SELECT p.ID, p.SEX, p.AGE FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (l.GLU < l.GLU_LOW OR l.GLU > l.GLU_HIGH) AND (l.T_CHO >= l.T_CHO_LOW AND l.T_CHO <= l.T_CHO_HIGH)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. -- External Knowledge: {'glucose': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'GLU': {'column_name': 'GLU', 'table_name': 'Laboratory'}, 'T-CHO': {'column_name': 'T-CHO', 'table_name': 'Laboratory'}, 'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "true_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "text_2_sql": "SELECT p.ID, p.Age, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.RBC < (SELECT AVG(RBC) FROM Laboratory) ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age. -- External Knowledge: {'red': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "true_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "text_2_sql": "SELECT p.ID, p.Age, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.RBC < (SELECT AVG(RBC) FROM Laboratory) ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age. -- External Knowledge: {'red': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "true_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "text_2_sql": "SELECT p.ID, p.Age, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.RBC < (SELECT AVG(RBC) FROM Laboratory) ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age. -- External Knowledge: {'red': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'RBC', 'table_name': 'Laboratory'}, 'diagnosis': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1238,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "true_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.HGB BETWEEN 12 AND 16 ORDER BY p.Birthday ASC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex. -- External Knowledge: {'sex': {'column_name': 'SEX', 'table_name': 'Patient'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'SLE': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'oldest': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'hemoglobin': {'column_name': 'HGB', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2)",
    "text_2_sql": "SELECT p.ID, p.Birthday as age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.HCT > (SELECT MAX(normal_range) FROM Laboratory_Reference WHERE test = 'HCT') GROUP BY p.ID, p.Birthday HAVING COUNT(DISTINCT l.Date) >= 2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'hematoclit': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'range': {'column_name': 'HCT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2)",
    "text_2_sql": "SELECT p.ID, p.Birthday as age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.HCT > (SELECT MAX(normal_range) FROM Laboratory_Reference WHERE test = 'HCT') GROUP BY p.ID, p.Birthday HAVING COUNT(DISTINCT l.Date) >= 2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'hematoclit': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'range': {'column_name': 'HCT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2)",
    "text_2_sql": "SELECT p.ID, p.Birthday as age FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE l.HCT > (SELECT MAX(normal_range) FROM Laboratory_Normal_Range WHERE test = 'HCT') GROUP BY p.ID, p.Birthday HAVING COUNT(DISTINCT l.Date) >= 2",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range. -- External Knowledge: {'ID': {'column_name': 'ID', 'table_name': 'Patient'}, 'age': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'laboratory': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'hematoclit': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'level': {'column_name': 'HCT', 'table_name': 'Laboratory'}, 'range': {'column_name': 'HCT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "true_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT COUNT(CASE WHEN l.PLT < normal_range.lower THEN 1 END) AS lower_than_normal, COUNT(CASE WHEN l.PLT > normal_range.upper THEN 1 END) AS higher_than_normal FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id CROSS JOIN (SELECT 150 AS lower, 450 AS upper) AS normal_range WHERE l.PLT < normal_range.lower OR l.PLT > normal_range.upper",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? -- External Knowledge: {'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'patients': {'column_name': 'ID', 'table_name': 'Patient'}, 'lower': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'normal': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'number': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "true_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT COUNT(CASE WHEN l.PLT < normal_range.lower THEN 1 END) AS lower_than_normal, COUNT(CASE WHEN l.PLT > normal_range.upper THEN 1 END) AS higher_than_normal FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id CROSS JOIN (SELECT 150 AS lower, 450 AS upper) AS normal_range WHERE l.PLT < normal_range.lower OR l.PLT > normal_range.upper",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? -- External Knowledge: {'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'patients': {'column_name': 'ID', 'table_name': 'Patient'}, 'lower': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'normal': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'number': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "true_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT COUNT(CASE WHEN l.PLT < normal_range.lower THEN 1 END) AS lower_than_normal, COUNT(CASE WHEN l.PLT > normal_range.upper THEN 1 END) AS higher_than_normal FROM Patient p JOIN Laboratory l ON p.ID = l.patient_id CROSS JOIN (SELECT 150 AS lower, 450 AS upper) AS normal_range WHERE l.PLT < normal_range.lower OR l.PLT > normal_range.upper",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? -- External Knowledge: {'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'patients': {'column_name': 'ID', 'table_name': 'Patient'}, 'lower': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'normal': {'column_name': 'PLT', 'table_name': 'Laboratory'}, 'number': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) < 50 AND EXTRACT(YEAR FROM T2.Date) = 1984",
    "text_2_sql": "SELECT DISTINCT p.ID, p.Name FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE EXTRACT(YEAR FROM l.Date) = 1984 AND l.PLT BETWEEN 150000 AND 450000 AND EXTRACT(YEAR FROM l.Date) - EXTRACT(YEAR FROM p.Birthday) < 50 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. -- External Knowledge: {'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1984': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) < 50 AND EXTRACT(YEAR FROM T2.Date) = 1984",
    "text_2_sql": "SELECT DISTINCT p.ID, p.Name FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE EXTRACT(YEAR FROM l.Date) = 1984 AND l.PLT BETWEEN 150000 AND 450000 AND EXTRACT(YEAR FROM l.Date) - EXTRACT(YEAR FROM p.Birthday) < 50 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. -- External Knowledge: {'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1984': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "true_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) < 50 AND EXTRACT(YEAR FROM T2.Date) = 1984",
    "text_2_sql": "SELECT DISTINCT p.ID, p.Name FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID WHERE EXTRACT(YEAR FROM l.Date) = 1984 AND l.PLT BETWEEN 150000 AND 450000 AND EXTRACT(YEAR FROM l.Date) - EXTRACT(YEAR FROM p.Birthday) < 50 ORDER BY p.ID",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. -- External Knowledge: {'laboratory': {'column_name': 'ID', 'table_name': 'Laboratory'}, 'examinations': {'column_name': 'Date', 'table_name': 'Laboratory'}, '1984': {'column_name': 'Date', 'table_name': 'Laboratory'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'old': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'platelet': {'column_name': 'PLT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 55",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN l.PT > 13.5 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_female_abnormal_PT FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE p.SEX = 'F' AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) > 55",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? -- External Knowledge: {'PT': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, '55': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'older': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 55",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN l.PT > 'normal_range' AND p.SEX = 'F' THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN p.SEX = 'F' THEN 1 END), 0), 2) AS percentage_female_abnormal_PT FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) > 55",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? -- External Knowledge: {'PT': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, '55': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'older': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) > 55",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN l.PT > 'normal_range_upper_limit' AND p.SEX = 'F' THEN 1 END) * 100.0 / COUNT(CASE WHEN p.SEX = 'F' THEN 1 END), 2) AS percentage_female_abnormal_PT FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) > 55",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? -- External Knowledge: {'PT': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}, '55': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'years': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'older': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'male' AND l.WBC BETWEEN 4.5 AND 11.0 AND (l.FG < 200 OR l.FG > 400)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'white': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'cells': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'fibrinogen': {'column_name': 'FG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'male' AND l.WBC BETWEEN 4.5 AND 11.0 AND (l.FG < 200 OR l.FG > 400)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'white': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'cells': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'fibrinogen': {'column_name': 'FG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'male' AND l.WBC BETWEEN 4.5 AND 11.0 AND l.FG NOT BETWEEN 200 AND 400",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? -- External Knowledge: {'male': {'column_name': 'SEX', 'table_name': 'Patient'}, 'white': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'cells': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'blood': {'column_name': 'WBC', 'table_name': 'Laboratory'}, 'fibrinogen': {'column_name': 'FG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1251,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with an Ig G higher than normal?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.IGG > l.IGG_upper_limit",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with an Ig G higher than normal? -- External Knowledge: {'Ig': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'higher': {'column_name': 'IGG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1251,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with an Ig G higher than normal?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.IGG > l.IGG_upper_limit",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with an Ig G higher than normal? -- External Knowledge: {'Ig': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'higher': {'column_name': 'IGG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1251,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with an Ig G higher than normal?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON e.examination_id = l.examination_id WHERE l.IGG > l.IGG_upper_limit",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with an Ig G higher than normal? -- External Knowledge: {'Ig': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'higher': {'column_name': 'IGG', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1252,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND NOT T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT e.patient_id) FROM Examination e JOIN Laboratory l ON e.patient_id = l.patient_id WHERE l.IGG = 'normal' AND e.Symptoms IS NOT NULL AND e.Symptoms != ''",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with a normal Ig G level, how many of them have symptoms? -- External Knowledge: {'level': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1252,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND NOT T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT e.PatientID) FROM Examination e JOIN Laboratory l ON e.PatientID = l.PatientID WHERE l.IGG = 'Normal' AND e.Symptoms IS NOT NULL AND e.Symptoms != ''",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with a normal Ig G level, how many of them have symptoms? -- External Knowledge: {'level': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1252,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND NOT T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT e.PatientID) FROM Examination e JOIN Laboratory l ON e.PatientID = l.PatientID WHERE l.IGG = 'Normal' AND e.Symptoms IS NOT NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with a normal Ig G level, how many of them have symptoms? -- External Knowledge: {'level': {'column_name': 'IGG', 'table_name': 'Laboratory'}, 'symptoms': {'column_name': 'Symptoms', 'table_name': 'Examination'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGA = 'normal' AND p.\"First Date\" > '1990-01-01'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a normal Ig A level came to the hospital after 1990/1/1? -- External Knowledge: {'level': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'came': {'column_name': 'First Date', 'table_name': 'Patient'}, 'normal': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'after': {'column_name': 'First Date', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'hospital': {'column_name': 'First Date', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGA = 'normal' AND p.\"First Date\" > '1990-01-01'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a normal Ig A level came to the hospital after 1990/1/1? -- External Knowledge: {'level': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'came': {'column_name': 'First Date', 'table_name': 'Patient'}, 'normal': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'after': {'column_name': 'First Date', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'hospital': {'column_name': 'First Date', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGA = 'normal' AND p.\"First Date\" > '1990-01-01'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a normal Ig A level came to the hospital after 1990/1/1? -- External Knowledge: {'level': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'came': {'column_name': 'First Date', 'table_name': 'Patient'}, 'normal': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'after': {'column_name': 'First Date', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGA', 'table_name': 'Laboratory'}, 'hospital': {'column_name': 'First Date', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "true_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE NOT T2.IGM BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.Diagnosis, COUNT(*) as diagnosis_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGM != 'normal' GROUP BY p.Diagnosis ORDER BY diagnosis_count DESC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with? -- External Knowledge: {'abnormal': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'level': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "true_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE NOT T2.IGM BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.Diagnosis, COUNT(*) as diagnosis_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGM != 'normal' GROUP BY p.Diagnosis ORDER BY diagnosis_count DESC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with? -- External Knowledge: {'abnormal': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'level': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "true_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE NOT T2.IGM BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.Diagnosis, COUNT(*) as diagnosis_count FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.IGM != 'normal' GROUP BY p.Diagnosis ORDER BY diagnosis_count DESC LIMIT 1",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with? -- External Knowledge: {'abnormal': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'diagnosed': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'level': {'column_name': 'IGM', 'table_name': 'Laboratory'}, 'disease': {'column_name': 'Diagnosis', 'table_name': 'Patient'}, 'Ig': {'column_name': 'IGM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p LEFT JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CRP > (SELECT AVG(CRP) FROM Laboratory) AND l.CRP IS NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a abnormal C-reactive protein don't have their data recorded? -- External Knowledge: {'abnormal': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'recorded': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'data': {'column_name': 'CRP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p LEFT JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CRP > (SELECT AVG(CRP) FROM Laboratory) AND l.CRP IS NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a abnormal C-reactive protein don't have their data recorded? -- External Knowledge: {'abnormal': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'recorded': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'data': {'column_name': 'CRP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p LEFT JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CRP > (SELECT AVG(CRP) FROM Laboratory) AND l.CRP IS NULL",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients with a abnormal C-reactive protein don't have their data recorded? -- External Knowledge: {'abnormal': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'recorded': {'column_name': 'CRP', 'table_name': 'Laboratory'}, 'data': {'column_name': 'CRP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, T1.Birthday)) < 70",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.CRE NOT BETWEEN 0.6 AND 1.2 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) < 70",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? -- External Knowledge: {'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, '70': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, T1.Birthday)) < 70",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.CRE NOT BETWEEN 0.6 AND 1.2 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) < 70",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? -- External Knowledge: {'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, '70': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, T1.Birthday)) < 70",
    "text_2_sql": "SELECT COUNT(DISTINCT p.PatientID) FROM Patient p JOIN Laboratory l ON p.PatientID = l.PatientID WHERE l.CRE NOT BETWEEN 0.6 AND 1.2 AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, p.Birthday)) < 70",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? -- External Knowledge: {'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, '70': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.Admission = TRUE AND l.RNP = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? -- External Knowledge: {'admitted': {'column_name': 'Admission', 'table_name': 'Patient'}, 'level': {'column_name': 'RNP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'RNP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.Admission = TRUE AND l.RNP = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? -- External Knowledge: {'admitted': {'column_name': 'Admission', 'table_name': 'Patient'}, 'level': {'column_name': 'RNP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'RNP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.Admission = TRUE AND l.RNP = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? -- External Knowledge: {'admitted': {'column_name': 'Admission', 'table_name': 'Patient'}, 'level': {'column_name': 'RNP', 'table_name': 'Laboratory'}, 'protein': {'column_name': 'RNP', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 0",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id LEFT JOIN Examination e ON p.patient_id = e.patient_id WHERE l.SM = 'normal' AND (e.Thrombosis IS NULL OR e.Thrombosis = 'no')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with normal anti-SM, how many of them does not have thrombosis? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'normal': {'column_name': 'SM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 0",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id JOIN Examination e ON p.patient_id = e.patient_id WHERE l.SM = 'normal' AND e.Thrombosis = 'no'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with normal anti-SM, how many of them does not have thrombosis? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'normal': {'column_name': 'SM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 0",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id LEFT JOIN Examination e ON p.patient_id = e.patient_id WHERE l.SM = 'normal' AND (e.Thrombosis IS NULL OR e.Thrombosis = 'no')",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients with normal anti-SM, how many of them does not have thrombosis? -- External Knowledge: {'thrombosis': {'column_name': 'Thrombosis', 'table_name': 'Examination'}, 'normal': {'column_name': 'SM', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'F' AND e.Symptoms IS NULL AND l.anti_scl70 = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom? -- External Knowledge: {'symptom': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'F' AND e.Symptoms IS NULL AND l.anti_scl70 = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom? -- External Knowledge: {'symptom': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Examination e ON p.patient_id = e.patient_id JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.SEX = 'F' AND e.Symptoms IS NULL AND l.anti_scl70 = 'normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom? -- External Knowledge: {'symptom': {'column_name': 'Symptoms', 'table_name': 'Examination'}, 'female': {'column_name': 'SEX', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.gender = 'Male' AND l.CENTROMEA = 'Normal' AND l.SSB = 'Normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? -- External Knowledge: {'normal': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}, 'level': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.gender = 'Male' AND l.CENTROMEA = 'Normal' AND l.SSB = 'Normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? -- External Knowledge: {'normal': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}, 'level': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "true_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE p.gender = 'Male' AND l.CENTROMEA = 'Normal' AND l.SSB = 'Normal'",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? -- External Knowledge: {'normal': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}, 'level': {'column_name': 'CENTROMEA', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "true_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(p.Birthday) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON e.ExaminationID = l.ExaminationID WHERE l.GOT > (SELECT AVG(GOT) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born? -- External Knowledge: {'abnormal': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'level': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'glutamic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'oxaloacetic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'youngest': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "true_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(p.Birthday) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON e.ExaminationID = l.ExaminationID WHERE l.GOT > (SELECT AVG(GOT) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born? -- External Knowledge: {'abnormal': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'level': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'glutamic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'oxaloacetic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'youngest': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "true_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(p.Birthday) FROM Patient p JOIN Examination e ON p.PatientID = e.PatientID JOIN Laboratory l ON e.ExaminationID = l.ExaminationID WHERE l.GOT > (SELECT AVG(GOT) FROM Laboratory)",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born? -- External Knowledge: {'abnormal': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'born': {'column_name': 'Birthday', 'table_name': 'Patient'}, 'level': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'glutamic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'oxaloacetic': {'column_name': 'GOT', 'table_name': 'Laboratory'}, 'youngest': {'column_name': 'Birthday', 'table_name': 'Patient'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1302,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CPK BETWEEN 30 AND 200 AND l.PT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation? -- External Knowledge: {'coagulation': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'phosphokinase': {'column_name': 'CPK', 'table_name': 'Laboratory'}, 'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, 'measure': {'column_name': 'PT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1302,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CPK BETWEEN 30 AND 200 AND l.PT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation? -- External Knowledge: {'coagulation': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'phosphokinase': {'column_name': 'CPK', 'table_name': 'Laboratory'}, 'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, 'measure': {'column_name': 'PT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1302,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id) FROM Patient p JOIN Laboratory l ON p.patient_id = l.patient_id WHERE l.CPK BETWEEN 30 AND 200 AND l.PT > 0",
    "prompt": "CREATE TABLE Patient ( ); CREATE TABLE Examination ( ); CREATE TABLE Laboratory ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation? -- External Knowledge: {'coagulation': {'column_name': 'PT', 'table_name': 'Laboratory'}, 'phosphokinase': {'column_name': 'CPK', 'table_name': 'Laboratory'}, 'creatinine': {'column_name': 'CRE', 'table_name': 'Laboratory'}, 'measure': {'column_name': 'PT', 'table_name': 'Laboratory'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1025,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "true_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2016' GROUP BY l.name ORDER BY total_goals DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the name of the league had the most goals in the 2016 season? -- External Knowledge: {'season': {'column_name': 'season', 'table_name': 'Match'}, 'league': {'column_name': 'name', 'table_name': 'League'}, 'goals': {'column_name': 'home_team_goal', 'table_name': 'Match'}, '2016': {'column_name': 'season', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1028,
    "db_id": "european_football_2",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "true_sql": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY teamInfo.team_long_name, matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
    "text_2_sql": "SELECT t.team_long_name, COUNT(*) as away_wins FROM Match m JOIN Team t ON m.away_team_api_id = t.team_api_id JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE c.name = 'Scotland' AND l.name = 'Premier League' AND m.season = '2010' AND m.away_team_goal > m.home_team_goal GROUP BY t.team_long_name ORDER BY away_wins DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In Scotland Premier League, which away team won the most during the 2010 season? -- External Knowledge: {'League': {'column_name': 'name', 'table_name': 'League'}, 'season': {'column_name': 'season', 'table_name': 'Match'}, 'Scotland': {'column_name': 'name', 'table_name': 'Country'}, 'Premier': {'column_name': 'name', 'table_name': 'League'}, 'away': {'column_name': 'away_team_api_id', 'table_name': 'Match'}, 'won': {'column_name': 'away_team_goal', 'table_name': 'Match'}, '2010': {'column_name': 'season', 'table_name': 'Match'}, 'team': {'column_name': 'team_long_name', 'table_name': 'Team'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1029,
    "db_id": "european_football_2",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "true_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC NULLS FIRST LIMIT 4",
    "text_2_sql": "SELECT DISTINCT ta.buildUpPlaySpeed FROM Team_Attributes ta ORDER BY ta.buildUpPlaySpeed DESC LIMIT 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed? -- External Knowledge: {'Speed': {'column_name': 'buildUpPlaySpeed', 'table_name': 'Team_Attributes'}, 'attacks': {'column_name': 'buildUpPlaySpeed', 'table_name': 'Team_Attributes'}, 'put': {'column_name': 'buildUpPlaySpeed', 'table_name': 'Team_Attributes'}, 'speed': {'column_name': 'buildUpPlaySpeed', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1030,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "true_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT l.name AS league_name, COUNT(*) AS draw_count FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2016' AND m.home_team_goal = m.away_team_goal GROUP BY l.name ORDER BY draw_count DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the name of the league had the most matches end as draw in the 2016 season? -- External Knowledge: {'draw': {'column_name': 'home_team_goal', 'table_name': 'Match'}, 'season': {'column_name': 'season', 'table_name': 'Match'}, 'league': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'match_api_id', 'table_name': 'Match'}, '2016': {'column_name': 'season', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "true_sql": "SELECT DISTINCT EXTRACT(YEAR FROM AGE(NOW(), t2.birthday::timestamp)) + (CASE WHEN EXTRACT(MONTH FROM AGE(NOW(), t2.birthday::timestamp)) > 0 OR EXTRACT(DAY FROM AGE(NOW(), t2.birthday::timestamp)) > 0 THEN 1 ELSE 0 END) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE EXTRACT(YEAR FROM t1.date::date) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
    "text_2_sql": "SELECT DISTINCT p.player_name, EXTRACT(YEAR FROM pa.date) - EXTRACT(YEAR FROM p.birthday) AS age FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.sprint_speed >= 97 AND pa.date BETWEEN '2013-01-01' AND '2015-12-31' ORDER BY age",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'sprint': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'speed': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'age': {'column_name': 'birthday', 'table_name': 'Player'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2013': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "true_sql": "SELECT DISTINCT EXTRACT(YEAR FROM AGE(NOW(), t2.birthday::timestamp)) + (CASE WHEN EXTRACT(MONTH FROM AGE(NOW(), t2.birthday::timestamp)) > 0 OR EXTRACT(DAY FROM AGE(NOW(), t2.birthday::timestamp)) > 0 THEN 1 ELSE 0 END) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE EXTRACT(YEAR FROM t1.date::date) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
    "text_2_sql": "SELECT DISTINCT p.player_name, EXTRACT(YEAR FROM pa.date) - EXTRACT(YEAR FROM p.birthday) AS age FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.sprint_speed >= 97 AND pa.date BETWEEN '2013-01-01' AND '2015-12-31' ORDER BY age",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'sprint': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'speed': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'age': {'column_name': 'birthday', 'table_name': 'Player'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2013': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "true_sql": "SELECT DISTINCT EXTRACT(YEAR FROM AGE(NOW(), t2.birthday::timestamp)) + (CASE WHEN EXTRACT(MONTH FROM AGE(NOW(), t2.birthday::timestamp)) > 0 OR EXTRACT(DAY FROM AGE(NOW(), t2.birthday::timestamp)) > 0 THEN 1 ELSE 0 END) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE EXTRACT(YEAR FROM t1.date::date) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
    "text_2_sql": "SELECT DISTINCT p.player_name, EXTRACT(YEAR FROM pa.date) - EXTRACT(YEAR FROM p.birthday) AS age FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.sprint_speed >= 97 AND pa.date BETWEEN '2013-01-01' AND '2015-12-31' ORDER BY age",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'sprint': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'speed': {'column_name': 'sprint_speed', 'table_name': 'Player_Attributes'}, 'age': {'column_name': 'birthday', 'table_name': 'Player'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2013': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1032,
    "db_id": "european_football_2",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "true_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery GROUP BY league_id ORDER BY MAX(cnt) DESC LIMIT 1) AS t1 ON t1.league_id = t2.id",
    "text_2_sql": "SELECT l.name AS league_name, COUNT(m.id) AS match_count FROM League l JOIN Match m ON l.id = m.league_id GROUP BY l.id, l.name ORDER BY match_count DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the name of the league with the highest matches of all time and how many matches were played in the said league. -- External Knowledge: {'league': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1035,
    "db_id": "european_football_2",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "true_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "text_2_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed. -- External Knowledge: {'team_fifa_api_id': {'column_name': 'team_fifa_api_id', 'table_name': 'Team_Attributes'}, 'speed': {'column_name': 'buildUpPlaySpeed', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1036,
    "db_id": "european_football_2",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "true_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.\"date\", 1, 4) = '2012' AND t3.buildUpPlayPassing > (SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / NULLIF(COUNT(t1.id), 0) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') = '2012')",
    "text_2_sql": "SELECT DISTINCT t.team_long_name FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE ta.date LIKE '2012%' AND ta.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE date LIKE '2012%' ) ORDER BY t.team_long_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the long name of teams with above-average build-up play passing in 2012. -- External Knowledge: {'2012': {'column_name': 'date', 'table_name': 'Team_Attributes'}, 'long': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'teams': {'column_name': 'team_api_id', 'table_name': 'Team'}, 'passing': {'column_name': 'buildUpPlayPassing', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN pa.preferred_foot = 'left' THEN 1 END) * 100.0) / COUNT(*), 2 ) AS percentage_left_footed FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE EXTRACT(YEAR FROM p.birthday) BETWEEN 1987 AND 1992",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992. -- External Knowledge: {'born': {'column_name': 'birthday', 'table_name': 'Player'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'foot': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN pa.preferred_foot = 'left' THEN 1 END)::FLOAT / COUNT(*)) * 100, 2 ) AS percentage_left_foot FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.birthday BETWEEN '1987-01-01' AND '1992-12-31'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992. -- External Knowledge: {'born': {'column_name': 'birthday', 'table_name': 'Player'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'foot': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN pa.preferred_foot = 'left' THEN 1 END) * 100.0) / COUNT(*), 2 ) AS percentage_left_foot FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE EXTRACT(YEAR FROM p.birthday) BETWEEN 1987 AND 1992",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992. -- External Knowledge: {'born': {'column_name': 'birthday', 'table_name': 'Player'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'foot': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "true_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / NULLIF(COUNT(t2.\"date\"), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "text_2_sql": "SELECT AVG(pa.long_shots) FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Ahmed Samir Farag'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find the average number of long-shot done by Ahmed Samir Farag. -- External Knowledge: {'Ahmed': {'column_name': 'player_name', 'table_name': 'Player'}, 'Samir': {'column_name': 'player_name', 'table_name': 'Player'}, 'Farag': {'column_name': 'player_name', 'table_name': 'Player'}, 'long-shot': {'column_name': 'long_shots', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "true_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / NULLIF(COUNT(t2.\"date\"), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "text_2_sql": "SELECT AVG(pa.long_shots) FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Ahmed Samir Farag'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find the average number of long-shot done by Ahmed Samir Farag. -- External Knowledge: {'Ahmed': {'column_name': 'player_name', 'table_name': 'Player'}, 'Samir': {'column_name': 'player_name', 'table_name': 'Player'}, 'Farag': {'column_name': 'player_name', 'table_name': 'Player'}, 'long-shot': {'column_name': 'long_shots', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "true_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / NULLIF(COUNT(t2.\"date\"), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "text_2_sql": "SELECT AVG(pa.long_shots) FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Ahmed Samir Farag'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find the average number of long-shot done by Ahmed Samir Farag. -- External Knowledge: {'Ahmed': {'column_name': 'player_name', 'table_name': 'Player'}, 'Samir': {'column_name': 'player_name', 'table_name': 'Player'}, 'Farag': {'column_name': 'player_name', 'table_name': 'Player'}, 'long-shot': {'column_name': 'long_shots', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / NULLIF(COUNT(t2.\"player_fifa_api_id\"), 0) DESC NULLS LAST LIMIT 10",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height > 180 GROUP BY p.player_id, p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'heights': {'column_name': 'height', 'table_name': 'Player'}, 'heading': {'column_name': 'heading_accuracy', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / NULLIF(COUNT(t2.\"player_fifa_api_id\"), 0) DESC NULLS LAST LIMIT 10",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height > 180 GROUP BY p.player_id, p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'heights': {'column_name': 'height', 'table_name': 'Player'}, 'heading': {'column_name': 'heading_accuracy', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / NULLIF(COUNT(t2.\"player_fifa_api_id\"), 0) DESC NULLS LAST LIMIT 10",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height > 180 GROUP BY p.player_id, p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'heights': {'column_name': 'height', 'table_name': 'Player'}, 'heading': {'column_name': 'heading_accuracy', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1042,
    "db_id": "european_football_2",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "true_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / NULLIF(COUNT(DISTINCT t2.id), 0)) - (CAST(SUM(t2.away_team_goal) AS REAL) / NULLIF(COUNT(DISTINCT t2.id), 0)) > 0",
    "text_2_sql": "SELECT l.name FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2009/2010' GROUP BY l.id, l.name HAVING AVG(m.home_team_goal) > AVG(m.away_team_goal)",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. -- External Knowledge: {'home': {'column_name': 'home_team_goal', 'table_name': 'Match'}, 'goals': {'column_name': 'home_team_goal', 'table_name': 'Match'}, 'team': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'away': {'column_name': 'away_team_goal', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1044,
    "db_id": "european_football_2",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "true_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "text_2_sql": "SELECT player_name FROM Player WHERE EXTRACT(YEAR FROM birthday) = 1970 AND EXTRACT(MONTH FROM birthday) = 10;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the football players with a birthyear of 1970 and a birthmonth of October. -- External Knowledge: {'birthyear': {'column_name': 'birthday', 'table_name': 'Player'}, 'birthmonth': {'column_name': 'birthday', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1044,
    "db_id": "european_football_2",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "true_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "text_2_sql": "SELECT player_name FROM Player WHERE EXTRACT(YEAR FROM birthday) = 1970 AND EXTRACT(MONTH FROM birthday) = 10;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the football players with a birthyear of 1970 and a birthmonth of October. -- External Knowledge: {'birthyear': {'column_name': 'birthday', 'table_name': 'Player'}, 'birthmonth': {'column_name': 'birthday', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1044,
    "db_id": "european_football_2",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "true_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "text_2_sql": "SELECT player_name FROM Player WHERE EXTRACT(YEAR FROM birthday) = 1970 AND EXTRACT(MONTH FROM birthday) = 10;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the football players with a birthyear of 1970 and a birthmonth of October. -- External Knowledge: {'birthyear': {'column_name': 'birthday', 'table_name': 'Player'}, 'birthmonth': {'column_name': 'birthday', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND TO_CHAR(CAST(t2.date AS TIMESTAMP), 'YYYY') = '2011'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND EXTRACT(YEAR FROM pa.date) = 2011 ORDER BY pa.date DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the overall rating of the football player Gabriel Tamas in year 2011? -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Gabriel': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2011': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'Tamas': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND TO_CHAR(CAST(t2.date AS TIMESTAMP), 'YYYY') = '2011'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND EXTRACT(YEAR FROM pa.date) = 2011 ORDER BY pa.date DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the overall rating of the football player Gabriel Tamas in year 2011? -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Gabriel': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2011': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'Tamas': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND TO_CHAR(CAST(t2.date AS TIMESTAMP), 'YYYY') = '2011'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND EXTRACT(YEAR FROM pa.date) = 2011 ORDER BY pa.date DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the overall rating of the football player Gabriel Tamas in year 2011? -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Gabriel': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2011': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'Tamas': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1057,
    "db_id": "european_football_2",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "true_sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "text_2_sql": "SELECT AVG(m.home_team_goal) AS avg_home_goals FROM Match m JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE m.season = '2010/2011' AND c.name = 'Poland'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average home team goal in the 2010/2011 season in the country of Poland. -- External Knowledge: {'season': {'column_name': 'season', 'table_name': 'Match'}, 'home': {'column_name': 'home_team_api_id', 'table_name': 'Match'}, 'goal': {'column_name': 'home_team_goal', 'table_name': 'Match'}, 'country': {'column_name': 'name', 'table_name': 'Country'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "true_sql": "SELECT A FROM (SELECT AVG(finishing) AS result, 'Max' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM Player) UNION SELECT AVG(finishing) AS result, 'Min' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MIN(height) FROM Player)) AS subquery ORDER BY result DESC LIMIT 1",
    "text_2_sql": "SELECT CASE WHEN p_tall.avg_finishing > p_short.avg_finishing THEN 'Tallest Player' ELSE 'Shortest Player' END AS player_type, GREATEST(p_tall.avg_finishing, p_short.avg_finishing) AS highest_avg_finishing FROM (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_id WHERE p.height = (SELECT MAX(height) FROM Player)) p_tall, (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_id WHERE p.height = (SELECT MIN(height) FROM Player)) p_short",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who has the highest average finishing rate between the highest and shortest football player? -- External Knowledge: {'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'highest': {'column_name': 'height', 'table_name': 'Player'}, 'shortest': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "true_sql": "SELECT A FROM (SELECT AVG(finishing) AS result, 'Max' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM Player) UNION SELECT AVG(finishing) AS result, 'Min' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MIN(height) FROM Player)) AS subquery ORDER BY result DESC LIMIT 1",
    "text_2_sql": "SELECT CASE WHEN p_tall.avg_finishing > p_short.avg_finishing THEN 'Tallest Player' ELSE 'Shortest Player' END AS player_type, GREATEST(p_tall.avg_finishing, p_short.avg_finishing) AS highest_avg_finishing FROM (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height = (SELECT MAX(height) FROM Player)) p_tall, (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height = (SELECT MIN(height) FROM Player)) p_short",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who has the highest average finishing rate between the highest and shortest football player? -- External Knowledge: {'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'highest': {'column_name': 'height', 'table_name': 'Player'}, 'shortest': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "true_sql": "SELECT A FROM (SELECT AVG(finishing) AS result, 'Max' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM Player) UNION SELECT AVG(finishing) AS result, 'Min' AS A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MIN(height) FROM Player)) AS subquery ORDER BY result DESC LIMIT 1",
    "text_2_sql": "SELECT CASE WHEN p_tall.avg_finishing > p_short.avg_finishing THEN 'Tallest Player' ELSE 'Shortest Player' END AS player_type, GREATEST(p_tall.avg_finishing, p_short.avg_finishing) AS highest_avg_finishing FROM (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height = (SELECT MAX(height) FROM Player)) p_tall, (SELECT AVG(pa.finishing) AS avg_finishing FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.height = (SELECT MIN(height) FROM Player)) p_short",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who has the highest average finishing rate between the highest and shortest football player? -- External Knowledge: {'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'highest': {'column_name': 'height', 'table_name': 'Player'}, 'shortest': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') >= '2010' AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') <= '2015'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) FROM Player_Attributes pa JOIN Player p ON pa.player_id = p.player_id WHERE p.height > 170 AND pa.date BETWEEN '2010-01-01' AND '2015-12-31'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From 2010 to 2015, what was the average overall rating of players who are higher than 170? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2010': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, '170': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') >= '2010' AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') <= '2015'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) as average_rating FROM Player_Attributes pa JOIN Player p ON pa.player_id = p.player_id WHERE p.height > 170 AND pa.date BETWEEN '2010-01-01' AND '2015-12-31'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From 2010 to 2015, what was the average overall rating of players who are higher than 170? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2010': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, '170': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') >= '2010' AND TO_CHAR(CAST(t2.\"date\" AS TIMESTAMP), 'YYYY') <= '2015'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) FROM Player_Attributes pa JOIN Player p ON pa.player_id = p.player_id WHERE p.height > 170 AND pa.date BETWEEN '2010-01-01' AND '2015-12-31'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From 2010 to 2015, what was the average overall rating of players who are higher than 170? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2015': {'column_name': 'date', 'table_name': 'Player_Attributes'}, '2010': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, '170': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END), 0) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control END) - AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control END) AS ball_control_difference FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye ? -- External Knowledge: {'Diallo': {'column_name': 'player_name', 'table_name': 'Player'}, 'Aaron': {'column_name': 'player_name', 'table_name': 'Player'}, 'control': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}, 'Abdou': {'column_name': 'player_name', 'table_name': 'Player'}, 'Appindangoye': {'column_name': 'player_name', 'table_name': 'Player'}, 'ball': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END), 0) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control END) - AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control END) AS ball_control_difference FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye ? -- External Knowledge: {'Diallo': {'column_name': 'player_name', 'table_name': 'Player'}, 'Aaron': {'column_name': 'player_name', 'table_name': 'Player'}, 'control': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}, 'Abdou': {'column_name': 'player_name', 'table_name': 'Player'}, 'Appindangoye': {'column_name': 'player_name', 'table_name': 'Player'}, 'ball': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END), 0) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / NULLIF(COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control END) - AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control END) AS ball_control_difference FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye ? -- External Knowledge: {'Diallo': {'column_name': 'player_name', 'table_name': 'Player'}, 'Aaron': {'column_name': 'player_name', 'table_name': 'Player'}, 'control': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}, 'Abdou': {'column_name': 'player_name', 'table_name': 'Player'}, 'Appindangoye': {'column_name': 'player_name', 'table_name': 'Player'}, 'ball': {'column_name': 'ball_control', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1078,
    "db_id": "european_football_2",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "true_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT CASE WHEN p1.birthday < p2.birthday THEN p1.player_name ELSE p2.player_name END AS older_player FROM Player p1 CROSS JOIN Player p2 WHERE p1.player_name = 'Aaron Lennon' AND p2.player_name = 'Abdelaziz Barrada'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which player is older, Aaron Lennon or Abdelaziz Barrada? -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'Aaron Lennon': {'column_name': 'player_name', 'table_name': 'Player'}, 'Abdelaziz Barrada': {'column_name': 'player_name', 'table_name': 'Player'}, 'older': {'column_name': 'birthday', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1079,
    "db_id": "european_football_2",
    "question": "Which player is the tallest?",
    "true_sql": "SELECT player_name FROM Player ORDER BY height DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which player is the tallest? -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'tallest': {'column_name': 'height', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1080,
    "db_id": "european_football_2",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "true_sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "text_2_sql": "SELECT COUNT(*) AS left_foot_stay_in_position FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked? -- External Knowledge: {'foot': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'when': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1084,
    "db_id": "european_football_2",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "true_sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE TO_CHAR(CAST(t1.birthday AS TIMESTAMP), 'YYYY') < '1986' AND t2.defensive_work_rate = 'high'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.player_api_id) AS player_count FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.birthday < '1986-01-01' AND pa.attacking_work_rate = 'low' AND pa.defensive_work_rate = 'medium'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked? -- External Knowledge: {'born': {'column_name': 'birthday', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, '1986': {'column_name': 'birthday', 'table_name': 'Player'}, 'team': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'year': {'column_name': 'birthday', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.volleys > 70 AND pa.dribbling > 70",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the names of the players whose volley score and dribbling score are over 70. -- External Knowledge: {'dribbling': {'column_name': 'dribbling', 'table_name': 'Player_Attributes'}, 'volley': {'column_name': 'volleys', 'table_name': 'Player_Attributes'}, 'over': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'score': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.volleys > 70 AND pa.dribbling > 70",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the names of the players whose volley score and dribbling score are over 70. -- External Knowledge: {'dribbling': {'column_name': 'dribbling', 'table_name': 'Player_Attributes'}, 'volley': {'column_name': 'volleys', 'table_name': 'Player_Attributes'}, 'over': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'score': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.volleys > 70 AND pa.dribbling > 70",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the names of the players whose volley score and dribbling score are over 70. -- External Knowledge: {'dribbling': {'column_name': 'dribbling', 'table_name': 'Player_Attributes'}, 'volley': {'column_name': 'volleys', 'table_name': 'Player_Attributes'}, 'over': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'score': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "true_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.\"date\", 1, 7) = '2009-04'",
    "text_2_sql": "SELECT COUNT(m.id) AS match_count FROM Match m JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE c.name = 'Belgium' AND l.name LIKE '%Jupiler%' AND m.season = '2009' AND EXTRACT(MONTH FROM m.date) = 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many matches were held in the Belgium Jupiler League in April, 2009? -- External Knowledge: {'League': {'column_name': 'name', 'table_name': 'League'}, '2009': {'column_name': 'season', 'table_name': 'Match'}, 'April': {'column_name': 'date', 'table_name': 'Match'}, 'Belgium': {'column_name': 'name', 'table_name': 'Country'}, 'Jupiler': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "true_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.\"date\", 1, 7) = '2009-04'",
    "text_2_sql": "SELECT COUNT(m.id) AS match_count FROM Match m JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE l.name = 'Jupiler League' AND c.name = 'Belgium' AND m.season = '2009' AND EXTRACT(MONTH FROM m.date) = 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many matches were held in the Belgium Jupiler League in April, 2009? -- External Knowledge: {'League': {'column_name': 'name', 'table_name': 'League'}, '2009': {'column_name': 'season', 'table_name': 'Match'}, 'April': {'column_name': 'date', 'table_name': 'Match'}, 'Belgium': {'column_name': 'name', 'table_name': 'Country'}, 'Jupiler': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "true_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.\"date\", 1, 7) = '2009-04'",
    "text_2_sql": "SELECT COUNT(m.id) AS match_count FROM Match m JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE l.name = 'Jupiler League' AND c.name = 'Belgium' AND m.season = '2009' AND EXTRACT(MONTH FROM m.date) = 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many matches were held in the Belgium Jupiler League in April, 2009? -- External Knowledge: {'League': {'column_name': 'name', 'table_name': 'League'}, '2009': {'column_name': 'season', 'table_name': 'Match'}, 'April': {'column_name': 'date', 'table_name': 'Match'}, 'Belgium': {'column_name': 'name', 'table_name': 'Country'}, 'Jupiler': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1092,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "true_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id) AS subquery)",
    "text_2_sql": "SELECT l.name AS league_name, COUNT(m.id) AS match_count FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2008/2009' GROUP BY l.name ORDER BY match_count DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the name of the league had the most matches in the 2008/2009 season? -- External Knowledge: {'season': {'column_name': 'season', 'table_name': 'Match'}, 'league': {'column_name': 'name', 'table_name': 'League'}, 'matches': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT (MAX(CASE WHEN player_name = 'Ariel Borysiuk' THEN overall_rating END) - MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END)) * 100.0 / MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END) AS percentage_difference FROM Player_Attributes JOIN Player ON Player_Attributes.player_id = Player.player_id WHERE player_name IN ('Ariel Borysiuk', 'Paulin Puel')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT (MAX(CASE WHEN player_name = 'Ariel Borysiuk' THEN overall_rating END) - MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END)) * 100.0 / MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END) AS percentage_difference FROM Player_Attributes JOIN Player ON Player_Attributes.player_id = Player.player_id WHERE player_name IN ('Ariel Borysiuk', 'Paulin Puel')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT (MAX(CASE WHEN player_name = 'Ariel Borysiuk' THEN overall_rating END) - MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END)) * 100.0 / MAX(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating END) AS percentage_difference FROM Player_Attributes JOIN Player ON Player.player_api_id = Player_Attributes.player_api_id WHERE player_name IN ('Ariel Borysiuk', 'Paulin Puel')",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Pietro Marino'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average overall rating of Pietro Marino. -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Pietro': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marino': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Pietro Marino'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average overall rating of Pietro Marino. -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Pietro': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marino': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) FROM Player_Attributes pa JOIN Player p ON pa.player_id = p.player_id WHERE p.player_name = 'Pietro Marino'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average overall rating of Pietro Marino. -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'Pietro': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marino': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1098,
    "db_id": "european_football_2",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "true_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(ta.chanceCreationPassing) AS highest_chance_creation_passing, ta.chanceCreationPassingClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Ajax' GROUP BY ta.chanceCreationPassingClass ORDER BY highest_chance_creation_passing DESC LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is Ajax's highest chance creation passing score and what is it classified as? -- External Knowledge: {'Ajax': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'chance': {'column_name': 'chanceCreationPassing', 'table_name': 'Team_Attributes'}, 'creation': {'column_name': 'chanceCreationPassing', 'table_name': 'Team_Attributes'}, 'passing': {'column_name': 'chanceCreationPassing', 'table_name': 'Team_Attributes'}, 'classified': {'column_name': 'chanceCreationPassingClass', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '77': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'oldest': {'column_name': 'birthday', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '77': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'oldest': {'column_name': 'birthday', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "true_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday ASC LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '77': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'oldest': {'column_name': 'birthday', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04';",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the overall rating for Aaron Mooy on 2016/2/4? -- External Knowledge: {'Aaron Mooy': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04';",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the overall rating for Aaron Mooy on 2016/2/4? -- External Knowledge: {'Aaron Mooy': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "true_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "text_2_sql": "SELECT pa.overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04';",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the overall rating for Aaron Mooy on 2016/2/4? -- External Knowledge: {'Aaron Mooy': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "true_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.\"date\" LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "text_2_sql": "SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_id WHERE p.player_name = 'Francesco Migliore' AND pa.date = '2015-05-01'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How was Francesco Migliore's attacking work rate on 2015/5/1? -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'work': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'rate': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'Francesco Migliore': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "true_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.\"date\" LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "text_2_sql": "SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_id WHERE p.player_name = 'Francesco Migliore' AND pa.date = '2015-05-01'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How was Francesco Migliore's attacking work rate on 2015/5/1? -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'work': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'rate': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'Francesco Migliore': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "true_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.\"date\" LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "text_2_sql": "SELECT pa.attacking_work_rate FROM Player p JOIN Player_Attributes pa ON p.id = pa.player_id WHERE p.player_name = 'Francesco Migliore' AND pa.date = '2015-05-01'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How was Francesco Migliore's attacking work rate on 2015/5/1? -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'work': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'rate': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'Francesco Migliore': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "true_sql": "SELECT \"date\" FROM (SELECT t2.crossing, t2.\"date\" FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) AS subquery ORDER BY \"date\" DESC LIMIT 1",
    "text_2_sql": "SELECT pa.date FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Kevin Constant' AND pa.crossing = ( SELECT MAX(crossing) FROM Player_Attributes pa2 JOIN Player p2 ON p2.player_id = pa2.player_id WHERE p2.player_name = 'Kevin Constant' ) ORDER BY pa.date ASC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- When was the first time did Kevin Constant have his highest crossing score? Give the date. -- External Knowledge: {'Kevin': {'column_name': 'player_name', 'table_name': 'Player'}, 'Constant': {'column_name': 'player_name', 'table_name': 'Player'}, 'date': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "true_sql": "SELECT \"date\" FROM (SELECT t2.crossing, t2.\"date\" FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) AS subquery ORDER BY \"date\" DESC LIMIT 1",
    "text_2_sql": "SELECT pa.date FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Kevin Constant' AND pa.crossing = ( SELECT MAX(crossing) FROM Player_Attributes pa2 JOIN Player p2 ON p2.player_id = pa2.player_id WHERE p2.player_name = 'Kevin Constant' ) ORDER BY pa.date ASC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- When was the first time did Kevin Constant have his highest crossing score? Give the date. -- External Knowledge: {'Kevin': {'column_name': 'player_name', 'table_name': 'Player'}, 'Constant': {'column_name': 'player_name', 'table_name': 'Player'}, 'date': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "true_sql": "SELECT \"date\" FROM (SELECT t2.crossing, t2.\"date\" FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) AS subquery ORDER BY \"date\" DESC LIMIT 1",
    "text_2_sql": "SELECT pa.date FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Kevin Constant' AND pa.crossing = ( SELECT MAX(crossing) FROM Player_Attributes pa2 JOIN Player p2 ON p2.player_id = pa2.player_id WHERE p2.player_name = 'Kevin Constant' ) ORDER BY pa.date ASC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- When was the first time did Kevin Constant have his highest crossing score? Give the date. -- External Knowledge: {'Kevin': {'column_name': 'player_name', 'table_name': 'Player'}, 'Constant': {'column_name': 'player_name', 'table_name': 'Player'}, 'date': {'column_name': 'date', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1110,
    "db_id": "european_football_2",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "true_sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.\"date\" LIKE '2010-02-22%'",
    "text_2_sql": "SELECT ta.buildUpPlayPassingClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010-02-22'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22. -- External Knowledge: {'Lorient': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'build': {'column_name': 'buildUpPlayPassingClass', 'table_name': 'Team_Attributes'}, 'passing': {'column_name': 'buildUpPlayPassingClass', 'table_name': 'Team_Attributes'}, 'FC': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'Up': {'column_name': 'buildUpPlayPassingClass', 'table_name': 'Team_Attributes'}, 'play': {'column_name': 'buildUpPlayPassingClass', 'table_name': 'Team_Attributes'}, 'class': {'column_name': 'buildUpPlayPassingClass', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1113,
    "db_id": "european_football_2",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "true_sql": "SELECT t2.defenceAggressionClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.\"date\" LIKE '2015-09-10%'",
    "text_2_sql": "SELECT ta.defenceAggressionClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? -- External Knowledge: {'Hannover 96': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'defence': {'column_name': 'defenceAggressionClass', 'table_name': 'Team_Attributes'}, 'aggression': {'column_name': 'defenceAggressionClass', 'table_name': 'Team_Attributes'}, 'class': {'column_name': 'defenceAggressionClass', 'table_name': 'Team_Attributes'}, '2015/9/10': {'column_name': 'date', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.\"date\", 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22' AND '2016-04-21'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? -- External Knowledge: {'Arnautovic': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marko': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.\"date\", 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22' AND '2016-04-21'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? -- External Knowledge: {'Arnautovic': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marko': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "true_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / NULLIF(COUNT(t2.id), 0) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.\"date\", 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "text_2_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22' AND '2016-04-21';",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? -- External Knowledge: {'Arnautovic': {'column_name': 'player_name', 'table_name': 'Player'}, 'Marko': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END), 0) AS LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2013-07-12'",
    "text_2_sql": "SELECT ROUND( (donovan.overall_rating - bowery.overall_rating) / bowery.overall_rating * 100, 2 ) AS percentage_difference FROM Player p1 JOIN Player_Attributes donovan ON p1.player_id = donovan.player_id JOIN Player p2 ON p2.player_name = 'Jordan Bowery' JOIN Player_Attributes bowery ON p2.player_id = bowery.player_id WHERE p1.player_name = 'Landon Donovan' AND donovan.date = '2013-07-12' AND bowery.date = '2013-07-12'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? -- External Knowledge: {'Landon Donovan': {'column_name': 'player_name', 'table_name': 'Player'}, 'Jordan Bowery': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2013/7/12': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END), 0) AS LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2013-07-12'",
    "text_2_sql": "SELECT ROUND( (donovan.overall_rating - bowery.overall_rating) / bowery.overall_rating * 100, 2 ) AS percentage_difference FROM Player p1 JOIN Player_Attributes donovan ON p1.player_id = donovan.player_id JOIN Player p2 ON p2.player_name = 'Jordan Bowery' JOIN Player_Attributes bowery ON p2.player_id = bowery.player_id WHERE p1.player_name = 'Landon Donovan' AND donovan.date = '2013-07-12' AND bowery.date = '2013-07-12'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? -- External Knowledge: {'Landon Donovan': {'column_name': 'player_name', 'table_name': 'Player'}, 'Jordan Bowery': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2013/7/12': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "true_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END), 0) AS LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2013-07-12'",
    "text_2_sql": "SELECT ROUND( (donovan.overall_rating - bowery.overall_rating) / bowery.overall_rating * 100, 2 ) AS percentage_difference FROM Player p1 JOIN Player_Attributes donovan ON p1.player_id = donovan.player_id JOIN Player p2 ON p2.player_name = 'Jordan Bowery' JOIN Player_Attributes bowery ON p2.player_id = bowery.player_id WHERE p1.player_name = 'Landon Donovan' AND donovan.date = '2013-07-12' AND bowery.date = '2013-07-12'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? -- External Knowledge: {'Landon Donovan': {'column_name': 'player_name', 'table_name': 'Player'}, 'Jordan Bowery': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall rating': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, '2013/7/12': {'column_name': 'date', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1116,
    "db_id": "european_football_2",
    "question": "List down most tallest players' name.",
    "true_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) AS rank FROM Player) AS subquery WHERE rank = 1",
    "text_2_sql": "SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) ORDER BY player_name;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List down most tallest players' name. -- External Knowledge: {'tallest': {'column_name': 'height', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.strength DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the name of the most strongest player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'strongest': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.strength DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the name of the most strongest player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'strongest': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.strength DESC LIMIT 1;",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the name of the most strongest player. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'strongest': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.attacking_work_rate = 'High' ORDER BY p.player_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'name': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.attacking_work_rate = 'High' ORDER BY p.player_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'name': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "text_2_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.attacking_work_rate = 'High' ORDER BY p.player_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. -- External Knowledge: {'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}, 'name': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1130,
    "db_id": "european_football_2",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "true_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "text_2_sql": "SELECT DISTINCT t.team_short_name FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE ta.chanceCreationPassingClass = 'Safe' ORDER BY t.team_short_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the short name of team who played safe while creating chance of passing? -- External Knowledge: {'short': {'column_name': 'team_short_name', 'table_name': 'Team'}, 'team': {'column_name': 'team_short_name', 'table_name': 'Team'}, 'passing': {'column_name': 'chanceCreationPassing', 'table_name': 'Team_Attributes'}, 'creating': {'column_name': 'chanceCreationPassingClass', 'table_name': 'Team_Attributes'}, 'chance': {'column_name': 'chanceCreationPassingClass', 'table_name': 'Team_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1133,
    "db_id": "european_football_2",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "true_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "text_2_sql": "SELECT COUNT(*) FROM Player WHERE birthday >= '1990-01-01' AND player_name LIKE 'Aaron %'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many football players born after the 1990s have the first name \"Aaron\"? -- External Knowledge: {'born': {'column_name': 'birthday', 'table_name': 'Player'}, 'football': {'column_name': 'player_name', 'table_name': 'Player'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'Aaron': {'column_name': 'player_name', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1134,
    "db_id": "european_football_2",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "true_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "text_2_sql": "SELECT MAX(CASE WHEN player_api_id = 6 THEN jumping END) - MAX(CASE WHEN player_api_id = 23 THEN jumping END) AS jumping_difference FROM Player_Attributes WHERE player_api_id IN (6, 23)",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the difference between players 6 and 23's jumping scores? -- External Knowledge: {'jumping': {'column_name': 'jumping', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_api_id', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1135,
    "db_id": "european_football_2",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "true_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC NULLS LAST LIMIT 4",
    "text_2_sql": "SELECT pa.player_api_id FROM Player_Attributes pa WHERE pa.preferred_foot = 'right' AND pa.attacking_work_rate = 'high' ORDER BY pa.potential ASC LIMIT 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking. -- External Knowledge: {'potential': {'column_name': 'potential', 'table_name': 'Player_Attributes'}, 'foot': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "db_id": "european_football_2",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "true_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = (SELECT MAX(crossing) FROM Player_Attributes)",
    "text_2_sql": "SELECT COUNT(DISTINCT p.player_name) AS player_count FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'high'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many players had the highest potential score for crossing that preferred to use their left foots while attacking? -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'potential': {'column_name': 'potential', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}, 'preferred': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "db_id": "european_football_2",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "true_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = (SELECT MAX(crossing) FROM Player_Attributes)",
    "text_2_sql": "SELECT COUNT(DISTINCT p.player_name) AS player_count FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'high'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many players had the highest potential score for crossing that preferred to use their left foots while attacking? -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'potential': {'column_name': 'potential', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}, 'preferred': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "db_id": "european_football_2",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "true_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = (SELECT MAX(crossing) FROM Player_Attributes)",
    "text_2_sql": "SELECT COUNT(DISTINCT p.player_name) AS player_count FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE pa.crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'high'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many players had the highest potential score for crossing that preferred to use their left foots while attacking? -- External Knowledge: {'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'potential': {'column_name': 'potential', 'table_name': 'Player_Attributes'}, 'crossing': {'column_name': 'crossing', 'table_name': 'Player_Attributes'}, 'preferred': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'left': {'column_name': 'preferred_foot', 'table_name': 'Player_Attributes'}, 'attacking': {'column_name': 'attacking_work_rate', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1139,
    "db_id": "european_football_2",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "true_sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.\"date\" LIKE '2008-09-24%'",
    "text_2_sql": "SELECT m.home_team_goal, m.away_team_goal FROM Match m JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE c.name = 'Belgian' AND l.name = 'Jupiler League' AND m.date = '2008-09-24'",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? -- External Knowledge: {'Belgian': {'column_name': 'name', 'table_name': 'Country'}, 'Jupiler': {'column_name': 'name', 'table_name': 'League'}, 'home': {'column_name': 'home_team_goal', 'table_name': 'Match'}, 'away': {'column_name': 'away_team_goal', 'table_name': 'Match'}, 'match': {'column_name': 'date', 'table_name': 'Match'}, '24': {'column_name': 'date', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1141,
    "db_id": "european_football_2",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "true_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "text_2_sql": "SELECT ta.buildUpPlaySpeedClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'KSV Cercle Brugge' LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Does the KSV Cercle Brugge team have a slow, balanced or fast speed class? -- External Knowledge: {'Cercle': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'Brugge': {'column_name': 'team_long_name', 'table_name': 'Team'}, 'speed': {'column_name': 'buildUpPlaySpeedClass', 'table_name': 'Team_Attributes'}, 'class': {'column_name': 'buildUpPlaySpeedClass', 'table_name': 'Team_Attributes'}, 'team': {'column_name': 'team_api_id', 'table_name': 'Team'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "true_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY weight DESC NULLS LAST LIMIT 1) LIMIT 1",
    "text_2_sql": "SELECT pa.finishing, pa.curve FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id WHERE p.weight = (SELECT MAX(weight) FROM Player) LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please state the finishing rate and curve score of the player who has the heaviest weight. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'heaviest': {'column_name': 'weight', 'table_name': 'Player'}, 'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'curve': {'column_name': 'curve', 'table_name': 'Player_Attributes'}, 'weight': {'column_name': 'weight', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "true_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY weight DESC NULLS LAST LIMIT 1) LIMIT 1",
    "text_2_sql": "SELECT pa.finishing, pa.curve FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY p.weight DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please state the finishing rate and curve score of the player who has the heaviest weight. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'heaviest': {'column_name': 'weight', 'table_name': 'Player'}, 'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'curve': {'column_name': 'curve', 'table_name': 'Player_Attributes'}, 'weight': {'column_name': 'weight', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "true_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY weight DESC NULLS LAST LIMIT 1) LIMIT 1",
    "text_2_sql": "SELECT pa.finishing, pa.curve FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY p.weight DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please state the finishing rate and curve score of the player who has the heaviest weight. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'heaviest': {'column_name': 'weight', 'table_name': 'Player'}, 'finishing': {'column_name': 'finishing', 'table_name': 'Player_Attributes'}, 'curve': {'column_name': 'curve', 'table_name': 'Player_Attributes'}, 'weight': {'column_name': 'weight', 'table_name': 'Player'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1145,
    "db_id": "european_football_2",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "true_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC NULLS LAST LIMIT 4",
    "text_2_sql": "SELECT l.name AS league_name, COUNT(m.id) AS game_count FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2015/2016' GROUP BY l.name ORDER BY game_count DESC LIMIT 4",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which top 4 leagues had the most games in the 2015-2016 season? -- External Knowledge: {'season': {'column_name': 'season', 'table_name': 'Match'}, 'leagues': {'column_name': 'name', 'table_name': 'League'}, 'games': {'column_name': 'id', 'table_name': 'Match'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 1146,
    "db_id": "european_football_2",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "true_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT t.team_long_name FROM Match m JOIN Team t ON m.away_team_api_id = t.team_api_id GROUP BY t.team_long_name ORDER BY SUM(m.away_team_goal) DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please provide the full name of the away team that scored the most goals. -- External Knowledge: {'scored': {'column_name': 'away_team_goal', 'table_name': 'Match'}, 'away': {'column_name': 'away_team_api_id', 'table_name': 'Match'}, 'goals': {'column_name': 'away_team_goal', 'table_name': 'Match'}, 'team': {'column_name': 'team_long_name', 'table_name': 'Team'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.overall_rating DESC, pa.strength DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please name one player whose overall strength is the greatest. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.overall_rating DESC, pa.strength DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please name one player whose overall strength is the greatest. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "true_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "text_2_sql": "SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id ORDER BY pa.overall_rating DESC, pa.strength DESC LIMIT 1",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please name one player whose overall strength is the greatest. -- External Knowledge: {'player': {'column_name': 'player_name', 'table_name': 'Player'}, 'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "simple"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN p.height < 180 AND pa.strength > 70 THEN 1 END)::FLOAT / COUNT(DISTINCT p.player_id)) * 100, 2) AS percentage FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of players that are under 180 cm who have an overall strength of more than 70? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'under': {'column_name': 'height', 'table_name': 'Player'}, '180': {'column_name': 'height', 'table_name': 'Player'}, 'more': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, '70': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'cm': {'column_name': 'height', 'table_name': 'Player'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN p.height < 180 AND pa.strength > 70 THEN 1 END)::FLOAT / COUNT(DISTINCT p.player_id)::FLOAT) * 100, 2) AS percentage FROM Player p JOIN Player_Attributes pa ON p.player_id = pa.player_id",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of players that are under 180 cm who have an overall strength of more than 70? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'under': {'column_name': 'height', 'table_name': 'Player'}, '180': {'column_name': 'height', 'table_name': 'Player'}, 'more': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, '70': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'cm': {'column_name': 'height', 'table_name': 'Player'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(t1.id), 0) AS percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN p.height < 180 AND pa.strength > 70 THEN 1 END)::FLOAT / COUNT(DISTINCT p.player_name)) * 100, 2) AS percentage FROM Player p JOIN Player_Attributes pa ON p.player_name = pa.player_name",
    "prompt": "CREATE TABLE League ( ); CREATE TABLE Match ( ); CREATE TABLE Player ( ); CREATE TABLE Player_Attributes ( ); CREATE TABLE Team ( ); CREATE TABLE Team_Attributes ( ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of players that are under 180 cm who have an overall strength of more than 70? -- External Knowledge: {'overall': {'column_name': 'overall_rating', 'table_name': 'Player_Attributes'}, 'under': {'column_name': 'height', 'table_name': 'Player'}, '180': {'column_name': 'height', 'table_name': 'Player'}, 'more': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, '70': {'column_name': 'strength', 'table_name': 'Player_Attributes'}, 'players': {'column_name': 'player_name', 'table_name': 'Player'}, 'cm': {'column_name': 'height', 'table_name': 'Player'}, 'strength': {'column_name': 'strength', 'table_name': 'Player_Attributes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 846,
    "db_id": "formula_1",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "true_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC NULLS LAST LIMIT 5",
    "text_2_sql": "SELECT DISTINCT d.driverref FROM qualifying q JOIN races r ON q.raceid = r.raceid JOIN drivers d ON q.driverid = d.driverid WHERE r.round = 20 AND q.q1 IS NOT NULL AND q.q2 IS NULL ORDER BY d.driverref",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the reference names of the drivers who are eliminated in the first period in race number 20. -- External Knowledge: {'first': {'column_name': 'q1', 'table_name': 'qualifying'}, 'eliminated': {'column_name': 'position', 'table_name': 'qualifying'}, '20': {'column_name': 'round', 'table_name': 'races'}, 'reference': {'column_name': 'driverRef', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 847,
    "db_id": "formula_1",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "true_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT d.surname FROM drivers d JOIN qualifying q ON d.driverid = q.driverid JOIN races r ON q.raceid = r.raceid WHERE r.round = 19 AND q.q2 IS NOT NULL ORDER BY q.q2 ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the surname of the driver with the best lap time in race number 19 in the second qualifying period? -- External Knowledge: {'surname': {'column_name': 'surname', 'table_name': 'drivers'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}, 'time': {'column_name': 'time', 'table_name': 'lapTimes'}, 'qualifying': {'column_name': 'q2', 'table_name': 'qualifying'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 850,
    "db_id": "formula_1",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "true_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "text_2_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please give the name of the race held on the circuits in Germany. -- External Knowledge: {'circuits': {'column_name': 'circuitId', 'table_name': 'circuits'}, 'Germany': {'column_name': 'country', 'table_name': 'circuits'}, 'name': {'column_name': 'name', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 854,
    "db_id": "formula_1",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "true_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "text_2_sql": "SELECT c.lat, c.lng FROM circuits c WHERE c.country = 'Australia' AND c.circuitid IN ( SELECT r.circuitid FROM races r WHERE r.name LIKE '%Grand Prix%' )",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the coordinates location of the circuits for Australian grand prix? -- External Knowledge: {'location': {'column_name': 'location', 'table_name': 'circuits'}, 'Australian': {'column_name': 'country', 'table_name': 'circuits'}, 'grand prix': {'column_name': 'name', 'table_name': 'races'}, 'circuits': {'column_name': 'circuitId', 'table_name': 'circuits'}, 'coordinates': {'column_name': 'lat', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 857,
    "db_id": "formula_1",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "true_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "text_2_sql": "SELECT lat, lng FROM circuits WHERE name LIKE '%Abu Dhabi%'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the coordinate position for Abu Dhabi Grand Prix. -- External Knowledge: {'coordinate': {'column_name': 'lat', 'table_name': 'circuits'}, 'position': {'column_name': 'lat', 'table_name': 'circuits'}, 'Abu': {'column_name': 'name', 'table_name': 'circuits'}, 'Dhabi': {'column_name': 'name', 'table_name': 'circuits'}, 'Grand': {'column_name': 'name', 'table_name': 'races'}, 'Prix': {'column_name': 'name', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 859,
    "db_id": "formula_1",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "true_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "text_2_sql": "SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverid = d.driverid WHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceid = 354",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's Bruno Senna's Q1 result in the qualifying race No. 354? -- External Knowledge: {'Bruno': {'column_name': 'forename', 'table_name': 'drivers'}, 'Senna': {'column_name': 'surname', 'table_name': 'drivers'}, 'Q1': {'column_name': 'q1', 'table_name': 'qualifying'}, '354': {'column_name': 'raceId', 'table_name': 'qualifying'}, 'qualifying': {'column_name': 'qualifyId', 'table_name': 'qualifying'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 861,
    "db_id": "formula_1",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "true_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "text_2_sql": "SELECT d.number FROM qualifying q JOIN drivers d ON q.driverid = d.driverid WHERE q.raceid = 903 AND q.q3 = '0:01:54'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903? -- External Knowledge: {'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'Q3': {'column_name': 'q3', 'table_name': 'qualifying'}, 'qualifying': {'column_name': 'raceId', 'table_name': 'qualifying'}, 'finished': {'column_name': 'q3', 'table_name': 'qualifying'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 862,
    "db_id": "formula_1",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "true_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT r.driverid) AS drivers_not_finished FROM races ra JOIN results r ON ra.raceid = r.raceid JOIN status s ON r.statusid = s.statusid WHERE ra.name LIKE '%Bahrain%Grand Prix%' AND ra.year = 2007 AND s.status != 'Finished'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the Bahrain Grand Prix in 2007, how many drivers not finished the game? -- External Knowledge: {'Prix': {'column_name': 'name', 'table_name': 'races'}, 'Grand': {'column_name': 'name', 'table_name': 'races'}, '2007': {'column_name': 'year', 'table_name': 'races'}, 'finished': {'column_name': 'status', 'table_name': 'status'}, 'Bahrain': {'column_name': 'name', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 865,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "true_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND NOT T2.time IS NULL AND NOT T1.dob IS NULL ORDER BY T1.dob ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverid = d.driverid JOIN status s ON r.statusid = s.statusid WHERE r.raceid = 592 AND s.status = 'Finished' ORDER BY d.dob ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the drivers who finished the game in race No. 592, who is the oldest? -- External Knowledge: {'finished': {'column_name': 'status', 'table_name': 'status'}, '592': {'column_name': 'raceId', 'table_name': 'races'}, 'oldest': {'column_name': 'dob', 'table_name': 'drivers'}, 'who': {'column_name': 'driverId', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 866,
    "db_id": "formula_1",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "true_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "text_2_sql": "SELECT DISTINCT d.url FROM races r JOIN lapTimes lt ON r.raceid = lt.raceid JOIN drivers d ON lt.driverid = d.driverid WHERE r.raceid = 161 AND lt.time = '0:01:27'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website. -- External Knowledge: {'No': {'column_name': 'raceId', 'table_name': 'races'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}, 'time': {'column_name': 'time', 'table_name': 'lapTimes'}, 'website': {'column_name': 'url', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 868,
    "db_id": "formula_1",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "true_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "text_2_sql": "SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE r.name = 'Malaysian Grand Prix' LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Where is Malaysian Grand Prix held? Give the location coordinates. -- External Knowledge: {'location': {'column_name': 'location', 'table_name': 'circuits'}, 'Prix': {'column_name': 'name', 'table_name': 'races'}, 'Grand': {'column_name': 'name', 'table_name': 'races'}, 'Malaysian': {'column_name': 'name', 'table_name': 'races'}, 'coordinates': {'column_name': 'lat', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 869,
    "db_id": "formula_1",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "true_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT c.url FROM races r JOIN results res ON r.raceid = res.raceid JOIN constructors c ON res.constructorid = c.constructorid WHERE r.round = 9 GROUP BY c.constructorid, c.url ORDER BY SUM(res.points) DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the constructor which got the highest point in the race No. 9 , what is its introduction website? -- External Knowledge: {'No': {'column_name': 'round', 'table_name': 'races'}, 'highest': {'column_name': 'points', 'table_name': 'constructorResults'}, 'constructor': {'column_name': 'constructorId', 'table_name': 'constructorResults'}, 'point': {'column_name': 'points', 'table_name': 'constructorResults'}, 'website': {'column_name': 'url', 'table_name': 'constructors'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 872,
    "db_id": "formula_1",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "true_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "text_2_sql": "SELECT DISTINCT d.code FROM races r JOIN qualifying q ON r.raceid = q.raceid JOIN drivers d ON q.driverid = d.driverid WHERE r.round = 45 AND q.q3 = '0:01:33'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code? -- External Knowledge: {'No': {'column_name': 'round', 'table_name': 'races'}, 'Q3': {'column_name': 'q3', 'table_name': 'qualifying'}, 'code': {'column_name': 'code', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 875,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "true_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "text_2_sql": "SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceid = 901",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Show me the season page of year when the race No. 901 took place. -- External Knowledge: {'year': {'column_name': 'year', 'table_name': 'races'}, 'No': {'column_name': 'raceId', 'table_name': 'races'}, 'season': {'column_name': 'year', 'table_name': 'seasons'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 877,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "true_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND NOT T2.time IS NULL ORDER BY T1.dob DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverid = d.driverid JOIN status s ON r.statusid = s.statusid WHERE r.raceid = 872 AND s.status = 'Finished' ORDER BY d.dob DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For all the drivers who finished the game in race No. 872, who is the youngest? -- External Knowledge: {'finished': {'column_name': 'statusId', 'table_name': 'results'}, '872': {'column_name': 'raceId', 'table_name': 'races'}, 'who': {'column_name': 'driverId', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 879,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "true_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT DISTINCT d.nationality FROM drivers d JOIN results r ON d.driverid = r.driverid WHERE r.fastestlapspeed = ( SELECT MAX(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL AND fastestlapspeed != '' ) AND r.fastestlapspeed IS NOT NULL AND r.fastestlapspeed != '' LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the driver who set the fastest lap speed, what is his nationality? -- External Knowledge: {'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}, 'speed': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}, 'fastest': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 880,
    "db_id": "formula_1",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "true_sql": "SELECT (SUM(CASE WHEN T2.raceId = 853 THEN T2.fastestLapSpeed::numeric ELSE 0 END) - SUM(CASE WHEN T2.raceId = 854 THEN T2.fastestLapSpeed::numeric ELSE 0 END)) * 100 / NULLIF(SUM(CASE WHEN T2.raceId = 853 THEN T2.fastestLapSpeed::numeric ELSE 0 END), 0) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "text_2_sql": "WITH paul_races AS ( SELECT r.raceid, r.name, res.fastestlapspeed FROM results res JOIN races r ON res.raceid = r.raceid JOIN drivers d ON res.driverid = d.driverid WHERE d.forename = 'Paul' AND d.surname = 'di Resta' ORDER BY r.raceid ), race_853 AS ( SELECT raceid, fastestlapspeed FROM paul_races WHERE raceid = 853 ), next_race AS ( SELECT raceid, fastestlapspeed FROM paul_races WHERE raceid > 853 ORDER BY raceid LIMIT 1 ) SELECT (r853.fastestlapspeed::numeric - nr.fastestlapspeed::numeric) / nr.fastestlapspeed::numeric * 100 AS percent_faster FROM race_853 r853 CROSS JOIN next_race nr",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? -- External Knowledge: {'race': {'column_name': 'raceId', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 881,
    "db_id": "formula_1",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN NOT T2.time IS NULL THEN T2.driverId END) AS REAL) * 100 / NULLIF(COUNT(T2.driverId), 0) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "text_2_sql": "SELECT COUNT(CASE WHEN s.status = 'Finished' THEN 1 END)::float / COUNT(*) * 100 AS completion_rate FROM races r JOIN results res ON r.raceid = res.raceid JOIN status s ON res.statusid = s.statusid WHERE r.date = '1983-07-16'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the drivers who took part in the race in 1983/7/16, what's their race completion rate? -- External Knowledge: {'race': {'column_name': 'raceId', 'table_name': 'races'}, 'date': {'column_name': 'date', 'table_name': 'races'}, 'drivers': {'column_name': 'driverId', 'table_name': 'results'}, 'completion': {'column_name': 'statusId', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 884,
    "db_id": "formula_1",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "true_sql": "SELECT name FROM races WHERE TO_CHAR(CAST(date AS TIMESTAMP), 'YYYY') = (SELECT TO_CHAR(CAST(date AS TIMESTAMP), 'YYYY') FROM races ORDER BY date ASC NULLS FIRST LIMIT 1) AND TO_CHAR(CAST(date AS TIMESTAMP), 'MM') = (SELECT TO_CHAR(CAST(date AS TIMESTAMP), 'MM') FROM races ORDER BY date ASC NULLS FIRST LIMIT 1)",
    "text_2_sql": "SELECT name FROM races WHERE (year, EXTRACT(MONTH FROM date)) = ( SELECT year, EXTRACT(MONTH FROM date) FROM races ORDER BY year ASC, date ASC LIMIT 1 ) ORDER BY date ASC;",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the names of all races that occurred in the earliest recorded year and month. -- External Knowledge: {'year': {'column_name': 'year', 'table_name': 'races'}, 'month': {'column_name': 'date', 'table_name': 'races'}, 'name': {'column_name': 'name', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 892,
    "db_id": "formula_1",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "true_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT d.forename, d.surname, SUM(r.points) AS total_points FROM drivers d JOIN results r ON d.driverid = r.driverid GROUP BY d.driverid, d.forename, d.surname ORDER BY total_points DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the driver with the most points scored. Find his full name with that points. -- External Knowledge: {'points': {'column_name': 'points', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 894,
    "db_id": "formula_1",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "true_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT r.fastestlaptime, d.forename, d.surname, ra.name AS race_name FROM results r JOIN drivers d ON r.driverid = d.driverid JOIN races ra ON r.raceid = ra.raceid WHERE r.fastestlaptime IS NOT NULL ORDER BY r.fastestlaptime ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the best lap time recorded? List the driver and race with such recorded lap time. -- External Knowledge: {'time': {'column_name': 'fastestLapTime', 'table_name': 'results'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 895,
    "db_id": "formula_1",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "true_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "text_2_sql": "SELECT AVG(lt.time::interval) as average_lap_time FROM lapTimes lt JOIN races r ON lt.raceid = r.raceid JOIN drivers d ON lt.driverid = d.driverid WHERE r.year = 2009 AND r.name LIKE '%Malaysian Grand Prix%' AND d.forename = 'Lewis' AND d.surname = 'Hamilton'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix? -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'Hamilton': {'column_name': 'surname', 'table_name': 'drivers'}, 'time': {'column_name': 'time', 'table_name': 'lapTimes'}, 'Malaysian': {'column_name': 'name', 'table_name': 'races'}, 'Lewis': {'column_name': 'forename', 'table_name': 'drivers'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 896,
    "db_id": "formula_1",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / NULLIF(COUNT(T2.driverStandingsId), 0) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "text_2_sql": "SELECT (COUNT(*) - COUNT(CASE WHEN r.position = 1 THEN 1 END)) * 100.0 / COUNT(*) AS percentage_not_first FROM races ra JOIN results r ON ra.raceid = r.raceid JOIN drivers d ON r.driverid = d.driverid JOIN circuits c ON ra.circuitid = c.circuitid WHERE d.surname = 'Hamilton' AND ra.year >= 2010 AND ra.round = 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. -- External Knowledge: {'f1': {'column_name': 'name', 'table_name': 'constructors'}, 'since': {'column_name': 'year', 'table_name': 'races'}, 'Hamilton': {'column_name': 'surname', 'table_name': 'drivers'}, '1st': {'column_name': 'position', 'table_name': 'results'}, '2010': {'column_name': 'year', 'table_name': 'races'}, 'track': {'column_name': 'name', 'table_name': 'circuits'}, 'circuit': {'column_name': 'name', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 897,
    "db_id": "formula_1",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "true_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT d.forename, d.surname, d.nationality, MAX(ds.points) as max_points FROM drivers d JOIN driverStandings ds ON d.driverid = ds.driverid WHERE ds.position = 1 GROUP BY d.driverid, d.forename, d.surname, d.nationality ORDER BY COUNT(ds.wins) DESC, max_points DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the driver with the most winning. Mention his nationality and what is his maximum point scores. -- External Knowledge: {'winning': {'column_name': 'wins', 'table_name': 'driverStandings'}, 'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'maximum': {'column_name': 'points', 'table_name': 'driverStandings'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 898,
    "db_id": "formula_1",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "true_sql": "SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM dob) AS age, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "text_2_sql": "SELECT forename || ' ' || surname AS full_name, EXTRACT(YEAR FROM AGE(CURRENT_DATE, dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How old is the youngest Japanese driver? What is his name? -- External Knowledge: {'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'old': {'column_name': 'dob', 'table_name': 'drivers'}, 'Japanese': {'column_name': 'nationality', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}, 'name': {'column_name': 'forename', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 901,
    "db_id": "formula_1",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "true_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND TO_CHAR(CAST(T2.date AS TIMESTAMP), 'MM') = '09'",
    "text_2_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE EXTRACT(YEAR FROM r.date) = 2005 AND EXTRACT(MONTH FROM r.date) = 9",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the races along with its circuit name and location for f1 races hosted in September 2005. -- External Knowledge: {'location': {'column_name': 'location', 'table_name': 'circuits'}, 'races': {'column_name': 'name', 'table_name': 'races'}, 'name': {'column_name': 'name', 'table_name': 'races'}, '2005': {'column_name': 'year', 'table_name': 'races'}, 'September': {'column_name': 'date', 'table_name': 'races'}, 'circuit': {'column_name': 'name', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 902,
    "db_id": "formula_1",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "true_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "text_2_sql": "SELECT r.name AS race_name FROM races r JOIN results res ON r.raceid = res.raceid JOIN drivers d ON res.driverid = d.driverid WHERE d.driverref = 'yoong' AND res.number < 20;",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which race was Alex Yoong in when he was in track number less than 20? -- External Knowledge: {'Alex Yoong': {'column_name': 'driverRef', 'table_name': 'drivers'}, 'track': {'column_name': 'number', 'table_name': 'results'}, 'less': {'column_name': 'number', 'table_name': 'results'}, '20': {'column_name': 'number', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 904,
    "db_id": "formula_1",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "true_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT r.name AS race, r.year, res.fastestlaptime FROM drivers d JOIN results res ON d.driverid = res.driverid JOIN races r ON res.raceid = r.raceid WHERE d.driverref = 'michael_schumacher' AND res.fastestlaptime IS NOT NULL ORDER BY res.fastestlaptime ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the race and year of race in which Michael Schumacher had his fastest lap. -- External Knowledge: {'Michael Schumacher': {'column_name': 'driverRef', 'table_name': 'drivers'}, 'race': {'column_name': 'name', 'table_name': 'races'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}, 'fastest': {'column_name': 'fastestLapTime', 'table_name': 'results'}, 'year': {'column_name': 'year', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 906,
    "db_id": "formula_1",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "true_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT r.name AS race_name, r.date AS race_date, res.points FROM drivers d JOIN results res ON d.driverid = res.driverid JOIN races r ON res.raceid = r.raceid WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.date ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which was Lewis Hamilton first race? What was his points recorded for his first race event? -- External Knowledge: {'first': {'column_name': 'position', 'table_name': 'results'}, 'race': {'column_name': 'raceId', 'table_name': 'races'}, 'points': {'column_name': 'points', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 909,
    "db_id": "formula_1",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / NULLIF(COUNT(T2.circuitId), 0) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_in_germany FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE r.name = 'European Grand Prix'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among all European Grand Prix races, what is the percentage of the races were hosted in Germany? -- External Knowledge: {'European': {'column_name': 'country', 'table_name': 'circuits'}, 'Germany': {'column_name': 'country', 'table_name': 'circuits'}, 'races': {'column_name': 'raceId', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 910,
    "db_id": "formula_1",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "true_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "text_2_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's the location coordinates of Silverstone Circuit? -- External Knowledge: {'location': {'column_name': 'location', 'table_name': 'circuits'}, 'Silverstone': {'column_name': 'name', 'table_name': 'circuits'}, 'Circuit': {'column_name': 'name', 'table_name': 'circuits'}, 'coordinates': {'column_name': 'lat', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 912,
    "db_id": "formula_1",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "true_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "text_2_sql": "SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit';",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's the reference name of Marina Bay Street Circuit? -- External Knowledge: {'Circuit': {'column_name': 'name', 'table_name': 'circuits'}, 'reference': {'column_name': 'circuitRef', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 915,
    "db_id": "formula_1",
    "question": "Which country is the oldest driver from?",
    "true_sql": "SELECT nationality FROM drivers WHERE NOT dob IS NULL ORDER BY dob ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers) LIMIT 1;",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which country is the oldest driver from? -- External Knowledge: {'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'country': {'column_name': 'nationality', 'table_name': 'drivers'}, 'oldest': {'column_name': 'dob', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 928,
    "db_id": "formula_1",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "true_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "text_2_sql": "SELECT d.driverref FROM races r JOIN results res ON r.raceid = res.raceid JOIN drivers d ON res.driverid = d.driverid WHERE r.year = 2007 AND r.name LIKE '%Canadian Grand Prix%' AND res.position = 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. -- External Knowledge: {'2007': {'column_name': 'year', 'table_name': 'races'}, 'Canadian': {'column_name': 'name', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'ranked': {'column_name': 'position', 'table_name': 'results'}, 'first': {'column_name': 'position', 'table_name': 'results'}, 'reference': {'column_name': 'driverRef', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 930,
    "db_id": "formula_1",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "true_sql": "SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE rank = 1 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))",
    "text_2_sql": "SELECT r.name AS race_name, res.position AS rank FROM races r JOIN results res ON r.raceid = res.raceid JOIN drivers d ON res.driverid = d.driverid WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY res.position ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In which Formula_1 race did Lewis Hamilton rank the highest? -- External Knowledge: {'Formula_1': {'column_name': 'name', 'table_name': 'races'}, 'race': {'column_name': 'raceId', 'table_name': 'races'}, 'Lewis': {'column_name': 'forename', 'table_name': 'drivers'}, 'Hamilton': {'column_name': 'surname', 'table_name': 'drivers'}, 'rank': {'column_name': 'position', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 931,
    "db_id": "formula_1",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "true_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND NOT T2.fastestLapSpeed IS NULL ORDER BY T2.fastestLapSpeed DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT MAX(CAST(r.fastestlapspeed AS FLOAT)) AS fastest_lap_speed FROM races ra JOIN results r ON ra.raceid = r.raceid WHERE ra.year = 2009 AND ra.name LIKE '%Spanish Grand Prix%'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, 'Spanish': {'column_name': 'name', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'drivers': {'column_name': 'driverId', 'table_name': 'drivers'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}, 'speed': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}, 'fastest': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 933,
    "db_id": "formula_1",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "true_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
    "text_2_sql": "SELECT r.position FROM results r JOIN races ra ON r.raceid = ra.raceid JOIN drivers d ON r.driverid = d.driverid WHERE ra.year = 2008 AND ra.name LIKE '%Chinese Grand Prix%' AND d.forename = 'Lewis' AND d.surname = 'Hamilton'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'Chinese': {'column_name': 'name', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'Hamilton': {'column_name': 'surname', 'table_name': 'drivers'}, 'Lewis': {'column_name': 'forename', 'table_name': 'drivers'}, 'rank': {'column_name': 'position', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 937,
    "db_id": "formula_1",
    "question": "What's the finish time for the driver who ranked second in 2008's Chinese Grand Prix?",
    "true_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "text_2_sql": "SELECT r.time FROM races ra JOIN results r ON ra.raceid = r.raceid WHERE ra.year = 2008 AND ra.name LIKE '%Chinese Grand Prix%' AND r.position = 2",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's the finish time for the driver who ranked second in 2008's Chinese Grand Prix? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'ranked': {'column_name': 'position', 'table_name': 'results'}, 'Chinese': {'column_name': 'name', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'driver': {'column_name': 'driverId', 'table_name': 'results'}, 'time': {'column_name': 'time', 'table_name': 'results'}, 'finish': {'column_name': 'time', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 940,
    "db_id": "formula_1",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "true_sql": "SELECT COUNT(*) FROM (SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0) AS subquery",
    "text_2_sql": "SELECT COUNT(DISTINCT r.driverid) AS driver_count FROM races ra JOIN results r ON ra.raceid = r.raceid JOIN status s ON r.statusid = s.statusid WHERE ra.year = 2008 AND ra.name LIKE '%Chinese%' AND s.status != 'Did not finish' AND EXISTS ( SELECT 1 FROM races ra2 JOIN results r2 ON ra2.raceid = r2.raceid WHERE r2.driverid = r.driverid AND ra2.raceid != ra.raceid )",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'races': {'column_name': 'raceId', 'table_name': 'races'}, 'finished': {'column_name': 'statusId', 'table_name': 'results'}, 'Chinese': {'column_name': 'name', 'table_name': 'races'}, 'Formula_1': {'column_name': 'raceId', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "true_sql": "WITH time_in_seconds AS (SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND NOT T1.time IS NULL AND T2.year = 2008), champion_time AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds)) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / NULLIF((SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time), 0)",
    "text_2_sql": "SELECT (1 - CAST(champion_time AS FLOAT) / CAST(last_place_time AS FLOAT)) * 100 AS percentage_faster FROM ( SELECT MIN(CASE WHEN r.position = 1 THEN r.milliseconds END) AS champion_time, MAX(CASE WHEN r.position = MAX(r.position) THEN r.milliseconds END) AS last_place_time FROM results r JOIN races ra ON r.raceid = ra.raceid WHERE ra.year = 2008 AND ra.name LIKE '%Australian%Grand Prix%' AND r.position IS NOT NULL ) subquery",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'finished': {'column_name': 'position', 'table_name': 'results'}, 'Australian': {'column_name': 'name', 'table_name': 'races'}, 'faster': {'column_name': 'milliseconds', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "true_sql": "WITH time_in_seconds AS (SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND NOT T1.time IS NULL AND T2.year = 2008), champion_time AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds)) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / NULLIF((SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time), 0)",
    "text_2_sql": "SELECT (1 - CAST(winner.milliseconds AS FLOAT) / CAST(last_finisher.milliseconds AS FLOAT)) * 100 AS percentage_faster FROM races r JOIN results winner ON r.raceid = winner.raceid JOIN results last_finisher ON r.raceid = last_finisher.raceid WHERE r.year = 2008 AND r.name LIKE '%Australian%Grand Prix%' AND winner.position = 1 AND last_finisher.position = ( SELECT MAX(position) FROM results WHERE raceid = r.raceid AND position != 'NULL' )",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'finished': {'column_name': 'position', 'table_name': 'results'}, 'Australian': {'column_name': 'name', 'table_name': 'races'}, 'faster': {'column_name': 'milliseconds', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "true_sql": "WITH time_in_seconds AS (SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND NOT T1.time IS NULL AND T2.year = 2008), champion_time AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS (SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds)) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / NULLIF((SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time), 0)",
    "text_2_sql": "WITH race_info AS ( SELECT raceid FROM races WHERE year = 2008 AND name LIKE '%Australian%Grand Prix%' ), race_results AS ( SELECT r.resultid, r.position, r.milliseconds, r.driverid FROM results r JOIN race_info ri ON r.raceid = ri.raceid WHERE r.position IS NOT NULL ), champion_time AS ( SELECT milliseconds FROM race_results WHERE position = 1 ), last_position_time AS ( SELECT milliseconds FROM race_results WHERE position = (SELECT MAX(position) FROM race_results) ) SELECT ROUND( (1 - (CAST(ct.milliseconds AS FLOAT) / CAST(lpt.milliseconds AS FLOAT))) * 100, 2 ) AS percentage_faster FROM champion_time ct, last_position_time lpt",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'finished': {'column_name': 'position', 'table_name': 'results'}, 'Australian': {'column_name': 'name', 'table_name': 'races'}, 'faster': {'column_name': 'milliseconds', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 945,
    "db_id": "formula_1",
    "question": "How many circuits are there in Adelaide, Australia?",
    "true_sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "text_2_sql": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many circuits are there in Adelaide, Australia? -- External Knowledge: {'Australia': {'column_name': 'country', 'table_name': 'circuits'}, 'Adelaide': {'column_name': 'location', 'table_name': 'circuits'}, 'circuits': {'column_name': 'circuitId', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 948,
    "db_id": "formula_1",
    "question": "What are the maximum points of British constructors?",
    "true_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "text_2_sql": "SELECT MAX(cs.points) AS max_points FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE c.nationality = 'British'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the maximum points of British constructors? -- External Knowledge: {'points': {'column_name': 'points', 'table_name': 'constructorStandings'}, 'constructors': {'column_name': 'constructorId', 'table_name': 'constructors'}, 'British': {'column_name': 'nationality', 'table_name': 'constructors'}, 'maximum': {'column_name': 'points', 'table_name': 'constructorStandings'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 950,
    "db_id": "formula_1",
    "question": "Please list the constructor names with 0 points at race 291.",
    "true_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "text_2_sql": "SELECT DISTINCT c.name FROM constructors c JOIN constructorResults cr ON c.constructorid = cr.constructorid WHERE cr.raceid = 291 AND cr.points = 0",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the constructor names with 0 points at race 291. -- External Knowledge: {'points': {'column_name': 'points', 'table_name': 'constructorResults'}, 'constructor': {'column_name': 'constructorId', 'table_name': 'constructorResults'}, '291': {'column_name': 'raceId', 'table_name': 'constructorResults'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 951,
    "db_id": "formula_1",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "true_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "text_2_sql": "SELECT COUNT(DISTINCT c.constructorid) FROM constructors c JOIN constructorResults cr ON c.constructorid = cr.constructorid JOIN races r ON cr.raceid = r.raceid WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY c.constructorid HAVING COUNT(DISTINCT r.raceid) = 2",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many Japanese constructors have 0 points in 2 races? -- External Knowledge: {'points': {'column_name': 'points', 'table_name': 'constructorResults'}, 'races': {'column_name': 'raceId', 'table_name': 'races'}, 'Japanese': {'column_name': 'nationality', 'table_name': 'constructors'}, 'constructors': {'column_name': 'constructorId', 'table_name': 'constructors'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 954,
    "db_id": "formula_1",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN NOT T1.time IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.raceId), 0) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "text_2_sql": "SELECT COUNT(CASE WHEN s.status = 'Finished' THEN 1 END)::float / COUNT(*) * 100 AS completion_percentage FROM results r JOIN races ra ON r.raceid = ra.raceid JOIN drivers d ON r.driverid = d.driverid JOIN status s ON r.statusid = s.statusid WHERE d.nationality = 'Japanese' AND ra.year BETWEEN 2007 AND 2009",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, '2007': {'column_name': 'year', 'table_name': 'races'}, 'drivers': {'column_name': 'driverId', 'table_name': 'drivers'}, 'Japanese': {'column_name': 'nationality', 'table_name': 'drivers'}, 'completion': {'column_name': 'status', 'table_name': 'status'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "true_sql": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CASE WHEN SPLIT_PART(T1.time, ':', 1) <> '' AND SPLIT_PART(T1.time, ':', 2) <> '' AND SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) <> '' THEN (CAST(SPLIT_PART(T1.time, ':', 1) AS REAL) * 3600) + (CAST(SPLIT_PART(T1.time, ':', 2) AS REAL) * 60) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) AS REAL) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 2) AS REAL)/1000 ELSE 0 END) ELSE (CASE WHEN SUBSTRING(T1.time FROM 2) <> '' THEN CAST(SUBSTRING(T1.time FROM 2) AS REAL) ELSE 0 END) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T1.time != ''), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "text_2_sql": "SELECT r.year, AVG(res.milliseconds / 1000.0) AS avg_time_seconds FROM races r JOIN results res ON r.raceid = res.raceid JOIN driverStandings ds ON r.year = ds.year AND res.driverid = ds.driverid WHERE ds.position = 1 AND r.year < 1975 GROUP BY r.year ORDER BY r.year",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average time in seconds of champion for each year, before year 1975? -- External Knowledge: {'seconds': {'column_name': 'milliseconds', 'table_name': 'results'}, 'champion': {'column_name': 'position', 'table_name': 'driverStandings'}, 'year': {'column_name': 'year', 'table_name': 'races'}, '1975': {'column_name': 'year', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "true_sql": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CASE WHEN SPLIT_PART(T1.time, ':', 1) <> '' AND SPLIT_PART(T1.time, ':', 2) <> '' AND SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) <> '' THEN (CAST(SPLIT_PART(T1.time, ':', 1) AS REAL) * 3600) + (CAST(SPLIT_PART(T1.time, ':', 2) AS REAL) * 60) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) AS REAL) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 2) AS REAL)/1000 ELSE 0 END) ELSE (CASE WHEN SUBSTRING(T1.time FROM 2) <> '' THEN CAST(SUBSTRING(T1.time FROM 2) AS REAL) ELSE 0 END) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T1.time != ''), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "text_2_sql": "SELECT r.year, AVG(res.milliseconds / 1000.0) AS avg_time_seconds FROM races r JOIN results res ON r.raceid = res.raceid JOIN driverStandings ds ON r.year = ds.year AND res.driverid = ds.driverid WHERE ds.position = 1 AND r.year < 1975 GROUP BY r.year ORDER BY r.year",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average time in seconds of champion for each year, before year 1975? -- External Knowledge: {'seconds': {'column_name': 'milliseconds', 'table_name': 'results'}, 'champion': {'column_name': 'position', 'table_name': 'driverStandings'}, 'year': {'column_name': 'year', 'table_name': 'races'}, '1975': {'column_name': 'year', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "true_sql": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CASE WHEN SPLIT_PART(T1.time, ':', 1) <> '' AND SPLIT_PART(T1.time, ':', 2) <> '' AND SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) <> '' THEN (CAST(SPLIT_PART(T1.time, ':', 1) AS REAL) * 3600) + (CAST(SPLIT_PART(T1.time, ':', 2) AS REAL) * 60) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 1) AS REAL) + CAST(SPLIT_PART(SPLIT_PART(T1.time, ':', 3), '.', 2) AS REAL)/1000 ELSE 0 END) ELSE (CASE WHEN SUBSTRING(T1.time FROM 2) <> '' THEN CAST(SUBSTRING(T1.time FROM 2) AS REAL) ELSE 0 END) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T1.time != ''), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "text_2_sql": "SELECT r.year, AVG(res.milliseconds / 1000.0) AS avg_time_seconds FROM races r JOIN results res ON r.raceid = res.raceid JOIN driverStandings ds ON r.year = ds.year AND res.driverid = ds.driverid WHERE ds.position = 1 AND r.year < 1975 GROUP BY r.year ORDER BY r.year",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average time in seconds of champion for each year, before year 1975? -- External Knowledge: {'seconds': {'column_name': 'milliseconds', 'table_name': 'results'}, 'champion': {'column_name': 'position', 'table_name': 'driverStandings'}, 'year': {'column_name': 'year', 'table_name': 'races'}, '1975': {'column_name': 'year', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 959,
    "db_id": "formula_1",
    "question": "What is the fastest lap number of the champion in 2009?",
    "true_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "text_2_sql": "SELECT r.fastestlap FROM races ra JOIN results r ON ra.raceid = r.raceid JOIN driverStandings ds ON r.driverid = ds.driverid AND ra.raceid = ds.raceid WHERE ra.year = 2009 AND ds.position = 1 ORDER BY r.fastestlap ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the fastest lap number of the champion in 2009? -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, 'champion': {'column_name': 'driverId', 'table_name': 'driverStandings'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}, 'fastest': {'column_name': 'fastestLap', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 960,
    "db_id": "formula_1",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "true_sql": "SELECT AVG(CAST(T1.fastestLapSpeed AS NUMERIC)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "text_2_sql": "SELECT AVG(CAST(r.fastestlapspeed AS NUMERIC)) FROM results r JOIN races ra ON r.raceid = ra.raceid WHERE ra.year = 2009 AND ra.name LIKE '%Spanish Grand Prix%'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average of fastest lap speed in the 2009 Spanish Grand Prix race? -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, 'Spanish': {'column_name': 'name', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'fastest': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}, 'lap': {'column_name': 'fastestLap', 'table_name': 'results'}, 'speed': {'column_name': 'fastestLapSpeed', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 962,
    "db_id": "formula_1",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(T3.dob AS TIMESTAMP), 'YYYY') < '1985' AND T1.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(*), 0) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT d.driverid)::NUMERIC / (SELECT COUNT(DISTINCT driverid) FROM drivers WHERE dob < '1985-01-01') * 100, 2) AS percentage FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races ra ON r.raceid = ra.raceid WHERE d.dob < '1985-01-01' AND r.laps > 50 AND ra.year BETWEEN 2000 AND 2005",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? -- External Knowledge: {'2000': {'column_name': 'year', 'table_name': 'races'}, '2005': {'column_name': 'year', 'table_name': 'races'}, '1985': {'column_name': 'dob', 'table_name': 'drivers'}, '50': {'column_name': 'laps', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 963,
    "db_id": "formula_1",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "true_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (EXTRACT(MINUTE FROM T2.time::INTERVAL) * 60 + EXTRACT(SECOND FROM T2.time::INTERVAL)) < 120",
    "text_2_sql": "SELECT COUNT(DISTINCT d.driverid) FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN lapTimes l ON r.raceid = l.raceid AND r.driverid = l.driverid WHERE d.nationality = 'French' AND l.time < '02:00.000'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many French drivers who obtain the laptime less than 02:00.00? -- External Knowledge: {'French': {'column_name': 'nationality', 'table_name': 'drivers'}, 'laptime': {'column_name': 'time', 'table_name': 'lapTimes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 964,
    "db_id": "formula_1",
    "question": "List out the code for drivers who have nationality in America.",
    "true_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "text_2_sql": "SELECT code FROM drivers WHERE nationality = 'American'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List out the code for drivers who have nationality in America. -- External Knowledge: {'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'code': {'column_name': 'code', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 967,
    "db_id": "formula_1",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "true_sql": "SELECT COUNT(*) FROM (SELECT nationality FROM drivers ORDER BY dob DESC LIMIT 3) AS T3 WHERE nationality = 'Dutch'",
    "text_2_sql": "SELECT code, nationality FROM ( SELECT code, nationality, ROW_NUMBER() OVER (ORDER BY dob DESC) AS age_rank FROM drivers WHERE code IS NOT NULL ) ranked_drivers WHERE age_rank <= 3 ORDER BY age_rank",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them? -- External Knowledge: {'drivers': {'column_name': 'driverId', 'table_name': 'drivers'}, 'code': {'column_name': 'code', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}, 'Netherlandic': {'column_name': 'nationality', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 971,
    "db_id": "formula_1",
    "question": "Please state the reference name of the oldest German driver.",
    "true_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1",
    "text_2_sql": "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please state the reference name of the oldest German driver. -- External Knowledge: {'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'reference': {'column_name': 'driverRef', 'table_name': 'drivers'}, 'oldest': {'column_name': 'dob', 'table_name': 'drivers'}, 'German': {'column_name': 'nationality', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 972,
    "db_id": "formula_1",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "true_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE TO_CHAR(CAST(T2.dob AS TIMESTAMP), 'YYYY') = '1971' AND NOT T1.fastestLapTime IS NULL",
    "text_2_sql": "SELECT DISTINCT d.driverid, d.code FROM drivers d JOIN results r ON d.driverid = r.driverid WHERE EXTRACT(YEAR FROM d.dob) = 1971 AND r.fastestlap = 1 ORDER BY d.driverid",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers. -- External Knowledge: {'born': {'column_name': 'dob', 'table_name': 'drivers'}, 'code': {'column_name': 'code', 'table_name': 'drivers'}, 'drivers': {'column_name': 'driverId', 'table_name': 'drivers'}, 'fastest': {'column_name': 'fastestLap', 'table_name': 'results'}, '1971': {'column_name': 'dob', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 977,
    "db_id": "formula_1",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "true_sql": "SELECT SUM(CASE WHEN NOT time IS NULL THEN 1 ELSE 0 END) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "text_2_sql": "SELECT COUNT(*) AS disqualified_count FROM results r JOIN races ra ON r.raceid = ra.raceid JOIN status s ON r.statusid = s.statusid WHERE ra.raceid BETWEEN 50 AND 100 AND r.position IS NOT NULL AND s.status = 'Disqualified'",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From race no. 50 to 100, how many finishers have been disqualified? -- External Knowledge: {'50': {'column_name': 'raceId', 'table_name': 'races'}, '100': {'column_name': 'raceId', 'table_name': 'races'}, 'finishers': {'column_name': 'position', 'table_name': 'results'}, 'disqualified': {'column_name': 'status', 'table_name': 'status'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 978,
    "db_id": "formula_1",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "true_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "text_2_sql": "SELECT c.name AS circuit_name, c.location, c.lat, c.lng, COUNT(r.raceid) AS times_held FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE c.country = 'Austria' GROUP BY c.name, c.location, c.lat, c.lng ORDER BY times_held DESC",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many times the circuits were held in Austria? Please give their location and coordinates. -- External Knowledge: {'location': {'column_name': 'location', 'table_name': 'circuits'}, 'times': {'column_name': 'year', 'table_name': 'races'}, 'Austria': {'column_name': 'country', 'table_name': 'circuits'}, 'circuits': {'column_name': 'name', 'table_name': 'circuits'}, 'coordinates': {'column_name': 'lat', 'table_name': 'circuits'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 981,
    "db_id": "formula_1",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "true_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.driverId = (SELECT driverId FROM drivers ORDER BY dob DESC NULLS LAST LIMIT 1) ORDER BY T3.date ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT d.forename, d.surname, r.name AS race_name, r.date, r.time, s.year FROM drivers d JOIN qualifying q ON d.driverid = q.driverid JOIN races r ON q.raceid = r.raceid JOIN seasons s ON r.year = s.year WHERE d.dob = ( SELECT MAX(dob) FROM drivers d2 JOIN qualifying q2 ON d2.driverid = q2.driverid ) AND q.position = 1 ORDER BY r.date ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. -- External Knowledge: {'first': {'column_name': 'position', 'table_name': 'qualifying'}, 'date': {'column_name': 'date', 'table_name': 'races'}, 'race': {'column_name': 'raceId', 'table_name': 'races'}, 'qualifying': {'column_name': 'qualifyId', 'table_name': 'qualifying'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "true_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND EXTRACT(YEAR FROM T2.dob) BETWEEN 1980 AND 1985 GROUP BY T2.forename, T2.surname ORDER BY AVG(CAST(T1.duration AS INTERVAL)) LIMIT 3",
    "text_2_sql": "SELECT d.forename, d.surname, AVG(p.duration) as avg_pit_stop_duration FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN pitStops p ON r.raceid = p.raceid AND r.driverid = p.driverid WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverid, d.forename, d.surname ORDER BY avg_pit_stop_duration ASC LIMIT 3",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. -- External Knowledge: {'German': {'column_name': 'nationality', 'table_name': 'drivers'}, 'born': {'column_name': 'dob', 'table_name': 'drivers'}, 'pit': {'column_name': 'stop', 'table_name': 'pitStops'}, 'duration': {'column_name': 'duration', 'table_name': 'pitStops'}, 'shortest': {'column_name': 'duration', 'table_name': 'pitStops'}, 'stop': {'column_name': 'stop', 'table_name': 'pitStops'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "true_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND EXTRACT(YEAR FROM T2.dob) BETWEEN 1980 AND 1985 GROUP BY T2.forename, T2.surname ORDER BY AVG(CAST(T1.duration AS INTERVAL)) LIMIT 3",
    "text_2_sql": "SELECT d.forename, d.surname, AVG(p.duration) as avg_pit_stop_duration FROM drivers d JOIN pitStops p ON d.driverid = p.driverid WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverid, d.forename, d.surname ORDER BY avg_pit_stop_duration ASC LIMIT 3",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. -- External Knowledge: {'German': {'column_name': 'nationality', 'table_name': 'drivers'}, 'born': {'column_name': 'dob', 'table_name': 'drivers'}, 'pit': {'column_name': 'stop', 'table_name': 'pitStops'}, 'duration': {'column_name': 'duration', 'table_name': 'pitStops'}, 'shortest': {'column_name': 'duration', 'table_name': 'pitStops'}, 'stop': {'column_name': 'stop', 'table_name': 'pitStops'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "true_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND EXTRACT(YEAR FROM T2.dob) BETWEEN 1980 AND 1985 GROUP BY T2.forename, T2.surname ORDER BY AVG(CAST(T1.duration AS INTERVAL)) LIMIT 3",
    "text_2_sql": "SELECT d.forename, d.surname, AVG(p.duration) as avg_pit_stop_duration FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN pitStops p ON r.raceid = p.raceid AND r.driverid = p.driverid WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverid, d.forename, d.surname ORDER BY avg_pit_stop_duration ASC LIMIT 3",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. -- External Knowledge: {'German': {'column_name': 'nationality', 'table_name': 'drivers'}, 'born': {'column_name': 'dob', 'table_name': 'drivers'}, 'pit': {'column_name': 'stop', 'table_name': 'pitStops'}, 'duration': {'column_name': 'duration', 'table_name': 'pitStops'}, 'shortest': {'column_name': 'duration', 'table_name': 'pitStops'}, 'stop': {'column_name': 'stop', 'table_name': 'pitStops'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 989,
    "db_id": "formula_1",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "true_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "text_2_sql": "SELECT d.forename, d.surname, r.time FROM races rc JOIN results r ON rc.raceid = r.raceid JOIN drivers d ON r.driverid = d.driverid WHERE rc.year = 2008 AND rc.name LIKE '%Canadian Grand Prix%' AND r.position = 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time. -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'Prix': {'column_name': 'name', 'table_name': 'races'}, 'Grand': {'column_name': 'name', 'table_name': 'races'}, 'champion': {'column_name': 'position', 'table_name': 'results'}, 'time': {'column_name': 'time', 'table_name': 'results'}, 'finish': {'column_name': 'time', 'table_name': 'results'}, 'Canadian': {'column_name': 'name', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 990,
    "db_id": "formula_1",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "true_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "text_2_sql": "SELECT c.constructorref, c.url FROM races r JOIN circuits ci ON r.circuitid = ci.circuitid JOIN results res ON r.raceid = res.raceid JOIN constructors c ON res.constructorid = c.constructorid WHERE r.year = 2009 AND ci.name LIKE '%Singapore%' AND r.name LIKE '%Grand Prix%' AND res.position = 1 LIMIT 1;",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. -- External Knowledge: {'2009': {'column_name': 'year', 'table_name': 'races'}, 'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'champion': {'column_name': 'position', 'table_name': 'results'}, 'constructor': {'column_name': 'constructorId', 'table_name': 'results'}, 'Singapore': {'column_name': 'name', 'table_name': 'circuits'}, 'reference': {'column_name': 'constructorRef', 'table_name': 'constructors'}, 'website': {'column_name': 'url', 'table_name': 'constructors'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 717,
    "db_id": "superhero",
    "question": "Please list all the superpowers of 3-D Man.",
    "true_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "text_2_sql": "SELECT DISTINCT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list all the superpowers of 3-D Man. -- External Knowledge: {'Man': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'superpowers': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 994,
    "db_id": "formula_1",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "true_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name, T2.nationality ORDER BY SUM(T1.points) DESC LIMIT 1",
    "text_2_sql": "SELECT c.name AS team_name, c.nationality, SUM(r.points) AS total_points FROM constructors c JOIN results r ON c.constructorid = r.constructorid JOIN races ra ON r.raceid = ra.raceid JOIN circuits ci ON ra.circuitid = ci.circuitid WHERE ci.name = 'Monaco' AND ra.year BETWEEN 1980 AND 2010 GROUP BY c.constructorid, c.name, c.nationality ORDER BY total_points DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. -- External Knowledge: {'Grand Prix': {'column_name': 'name', 'table_name': 'races'}, 'scored': {'column_name': 'points', 'table_name': 'constructorResults'}, 'Monaco': {'column_name': 'name', 'table_name': 'circuits'}, 'points': {'column_name': 'points', 'table_name': 'constructorResults'}, 'constructor': {'column_name': 'constructorId', 'table_name': 'constructors'}, 'nationality': {'column_name': 'nationality', 'table_name': 'constructors'}, 'team': {'column_name': 'name', 'table_name': 'constructors'}, '1980': {'column_name': 'year', 'table_name': 'races'}, '2010': {'column_name': 'year', 'table_name': 'races'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1001,
    "db_id": "formula_1",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "true_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit') ORDER BY CAST(SPLIT_PART(q3, ':', 1) AS INTEGER) * 60 + CAST(SPLIT_PART(SPLIT_PART(q3, ':', 2), '.', 1) AS REAL) + CAST(SPLIT_PART(q3, '.', 2) AS REAL) / 1000 ASC LIMIT 1",
    "text_2_sql": "SELECT d.forename || ' ' || d.surname AS full_name FROM qualifying q JOIN races r ON q.raceid = r.raceid JOIN circuits c ON r.circuitid = c.circuitid JOIN drivers d ON q.driverid = d.driverid WHERE r.year = 2008 AND r.round = 3 AND c.name = 'Marina Bay Street Circuit' AND q.position = 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008? -- External Knowledge: {'2008': {'column_name': 'year', 'table_name': 'races'}, 'ranked': {'column_name': 'position', 'table_name': 'qualifying'}, '1st': {'column_name': 'position', 'table_name': 'qualifying'}, '3rd': {'column_name': 'round', 'table_name': 'races'}, 'Marina Bay Street Circuit': {'column_name': 'name', 'table_name': 'circuits'}, 'qualifying': {'column_name': 'qualifyId', 'table_name': 'qualifying'}, 'racer': {'column_name': 'driverId', 'table_name': 'drivers'}, 'full name': {'column_name': ['forename', 'surname'], 'table_name': 'drivers'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "true_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob notnull ORDER BY T1.dob DESC LIMIT 1",
    "text_2_sql": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race_name FROM drivers d JOIN (SELECT MAX(year) AS max_year FROM seasons) s JOIN results res ON res.driverid = d.driverid JOIN races r ON r.raceid = res.raceid WHERE d.dob = ( SELECT MAX(dob) FROM drivers WHERE dob <= (SELECT DATE(CONCAT(max_year, '-12-31')) FROM (SELECT MAX(year) AS max_year FROM seasons) s) ) ORDER BY r.date ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined. -- External Knowledge: {'present': {'column_name': 'year', 'table_name': 'seasons'}, 'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'name': {'column_name': 'name', 'table_name': 'races'}, 'full': {'column_name': 'forename', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}, 'racer': {'column_name': 'driverId', 'table_name': 'drivers'}, 'first': {'column_name': 'raceId', 'table_name': 'results'}, 'joined': {'column_name': 'raceId', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "true_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob notnull ORDER BY T1.dob DESC LIMIT 1",
    "text_2_sql": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race_name FROM drivers d JOIN (SELECT MAX(year) AS max_year FROM seasons) s JOIN results res ON res.driverid = d.driverid JOIN races r ON r.raceid = res.raceid WHERE d.dob = ( SELECT MAX(dob) FROM drivers WHERE dob <= (SELECT MAKE_DATE(max_year, 12, 31) FROM (SELECT MAX(year) AS max_year FROM seasons) s) ) ORDER BY r.date ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined. -- External Knowledge: {'present': {'column_name': 'year', 'table_name': 'seasons'}, 'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'name': {'column_name': 'name', 'table_name': 'races'}, 'full': {'column_name': 'forename', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}, 'racer': {'column_name': 'driverId', 'table_name': 'drivers'}, 'first': {'column_name': 'raceId', 'table_name': 'results'}, 'joined': {'column_name': 'raceId', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "true_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob notnull ORDER BY T1.dob DESC LIMIT 1",
    "text_2_sql": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race_name FROM drivers d JOIN (SELECT MAX(year) AS max_year FROM seasons) s ON 1=1 JOIN results res ON d.driverid = res.driverid JOIN races r ON res.raceid = r.raceid WHERE d.dob = ( SELECT MAX(dob) FROM drivers WHERE EXTRACT(YEAR FROM dob) <= s.max_year - 18 ) ORDER BY r.date ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined. -- External Knowledge: {'present': {'column_name': 'year', 'table_name': 'seasons'}, 'nationality': {'column_name': 'nationality', 'table_name': 'drivers'}, 'name': {'column_name': 'name', 'table_name': 'races'}, 'full': {'column_name': 'forename', 'table_name': 'drivers'}, 'youngest': {'column_name': 'dob', 'table_name': 'drivers'}, 'racer': {'column_name': 'driverId', 'table_name': 'drivers'}, 'first': {'column_name': 'raceId', 'table_name': 'results'}, 'joined': {'column_name': 'raceId', 'table_name': 'results'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1003,
    "db_id": "formula_1",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "true_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT COUNT(*) as accident_count FROM results r JOIN races ra ON r.raceid = ra.raceid JOIN status s ON r.statusid = s.statusid JOIN drivers d ON r.driverid = d.driverid WHERE ra.name = 'Canadian Grand Prix' AND s.status = 'Accident' GROUP BY d.driverid ORDER BY accident_count DESC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have? -- External Knowledge: {'accidents': {'column_name': 'status', 'table_name': 'status'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 1011,
    "db_id": "formula_1",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "true_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SPLIT_PART(time, ':', 1) <> '' THEN CAST(SPLIT_PART(time, ':', 1) AS float) * 60 ELSE 0 END + CASE WHEN SPLIT_PART(SPLIT_PART(time, ':', 2), '.', 1) <> '' THEN CAST(SPLIT_PART(SPLIT_PART(time, ':', 2), '.', 1) AS float) ELSE 0 END + CASE WHEN SPLIT_PART(SPLIT_PART(time, ':', 2), '.', 2) <> '' THEN CAST(SPLIT_PART(SPLIT_PART(time, ':', 2), '.', 2) AS float) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "text_2_sql": "SELECT DISTINCT ON (d.driverid) d.forename || ' ' || d.surname AS full_name, lt.milliseconds AS lap_time FROM drivers d JOIN lapTimes lt ON d.driverid = lt.driverid JOIN races r ON lt.raceid = r.raceid WHERE r.name LIKE '%Grand Prix%' ORDER BY d.driverid, lt.milliseconds ASC LIMIT 20",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. -- External Knowledge: {'driver': {'column_name': 'driverId', 'table_name': 'drivers'}, 'time': {'column_name': 'time', 'table_name': 'lapTimes'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}, 'Formula_1': {'column_name': 'name', 'table_name': 'races'}, 'full': {'column_name': 'forename', 'table_name': 'drivers'}, 'shortest': {'column_name': 'milliseconds', 'table_name': 'lapTimes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "true_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SPLIT_PART(T1.FastestLapTime, ':', 1) AS REAL) * 60) + (CAST(SPLIT_PART(SPLIT_PART(T1.FastestLapTime, ':', 2), '.', 1) AS REAL)) + (CAST(SPLIT_PART(T1.FastestLapTime, '.', 2) AS REAL) / 1000) AS time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT T1.FastestLapTime AS lap_record FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) AS min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 ON fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy') AS T4 ON (CAST(SPLIT_PART(T1.FastestLapTime, ':', 1) AS REAL) * 60) + (CAST(SPLIT_PART(SPLIT_PART(T1.FastestLapTime, ':', 2), '.', 1) AS REAL)) + (CAST(SPLIT_PART(T1.FastestLapTime, '.', 2) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "text_2_sql": "SELECT c.name AS circuit_name, r.name AS race_name, d.forename, d.surname, res.fastestlaptime FROM circuits c JOIN races r ON c.circuitid = r.circuitid JOIN results res ON r.raceid = res.raceid JOIN drivers d ON res.driverid = d.driverid WHERE c.country = 'Italy' AND res.fastestlaptime IS NOT NULL ORDER BY res.fastestlaptime ASC LIMIT 1 PER c.circuitid",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the lap records for the circuits in Italy. -- External Knowledge: {'Italy': {'column_name': 'country', 'table_name': 'circuits'}, 'circuits': {'column_name': 'circuitId', 'table_name': 'circuits'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "true_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SPLIT_PART(T1.FastestLapTime, ':', 1) AS REAL) * 60) + (CAST(SPLIT_PART(SPLIT_PART(T1.FastestLapTime, ':', 2), '.', 1) AS REAL)) + (CAST(SPLIT_PART(T1.FastestLapTime, '.', 2) AS REAL) / 1000) AS time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT T1.FastestLapTime AS lap_record FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) AS min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 ON fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy') AS T4 ON (CAST(SPLIT_PART(T1.FastestLapTime, ':', 1) AS REAL) * 60) + (CAST(SPLIT_PART(SPLIT_PART(T1.FastestLapTime, ':', 2), '.', 1) AS REAL)) + (CAST(SPLIT_PART(T1.FastestLapTime, '.', 2) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "text_2_sql": "SELECT c.name AS circuit_name, r.name AS race_name, d.forename || ' ' || d.surname AS driver_name, res.fastestlaptime AS lap_record FROM circuits c JOIN races r ON c.circuitid = r.circuitid JOIN results res ON r.raceid = res.raceid JOIN drivers d ON res.driverid = d.driverid WHERE c.country = 'Italy' AND res.fastestlaptime IS NOT NULL AND res.fastestlaptime <> '' ORDER BY res.fastestlaptime ASC LIMIT 1",
    "prompt": "CREATE TABLE circuits ( `lat` REAL NULL, `lng` REAL NULL, `alt` BIGINT NULL, `circuitid` BIGINT NOT NULL, `country` TEXT NULL, `url` TEXT NULL, `circuitref` TEXT NULL, `name` TEXT NULL, `location` TEXT NULL ); CREATE TABLE seasons ( `year` BIGINT NOT NULL, `url` TEXT NULL ); CREATE TABLE races ( `date` DATE NULL, `round` BIGINT NULL, `raceid` BIGINT NOT NULL, `circuitid` BIGINT NULL, `year` BIGINT NULL, `url` TEXT NULL, `name` TEXT NULL, `time` TEXT NULL ); CREATE TABLE constructors ( `constructorid` BIGINT NOT NULL, `constructorref` TEXT NULL, `name` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL ); CREATE TABLE constructorResults ( ); CREATE TABLE constructorStandings ( ); CREATE TABLE drivers ( `dob` DATE NULL, `number` BIGINT NULL, `driverid` BIGINT NOT NULL, `forename` TEXT NULL, `surname` TEXT NULL, `nationality` TEXT NULL, `url` TEXT NULL, `driverref` TEXT NULL, `code` TEXT NULL ); CREATE TABLE driverStandings ( ); CREATE TABLE lapTimes ( ); CREATE TABLE pitStops ( ); CREATE TABLE qualifying ( `qualifyid` BIGINT NOT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `position` BIGINT NULL, `q1` TEXT NULL, `q2` TEXT NULL, `q3` TEXT NULL ); CREATE TABLE status ( `statusid` BIGINT NOT NULL, `status` TEXT NULL ); CREATE TABLE results ( `statusid` BIGINT NULL, `raceid` BIGINT NULL, `driverid` BIGINT NULL, `constructorid` BIGINT NULL, `number` BIGINT NULL, `grid` BIGINT NULL, `position` BIGINT NULL, `milliseconds` BIGINT NULL, `fastestlap` BIGINT NULL, `rank` BIGINT NULL, `resultid` BIGINT NOT NULL, `positionorder` BIGINT NULL, `points` REAL NULL, `laps` BIGINT NULL, `positiontext` TEXT NULL, `time` TEXT NULL, `fastestlapspeed` TEXT NULL, `fastestlaptime` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the lap records for the circuits in Italy. -- External Knowledge: {'Italy': {'column_name': 'country', 'table_name': 'circuits'}, 'circuits': {'column_name': 'circuitId', 'table_name': 'circuits'}, 'lap': {'column_name': 'lap', 'table_name': 'lapTimes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 719,
    "db_id": "superhero",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "true_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) AS superhero_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? -- External Knowledge: {'super': {'column_name': 'power_name', 'table_name': 'superpower'}, 'Super': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 723,
    "db_id": "superhero",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "true_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'blue' AND sp.power_name = 'Agility'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"? -- External Knowledge: {'blue': {'column_name': 'colour', 'table_name': 'colour'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Agility': {'column_name': 'power_name', 'table_name': 'superpower'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'power': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 724,
    "db_id": "superhero",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN colour eye_color ON s.eye_colour_id = eye_color.id JOIN colour hair_color ON s.hair_colour_id = hair_color.id WHERE eye_color.colour = 'blue' AND hair_color.colour = 'blond';",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the superhero names of all the superheroes that have blue eyes and blond hair. -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'blue': {'column_name': 'colour', 'table_name': 'colour'}, 'blond': {'column_name': 'colour', 'table_name': 'colour'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'hair': {'column_name': 'hair_colour_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 726,
    "db_id": "superhero",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "true_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC NULLS LAST) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "text_2_sql": "SELECT s.superhero_name, s.height_cm FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Rank heroes published by Marvel Comics by their height in descending order. -- External Knowledge: {'height': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Marvel': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'published': {'column_name': 'publisher_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 728,
    "db_id": "superhero",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "true_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC NULLS LAST) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "text_2_sql": "SELECT c.colour AS eye_color, COUNT(*) AS hero_count FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' GROUP BY c.colour ORDER BY hero_count DESC, eye_color ASC",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. -- External Knowledge: {'color': {'column_name': 'colour', 'table_name': 'colour'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 730,
    "db_id": "superhero",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "true_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS(SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id) AND EXISTS(SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the superheroes from Marvel Comics who have the super power of 'Super Strength'. -- External Knowledge: {'super': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 732,
    "db_id": "superhero",
    "question": "Which publisher published the slowest superhero?",
    "true_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT p.publisher_name, s.superhero_name, ha.attribute_value AS speed FROM publisher p JOIN superhero s ON p.id = s.publisher_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which publisher published the slowest superhero? -- External Knowledge: {'publisher': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 733,
    "db_id": "superhero",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "true_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) AS gold_eyed_marvel_heroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE p.publisher_name = 'Marvel Comics' AND c.colour = 'gold'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many gold-eyed superheroes did Marvel Comics publish? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Marvel': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'publish': {'column_name': 'publisher_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 736,
    "db_id": "superhero",
    "question": "Who is the dumbest superhero?",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who is the dumbest superhero? -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 737,
    "db_id": "superhero",
    "question": "What is Copycat's race?",
    "true_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "text_2_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is Copycat's race? -- External Knowledge: {'Copycat': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 738,
    "db_id": "superhero",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "true_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS(SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which superheroes have a durability attribute value of less than 50? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'attribute': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'durability': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'value': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}, '50': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 739,
    "db_id": "superhero",
    "question": "What are the names of the superheroes with the power of death touch?",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the names of the superheroes with the power of death touch? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'power': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 740,
    "db_id": "superhero",
    "question": "How many female superheroes have a strength value of 100?",
    "true_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many female superheroes have a strength value of 100? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'female': {'column_name': 'gender', 'table_name': 'gender'}, 'value': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}, 'strength': {'column_name': 'attribute_name', 'table_name': 'attribute'}, '100': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 743,
    "db_id": "superhero",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "true_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / NULLIF((SELECT COUNT(*) FROM superhero), 0)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN a.alignment = 'Neutral' THEN 1 END) * 100.0 / COUNT(*), 2) AS neutral_percentage, COUNT(CASE WHEN a.alignment = 'Neutral' AND p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_neutral_count FROM superhero s JOIN alignment a ON s.alignment_id = a.id LEFT JOIN publisher p ON s.publisher_id = p.id",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'own': {'column_name': 'alignment', 'table_name': 'alignment'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 744,
    "db_id": "superhero",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "true_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "text_2_sql": "SELECT CASE WHEN dc_count > marvel_count THEN 'DC' ELSE 'Marvel Comics' END AS publisher_with_more_superheroes, ABS(dc_count - marvel_count) AS difference FROM ( SELECT COUNT(CASE WHEN p.publisher_name = 'DC' THEN 1 END) AS dc_count, COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name IN ('DC', 'Marvel Comics') ) subquery",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. -- External Knowledge: {'DC': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'published': {'column_name': 'publisher_id', 'table_name': 'superhero'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 745,
    "db_id": "superhero",
    "question": "Give the publisher ID of Star Trek.",
    "true_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "text_2_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the publisher ID of Star Trek. -- External Knowledge: {'publisher': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'Star Trek': {'column_name': 'publisher_name', 'table_name': 'publisher'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 747,
    "db_id": "superhero",
    "question": "What is the total number of superheroes without full name?",
    "true_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "text_2_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the total number of superheroes without full name? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'full': {'column_name': 'full_name', 'table_name': 'superhero'}, 'total': {'column_name': 'id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 750,
    "db_id": "superhero",
    "question": "What is the average weight of all female superheroes?",
    "true_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "text_2_sql": "SELECT AVG(s.weight_kg) FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average weight of all female superheroes? -- External Knowledge: {'female': {'column_name': 'gender', 'table_name': 'gender'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'weight': {'column_name': 'weight_kg', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 751,
    "db_id": "superhero",
    "question": "List down at least five superpowers of male superheroes.",
    "true_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "text_2_sql": "SELECT DISTINCT sp.power_name FROM superhero sh JOIN gender g ON sh.gender_id = g.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List down at least five superpowers of male superheroes. -- External Knowledge: {'male': {'column_name': 'gender', 'table_name': 'gender'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'superpowers': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 753,
    "db_id": "superhero",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "true_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s LEFT JOIN colour c ON s.eye_colour_id = c.id WHERE s.height_cm BETWEEN 170 AND 190 AND s.eye_colour_id IS NULL;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color. -- External Knowledge: {'height': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'color': {'column_name': 'colour', 'table_name': 'colour'}, '170': {'column_name': 'height_cm', 'table_name': 'superhero'}, '190': {'column_name': 'height_cm', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 758,
    "db_id": "superhero",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "true_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "text_2_sql": "SELECT c.colour FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE r.race = 'Human' AND s.height_cm = 185",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the hair colour of the human superhero who is 185 cm tall. -- External Knowledge: {'colour': {'column_name': 'colour', 'table_name': 'colour'}, '185': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'cm': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'human': {'column_name': 'race', 'table_name': 'race'}, 'hair': {'column_name': 'hair_colour_id', 'table_name': 'superhero'}, 'tall': {'column_name': 'height_cm', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 760,
    "db_id": "superhero",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*), 2) AS marvel_percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.height_cm BETWEEN 150 AND 180",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics? -- External Knowledge: {'height': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Marvel Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'published': {'column_name': 'publisher_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 761,
    "db_id": "superhero",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > (SELECT AVG(weight_kg) FROM superhero) * 79",
    "text_2_sql": "SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > ( SELECT PERCENTILE_CONT(0.79) WITHIN GROUP (ORDER BY weight_kg) FROM superhero WHERE weight_kg IS NOT NULL ) AND s.weight_kg IS NOT NULL ORDER BY s.superhero_name;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'weight': {'column_name': 'weight_kg', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 764,
    "db_id": "superhero",
    "question": "What are the superpowers of heroes with ID 1?",
    "true_sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "text_2_sql": "SELECT s.power_name FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower s ON hp.power_id = s.id WHERE h.id = 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the superpowers of heroes with ID 1? -- External Knowledge: {'ID': {'column_name': 'id', 'table_name': 'superhero'}, 'superpowers': {'column_name': 'power_name', 'table_name': 'superpower'}, 'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 765,
    "db_id": "superhero",
    "question": "How many heroes have stealth power?",
    "true_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "text_2_sql": "SELECT COUNT(DISTINCT hero_power.hero_id) AS heroes_with_stealth FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many heroes have stealth power? -- External Knowledge: {'stealth': {'column_name': 'power_name', 'table_name': 'superpower'}, 'power': {'column_name': 'power_name', 'table_name': 'superpower'}, 'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 766,
    "db_id": "superhero",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "true_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the hero's full name with the highest attribute in strength? -- External Knowledge: {'full': {'column_name': 'full_name', 'table_name': 'superhero'}, 'hero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'attribute': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'strength': {'column_name': 'attribute_name', 'table_name': 'attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 769,
    "db_id": "superhero",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE p.publisher_name = 'Dark Horse Comics' AND a.attribute_name = 'Durability' ORDER BY ha.attribute_value DESC LIMIT 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which superhero has the most durability published by Dark Horse Comics? -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'durability': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'Dark Horse Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 772,
    "db_id": "superhero",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "true_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name, eye.colour AS eye_colour, hair.colour AS hair_colour, skin.colour AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id JOIN colour eye ON s.eye_colour_id = eye.id JOIN colour hair ON s.hair_colour_id = hair.id JOIN colour skin ON s.skin_colour_id = skin.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. -- External Knowledge: {'colour': {'column_name': 'colour', 'table_name': 'colour'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'female': {'column_name': 'gender', 'table_name': 'gender'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'skin': {'column_name': 'skin_colour_id', 'table_name': 'superhero'}, 'published': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'hair': {'column_name': 'hair_colour_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 773,
    "db_id": "superhero",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "true_sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "text_2_sql": "SELECT DISTINCT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.eye_colour_id = s.hair_colour_id AND s.eye_colour_id = s.skin_colour_id AND s.hair_colour_id = s.skin_colour_id;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'skin': {'column_name': 'skin_colour_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 775,
    "db_id": "superhero",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_blue_female_superheroes FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.eye_colour_id = c.id WHERE g.gender = 'Female'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of blue female superheroes among all female superheroes? -- External Knowledge: {'female': {'column_name': 'gender', 'table_name': 'gender'}, 'blue': {'column_name': 'colour', 'table_name': 'colour'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 779,
    "db_id": "superhero",
    "question": "How many powers does Amazo hero have?",
    "true_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "text_2_sql": "SELECT COUNT(DISTINCT hp.power_id) AS power_count FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id WHERE sh.superhero_name = 'Amazo'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many powers does Amazo hero have? -- External Knowledge: {'powers': {'column_name': 'power_name', 'table_name': 'superpower'}, 'hero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Amazo': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 781,
    "db_id": "superhero",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "true_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "text_2_sql": "SELECT s.superhero_name, s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'amber'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the heights of the heroes whose eye colours are amber. -- External Knowledge: {'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'eye': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'colours': {'column_name': 'colour', 'table_name': 'colour'}, 'heights': {'column_name': 'height_cm', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 782,
    "db_id": "superhero",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN colour ec ON s.eye_colour_id = ec.id JOIN colour hc ON s.hair_colour_id = hc.id WHERE ec.colour = 'Black' AND hc.colour = 'Black';",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the heroes' names whose eyes and hair colours are both black. -- External Knowledge: {'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'hair': {'column_name': 'hair_colour_id', 'table_name': 'superhero'}, 'colours': {'column_name': 'colour', 'table_name': 'colour'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 785,
    "db_id": "superhero",
    "question": "Describe the names of neutral alignment superheroes.",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'neutral' ORDER BY s.superhero_name;",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Describe the names of neutral alignment superheroes. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'alignment': {'column_name': 'alignment', 'table_name': 'alignment'}, 'neutral': {'column_name': 'alignment', 'table_name': 'alignment'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 786,
    "db_id": "superhero",
    "question": "How many heroes have the highest attribute value in strength?",
    "true_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)",
    "text_2_sql": "SELECT COUNT(DISTINCT ha.hero_id) AS hero_count FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' AND ha.attribute_value = ( SELECT MAX(ha2.attribute_value) FROM hero_attribute ha2 JOIN attribute a2 ON ha2.attribute_id = a2.id WHERE a2.attribute_name = 'strength' )",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many heroes have the highest attribute value in strength? -- External Knowledge: {'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'attribute': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'value': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}, 'strength': {'column_name': 'attribute_name', 'table_name': 'attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 788,
    "db_id": "superhero",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many percent of female heroes were published by Marvel Comics? -- External Knowledge: {'female': {'column_name': 'gender', 'table_name': 'gender'}, 'heroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Marvel Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'published': {'column_name': 'publisher_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 790,
    "db_id": "superhero",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "true_sql": "SELECT (SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler') AS CALCULATE",
    "text_2_sql": "SELECT ABS(b.weight_kg - c.weight_kg) AS weight_difference FROM superhero b JOIN superhero c ON b.id != c.id WHERE b.full_name LIKE '%Emil%Blonsky%' AND c.full_name LIKE '%Charles%Chandler%'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight. -- External Knowledge: {'Blonsky': {'column_name': 'full_name', 'table_name': 'superhero'}, 'Chandler': {'column_name': 'full_name', 'table_name': 'superhero'}, 'Emil': {'column_name': 'full_name', 'table_name': 'superhero'}, 'Charles': {'column_name': 'full_name', 'table_name': 'superhero'}, 'weight': {'column_name': 'weight_kg', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 791,
    "db_id": "superhero",
    "question": "Calculate the average height for all superhero.",
    "true_sql": "SELECT CAST(SUM(height_cm) AS REAL) / NULLIF(COUNT(id), 0) FROM superhero",
    "text_2_sql": "SELECT AVG(height_cm) AS average_height FROM superhero WHERE height_cm IS NOT NULL",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average height for all superhero. -- External Knowledge: {'height': {'column_name': 'height_cm', 'table_name': 'superhero'}, 'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 792,
    "db_id": "superhero",
    "question": "What is Abomination's superpower?",
    "true_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "text_2_sql": "SELECT DISTINCT s.power_name FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower s ON hp.power_id = s.id WHERE h.superhero_name = 'Abomination'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is Abomination's superpower? -- External Knowledge: {'Abomination': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'superpower': {'column_name': 'power_name', 'table_name': 'superpower'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 794,
    "db_id": "superhero",
    "question": "Which hero was the fastest?",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT s.superhero_name, ha.attribute_value AS speed FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which hero was the fastest? -- External Knowledge: {'hero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'fastest': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 796,
    "db_id": "superhero",
    "question": "State all of 3-D Man's attributes along with their values.",
    "true_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "text_2_sql": "SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State all of 3-D Man's attributes along with their values. -- External Knowledge: {'Man': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'attributes': {'column_name': 'attribute_name', 'table_name': 'attribute'}, 'values': {'column_name': 'attribute_value', 'table_name': 'hero_attribute'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 797,
    "db_id": "superhero",
    "question": "Which superheroes have blue eyes with brown hair?",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN colour eye_color ON s.eye_colour_id = eye_color.id JOIN colour hair_color ON s.hair_colour_id = hair_color.id WHERE eye_color.colour = 'blue' AND hair_color.colour = 'brown'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which superheroes have blue eyes with brown hair? -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'blue': {'column_name': 'colour', 'table_name': 'colour'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'brown': {'column_name': 'colour', 'table_name': 'colour'}, 'hair': {'column_name': 'hair_colour_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 798,
    "db_id": "superhero",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "true_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "text_2_sql": "SELECT DISTINCT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the publisher for Hawkman, Karate Kid and Speedy? -- External Knowledge: {'Hawkman': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Speedy': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'Karate Kid': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'publisher': {'column_name': 'publisher_name', 'table_name': 'publisher'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 800,
    "db_id": "superhero",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_blue_eyes FROM superhero s LEFT JOIN colour c ON s.eye_colour_id = c.id",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage of superheroes with blue eyes. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'blue': {'column_name': 'colour', 'table_name': 'colour'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'percentage': {'column_name': 'id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 801,
    "db_id": "superhero",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / NULLIF(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END), 0) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "text_2_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN g.gender = 'Male' THEN 1 END) AS NUMERIC) / NULLIF(COUNT(CASE WHEN g.gender = 'Female' THEN 1 END), 0), 2) AS male_to_female_ratio FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender IN ('Male', 'Female')",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find the ratio between male superheroes and female superheroes. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'ratio': {'column_name': 'gender', 'table_name': 'gender'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 806,
    "db_id": "superhero",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "true_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "text_2_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name. -- External Knowledge: {'colour': {'column_name': 'colour', 'table_name': 'colour'}, 'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'full': {'column_name': 'full_name', 'table_name': 'superhero'}, 'eye': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 819,
    "db_id": "superhero",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "true_sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL",
    "text_2_sql": "SELECT COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) - COUNT(CASE WHEN s.eye_colour_id IS NULL THEN 1 END) AS difference FROM superhero s LEFT JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg IS NULL",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'weight': {'column_name': 'weight_kg', 'table_name': 'superhero'}, 'eye': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'eyes': {'column_name': 'eye_colour_id', 'table_name': 'superhero'}, 'data': {'column_name': 'weight_kg', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 822,
    "db_id": "superhero",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "true_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) AS green_skinned_villains FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN alignment a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'bad'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many green-skinned villains are there in the superhero universe? -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'villains': {'column_name': 'alignment', 'table_name': 'alignment'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 824,
    "db_id": "superhero",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "true_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name NULLS FIRST",
    "text_2_sql": "SELECT DISTINCT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name ILIKE '%wind%' OR sp.power_name ILIKE '%air%' ORDER BY s.superhero_name ASC",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Identify superheroes who can control wind and list their names in alphabetical order. -- External Knowledge: {'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'control': {'column_name': 'power_name', 'table_name': 'superpower'}, 'wind': {'column_name': 'power_name', 'table_name': 'superpower'}, 'alphabetical': {'column_name': 'superhero_name', 'table_name': 'superhero'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 825,
    "db_id": "superhero",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "true_sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "text_2_sql": "SELECT DISTINCT g.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force'",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Identify the gender of the superhero who has the ability of Phoenix Force. -- External Knowledge: {'superhero': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'ability': {'column_name': 'power_name', 'table_name': 'superpower'}, 'Phoenix Force': {'column_name': 'power_name', 'table_name': 'superpower'}, 'gender': {'column_name': 'gender', 'table_name': 'gender'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 829,
    "db_id": "superhero",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "true_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "text_2_sql": "SELECT CASE WHEN dc_count > marvel_count THEN 'DC' ELSE 'Marvel Comics' END AS publisher_with_more_heroes, ABS(dc_count - marvel_count) AS difference FROM ( SELECT COUNT(CASE WHEN p.publisher_name = 'DC' THEN 1 END) AS dc_count, COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name IN ('DC', 'Marvel Comics') ) subquery",
    "prompt": "CREATE TABLE alignment ( `id` BIGINT NOT NULL, `alignment` TEXT NULL ); CREATE TABLE attribute ( `id` BIGINT NOT NULL, `attribute_name` TEXT NULL ); CREATE TABLE colour ( `id` BIGINT NOT NULL, `colour` TEXT NULL ); CREATE TABLE gender ( `id` BIGINT NOT NULL, `gender` TEXT NULL ); CREATE TABLE publisher ( `id` BIGINT NOT NULL, `publisher_name` TEXT NULL ); CREATE TABLE race ( `id` BIGINT NOT NULL, `race` TEXT NULL ); CREATE TABLE superpower ( `id` BIGINT NOT NULL, `power_name` TEXT NULL ); CREATE TABLE superhero ( `weight_kg` BIGINT NULL, `height_cm` BIGINT NULL, `id` BIGINT NOT NULL, `gender_id` BIGINT NULL, `eye_colour_id` BIGINT NULL, `hair_colour_id` BIGINT NULL, `skin_colour_id` BIGINT NULL, `race_id` BIGINT NULL, `publisher_id` BIGINT NULL, `alignment_id` BIGINT NULL, `superhero_name` TEXT NULL, `full_name` TEXT NULL ); CREATE TABLE hero_attribute ( `hero_id` BIGINT NULL, `attribute_id` BIGINT NULL, `attribute_value` BIGINT NULL ); CREATE TABLE hero_power ( `hero_id` BIGINT NULL, `power_id` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. -- External Knowledge: {'publisher': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'superheroes': {'column_name': 'superhero_name', 'table_name': 'superhero'}, 'DC': {'column_name': 'publisher_name', 'table_name': 'publisher'}, 'Marvel Comics': {'column_name': 'publisher_name', 'table_name': 'publisher'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 531,
    "db_id": "codebase_community",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "true_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = (SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon'))",
    "text_2_sql": "SELECT u1.displayname, u1.reputation AS harlan_reputation, u2.reputation AS jarrod_dixon_reputation FROM users u1 CROSS JOIN users u2 WHERE u1.displayname = 'Harlan' AND u2.displayname = 'Jarrod Dixon' ORDER BY CASE WHEN u1.reputation > u2.reputation THEN u1.reputation ELSE u2.reputation END DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which user has a higher reputation, Harlan or Jarrod Dixon? -- External Knowledge: {'reputation': {'column_name': 'Reputation', 'table_name': 'users'}, 'Harlan': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Jarrod': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Dixon': {'column_name': 'DisplayName', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 532,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "true_sql": "SELECT DisplayName FROM users WHERE TO_CHAR(CAST(CreationDate AS TIMESTAMP), 'YYYY') = '2011'",
    "text_2_sql": "SELECT DisplayName FROM users WHERE EXTRACT(YEAR FROM CreationDate) = 2011",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the display names of all the users whose accounts were created in the year 2011. -- External Knowledge: {'users': {'column_name': 'Id', 'table_name': 'users'}, 'display': {'column_name': 'DisplayName', 'table_name': 'users'}, 'accounts': {'column_name': 'Id', 'table_name': 'users'}, 'created': {'column_name': 'CreationDate', 'table_name': 'users'}, '2011': {'column_name': 'CreationDate', 'table_name': 'users'}, 'year': {'column_name': 'CreationDate', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 533,
    "db_id": "codebase_community",
    "question": "How many users last accessed the website after 2014/9/1?",
    "true_sql": "SELECT COUNT(Id) FROM users WHERE DATE(LastAccessDate) > '2014-09-01'",
    "text_2_sql": "SELECT COUNT(*) FROM users WHERE lastaccessdate > '2014-09-01'::timestamp with time zone",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many users last accessed the website after 2014/9/1? -- External Knowledge: {'accessed': {'column_name': 'LastAccessDate', 'table_name': 'users'}, 'last': {'column_name': 'LastAccessDate', 'table_name': 'users'}, 'website': {'column_name': 'WebsiteUrl', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 539,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "true_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "text_2_sql": "SELECT u.displayname FROM posts p JOIN users u ON p.owneruserid = u.id WHERE p.title = 'Eliciting priors from experts';",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who is the owner of the post \"Eliciting priors from experts\"? -- External Knowledge: {'owner': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'Eliciting': {'column_name': 'Title', 'table_name': 'posts'}, 'priors': {'column_name': 'Title', 'table_name': 'posts'}, 'experts': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 537,
    "db_id": "codebase_community",
    "question": "How many posts does the user csgillespie own?",
    "true_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "text_2_sql": "SELECT COUNT(*) FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'csgillespie'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many posts does the user csgillespie own? -- External Knowledge: {'csgillespie': {'column_name': 'DisplayName', 'table_name': 'users'}, 'own': {'column_name': 'OwnerUserId', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 544,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "true_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "text_2_sql": "SELECT p.LastEditorDisplayName FROM posts p WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY p.LastEditDate DESC LIMIT 1;",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"? -- External Knowledge: {'edited': {'column_name': 'LastEditDate', 'table_name': 'posts'}, 'last': {'column_name': 'LastEditDate', 'table_name': 'posts'}, 'display': {'column_name': 'LastEditorDisplayName', 'table_name': 'posts'}, 'Title': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 547,
    "db_id": "codebase_community",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "true_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "text_2_sql": "SELECT COUNT(*) FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.age >= 60 AND p.score > 19",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the posts owned by an elder user, how many of them have a score of over 19? -- External Knowledge: {'owned': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'user': {'column_name': 'Id', 'table_name': 'users'}, 'score': {'column_name': 'Score', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 549,
    "db_id": "codebase_community",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "true_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "text_2_sql": "SELECT p.body FROM tags t JOIN posts p ON t.excerptpostid = p.id WHERE t.tagname = 'bayesian'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- From which post is the tag \"bayesian\" excerpted from? Please give the body of the post. -- External Knowledge: {'bayesian': {'column_name': 'TagName', 'table_name': 'tags'}, 'post': {'column_name': 'Id', 'table_name': 'posts'}, 'tag': {'column_name': 'TagName', 'table_name': 'tags'}, 'body': {'column_name': 'Body', 'table_name': 'posts'}, 'excerpted': {'column_name': 'ExcerptPostId', 'table_name': 'tags'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 555,
    "db_id": "codebase_community",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "true_sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "text_2_sql": "SELECT AVG(p.score) AS average_score FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'csgillespie'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average score of the posts owned by the user csgillespie? -- External Knowledge: {'csgillespie': {'column_name': 'DisplayName', 'table_name': 'users'}, 'score': {'column_name': 'Score', 'table_name': 'posts'}, 'user': {'column_name': 'OwnerUserId', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "text_2_sql": "WITH elder_users AS ( SELECT id FROM users WHERE age >= 60 ), high_score_posts AS ( SELECT id, owneruserid FROM posts WHERE score > 5 ), elder_owned_posts AS ( SELECT COUNT(*) AS elder_owned_count FROM high_score_posts h JOIN elder_users e ON h.owneruserid = e.id ) SELECT ROUND( (elder_owned_count::FLOAT / NULLIF(COUNT(h.id), 0)) * 100, 2 ) AS percentage_elder_owned FROM high_score_posts h CROSS JOIN elder_owned_posts e",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the posts with a score of over 5, what is the percentage of them being owned by an elder user? -- External Knowledge: {'score': {'column_name': 'Score', 'table_name': 'posts'}, 'owned': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'user': {'column_name': 'Id', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "text_2_sql": "WITH elder_users AS ( SELECT id FROM users WHERE age >= 60 ), high_score_posts AS ( SELECT id, owneruserid FROM posts WHERE score > 5 ), elder_owned_posts AS ( SELECT COUNT(*) AS elder_owned_count FROM high_score_posts h JOIN elder_users e ON h.owneruserid = e.id ) SELECT ROUND( (elder_owned_count::float / NULLIF(COUNT(h.id), 0)) * 100, 2 ) AS percentage_elder_owned FROM high_score_posts h CROSS JOIN elder_owned_posts",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the posts with a score of over 5, what is the percentage of them being owned by an elder user? -- External Knowledge: {'score': {'column_name': 'Score', 'table_name': 'posts'}, 'owned': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'user': {'column_name': 'Id', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "text_2_sql": "WITH elder_users AS ( SELECT id FROM users WHERE age >= 60 ), high_score_posts AS ( SELECT id, owneruserid FROM posts WHERE score > 5 ), elder_owned_posts AS ( SELECT COUNT(*) AS elder_owned_count FROM high_score_posts h JOIN elder_users e ON h.owneruserid = e.id ) SELECT ROUND( (elder_owned_count::FLOAT / NULLIF(COUNT(h.id), 0)) * 100, 2 ) AS percentage_elder_owned FROM high_score_posts h CROSS JOIN elder_owned_posts e",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the posts with a score of over 5, what is the percentage of them being owned by an elder user? -- External Knowledge: {'score': {'column_name': 'Score', 'table_name': 'posts'}, 'owned': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'user': {'column_name': 'Id', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 563,
    "db_id": "codebase_community",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "true_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "text_2_sql": "SELECT p.favoritecount FROM comments c JOIN posts p ON c.postid = p.id WHERE c.userid = 3025 AND c.creationdate = '2014-04-23 20:29:39'::timestamp with time zone",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get? -- External Knowledge: {'comment': {'column_name': 'Text', 'table_name': 'comments'}, 'post': {'column_name': 'PostId', 'table_name': 'comments'}, 'favorite': {'column_name': 'FavoriteCount', 'table_name': 'posts'}, 'counts': {'column_name': 'FavoriteCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 565,
    "db_id": "codebase_community",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "true_sql": "SELECT CASE WHEN T2.ClosedDate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "text_2_sql": "SELECT p.score, p.answercount, p.commentcount, p.favoritecount FROM posts p JOIN comments c ON p.id = c.postid WHERE c.userid = 23853 AND c.creationdate = '2013-07-12 09:08:18'::timestamp with time zone",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished? -- External Knowledge: {'post': {'column_name': 'PostId', 'table_name': 'comments'}, 'comment': {'column_name': 'Text', 'table_name': 'comments'}, 'gave': {'column_name': 'CreationDate', 'table_name': 'comments'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 567,
    "db_id": "codebase_community",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "true_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "text_2_sql": "SELECT COUNT(*) AS post_count FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Tiago Pasqualini'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own? -- External Knowledge: {'display': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Tiago': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Pasqualini': {'column_name': 'DisplayName', 'table_name': 'users'}, 'own': {'column_name': 'OwnerUserId', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 568,
    "db_id": "codebase_community",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "true_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "text_2_sql": "SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347;",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the display name of the user who made the vote No.6347. -- External Knowledge: {'user': {'column_name': 'UserId', 'table_name': 'votes'}, 'display': {'column_name': 'DisplayName', 'table_name': 'users'}, 'vote': {'column_name': 'Id', 'table_name': 'votes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 571,
    "db_id": "codebase_community",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / NULLIF(COUNT(DISTINCT T1.Id), 0) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "text_2_sql": "SELECT CASE WHEN COUNT(DISTINCT p.id) = 0 THEN NULL ELSE CAST(COUNT(DISTINCT v.id) AS FLOAT) / COUNT(DISTINCT p.id) END AS vote_to_post_ratio FROM users u LEFT JOIN posts p ON u.id = p.owneruserid LEFT JOIN votes v ON u.id = v.userid WHERE u.id = 24",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the user No.24, how many times is the number of his/her posts compared to his/her votes? -- External Knowledge: {'votes': {'column_name': 'Id', 'table_name': 'votes'}, 'user': {'column_name': 'Id', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 572,
    "db_id": "codebase_community",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "true_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "text_2_sql": "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get? -- External Knowledge: {'views': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'titled': {'column_name': 'Title', 'table_name': 'posts'}, 'Informatica': {'column_name': 'Title', 'table_name': 'posts'}, 'Weka': {'column_name': 'Title', 'table_name': 'posts'}, 'RapidMiner': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 573,
    "db_id": "codebase_community",
    "question": "Write the contents of comments with a score of 17.",
    "true_sql": "SELECT Text FROM comments WHERE Score = 17",
    "text_2_sql": "SELECT text FROM comments WHERE score = 17;",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Write the contents of comments with a score of 17. -- External Knowledge: {'comments': {'column_name': 'Text', 'table_name': 'comments'}, 'score': {'column_name': 'Score', 'table_name': 'comments'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 576,
    "db_id": "codebase_community",
    "question": "Name the user that commented 'thank you user93!'",
    "true_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "text_2_sql": "SELECT UserDisplayName FROM comments WHERE Text LIKE 'thank you user93!'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the user that commented 'thank you user93!' -- External Knowledge: {'user93': {'column_name': 'UserDisplayName', 'table_name': 'comments'}, 'commented': {'column_name': 'Text', 'table_name': 'comments'}, 'you': {'column_name': 'Text', 'table_name': 'comments'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 578,
    "db_id": "codebase_community",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "true_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "text_2_sql": "SELECT u.id AS user_id, u.reputation FROM users u JOIN posts p ON u.id = p.owneruserid WHERE p.title = 'Understanding what Dassault iSight is doing?'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user? -- External Knowledge: {'reputation': {'column_name': 'Reputation', 'table_name': 'users'}, 'titled': {'column_name': 'Title', 'table_name': 'posts'}, 'user': {'column_name': 'Id', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 581,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "true_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "text_2_sql": "SELECT u.displayname FROM posts p JOIN users u ON p.owneruserid = u.id WHERE p.title = 'Open source tools for visualizing multi-dimensional data?'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?' -- External Knowledge: {'owner': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'titled': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 584,
    "db_id": "codebase_community",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "true_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "text_2_sql": "SELECT c.text FROM comments c JOIN posts p ON c.postid = p.id JOIN users u ON c.userid = u.id WHERE p.title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.lasteditdate IS NOT NULL AND u.id IN ( SELECT lasteditoruserid FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND lasteditdate IS NOT NULL )",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?' -- External Knowledge: {'comments': {'column_name': 'Text', 'table_name': 'comments'}, 'edited': {'column_name': 'LastEditDate', 'table_name': 'posts'}, 'titled': {'column_name': 'Title', 'table_name': 'posts'}, 'standard': {'column_name': 'Title', 'table_name': 'posts'}, 'deviation': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 586,
    "db_id": "codebase_community",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "true_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "text_2_sql": "SELECT u.displayname FROM users u JOIN votes v ON u.id = v.userid JOIN posts p ON v.postid = p.id WHERE v.bountyamount = 50 AND p.title ILIKE '%variance%' AND v.votetypeid = 8 ORDER BY v.creationdate DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which user added a bounty amount of 50 to the post title mentioning variance? -- External Knowledge: {'bounty': {'column_name': 'BountyAmount', 'table_name': 'votes'}, 'amount': {'column_name': 'BountyAmount', 'table_name': 'votes'}, 'title': {'column_name': 'Title', 'table_name': 'posts'}, 'added': {'column_name': 'CreationDate', 'table_name': 'votes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 587,
    "db_id": "codebase_community",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "true_sql": "SELECT AVG(T2.ViewCount) AS AverageViewCount, T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text",
    "text_2_sql": "SELECT p.title, c.text AS comment, AVG(p.viewcount) OVER () AS avg_view_count FROM posts p LEFT JOIN comments c ON p.id = c.postid WHERE p.tags LIKE '%humor%' GROUP BY p.id, p.title, c.text, p.viewcount",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post. -- External Knowledge: {'tagged': {'column_name': 'Tags', 'table_name': 'posts'}, 'comment': {'column_name': 'Text', 'table_name': 'comments'}, 'post': {'column_name': 'Id', 'table_name': 'posts'}, 'count': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'title': {'column_name': 'Title', 'table_name': 'posts'}, 'view': {'column_name': 'ViewCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 592,
    "db_id": "codebase_community",
    "question": "How many users are awarded with more than 5 badges?",
    "true_sql": "SELECT COUNT(UserId) FROM (SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId) AS T WHERE T.num > 5",
    "text_2_sql": "SELECT COUNT(DISTINCT UserId) AS users_with_more_than_5_badges FROM ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(DISTINCT Name) > 5 ) subquery",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many users are awarded with more than 5 badges? -- External Knowledge: {'badges': {'column_name': 'Name', 'table_name': 'badges'}, 'awarded': {'column_name': 'UserId', 'table_name': 'badges'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 595,
    "db_id": "codebase_community",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "true_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "text_2_sql": "SELECT u.id, u.displayname FROM users u JOIN posts p ON u.id = p.owneruserid JOIN ( SELECT postid, COUNT(*) as history_count FROM postHistory GROUP BY postid HAVING COUNT(*) = 1 ) ph ON p.id = ph.postid WHERE p.viewcount >= 1000 GROUP BY u.id, u.displayname",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which user have only one post history per post and having at least 1000 views? -- External Knowledge: {'post': {'column_name': 'PostId', 'table_name': 'postHistory'}, 'views': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'history': {'column_name': 'PostHistoryTypeId', 'table_name': 'postHistory'}, '1000': {'column_name': 'ViewCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 598,
    "db_id": "codebase_community",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(Date AS TIMESTAMP), 'YYYY') = '2010' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(Id), 0) - CAST(SUM(CASE WHEN TO_CHAR(CAST(Date AS TIMESTAMP), 'YYYY') = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(Id), 0) FROM badges WHERE Name = 'Student'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN EXTRACT(YEAR FROM date) = 2011 THEN 1 END) - COUNT(CASE WHEN EXTRACT(YEAR FROM date) = 2010 THEN 1 END))::NUMERIC / NULLIF(COUNT(CASE WHEN EXTRACT(YEAR FROM date) = 2010 THEN 1 END), 0) * 100, 2) AS percentage_difference FROM badges WHERE name = 'Student' AND EXTRACT(YEAR FROM date) IN (2010, 2011)",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage difference of student badges given during 2010 and 2011? -- External Knowledge: {'2010': {'column_name': 'Date', 'table_name': 'badges'}, '2011': {'column_name': 'Date', 'table_name': 'badges'}, 'student': {'column_name': 'Name', 'table_name': 'badges'}, 'badges': {'column_name': 'Name', 'table_name': 'badges'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 604,
    "db_id": "codebase_community",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "true_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN (SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING COUNT(*) > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "text_2_sql": "SELECT AVG(u.upvotes) AS avg_upvotes, AVG(u.age) AS avg_age FROM users u JOIN ( SELECT owneruserid FROM posts GROUP BY owneruserid HAVING COUNT(*) > 10 ) p ON u.id = p.owneruserid",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average of the up votes and the average user age for users creating more than 10 posts? -- External Knowledge: {'votes': {'column_name': 'UpVotes', 'table_name': 'users'}, 'up': {'column_name': 'UpVotes', 'table_name': 'users'}, 'user': {'column_name': 'Id', 'table_name': 'users'}, 'users': {'column_name': 'Id', 'table_name': 'users'}, 'creating': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'average': {'column_name': 'Age', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 629,
    "db_id": "codebase_community",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(CreationDate AS TIMESTAMP), 'YYYY') = '2010' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN TO_CHAR(CAST(CreationDate AS TIMESTAMP), 'YYYY') = '2011' THEN 1 ELSE 0 END), 0) FROM votes",
    "text_2_sql": "SELECT CAST(COUNT(CASE WHEN EXTRACT(YEAR FROM creationdate) = 2010 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN EXTRACT(YEAR FROM creationdate) = 2011 THEN 1 END), 0) AS vote_ratio FROM votes WHERE EXTRACT(YEAR FROM creationdate) IN (2010, 2011)",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the ratio of votes in 2010 and 2011. -- External Knowledge: {'votes': {'column_name': 'VoteTypeId', 'table_name': 'votes'}, '2011': {'column_name': 'CreationDate', 'table_name': 'votes'}, '2010': {'column_name': 'CreationDate', 'table_name': 'votes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 633,
    "db_id": "codebase_community",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "true_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.id AS post_id, p.answercount FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'slashnick' ORDER BY p.answercount DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which post by slashnick has the most answers count? State the post ID. -- External Knowledge: {'post': {'column_name': 'Id', 'table_name': 'posts'}, 'count': {'column_name': 'AnswerCount', 'table_name': 'posts'}, 'answers': {'column_name': 'AnswerCount', 'table_name': 'posts'}, 'slashnick': {'column_name': 'DisplayName', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 634,
    "db_id": "codebase_community",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "true_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT u.displayname, AVG(p.score) AS avg_popularity FROM users u JOIN posts p ON u.id = p.owneruserid WHERE u.displayname IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.displayname ORDER BY avg_popularity DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? -- External Knowledge: {'Noah': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Harvey': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Snyder': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Motulsky': {'column_name': 'DisplayName', 'table_name': 'users'}, 'popularity': {'column_name': 'Score', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 637,
    "db_id": "codebase_community",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "true_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "text_2_sql": "SELECT DISTINCT unnest(string_to_array(p.tags, '><')) AS tag FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Mark Meckes' AND p.commentcount = 0 AND p.tags IS NOT NULL",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State all the tags used by Mark Meckes in his posts that doesn't have comments. -- External Knowledge: {'comments': {'column_name': 'CommentCount', 'table_name': 'posts'}, 'Mark': {'column_name': 'DisplayName', 'table_name': 'users'}, 'Meckes': {'column_name': 'DisplayName', 'table_name': 'users'}, 'tags': {'column_name': 'Tags', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN tags LIKE '%<r>%' THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_r_posts FROM posts WHERE ownerdisplayname = 'Community'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on posts posted by Community, calculate the percentage of posts that use the R language. -- External Knowledge: {'Community': {'column_name': 'OwnerDisplayName', 'table_name': 'posts'}, 'posts': {'column_name': 'Id', 'table_name': 'posts'}, 'language': {'column_name': 'Tags', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN tags LIKE '%<r>%' THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_r_posts FROM posts WHERE ownerdisplayname = 'Community'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on posts posted by Community, calculate the percentage of posts that use the R language. -- External Knowledge: {'Community': {'column_name': 'OwnerDisplayName', 'table_name': 'posts'}, 'posts': {'column_name': 'Id', 'table_name': 'posts'}, 'language': {'column_name': 'Tags', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN tags LIKE '%<r>%' THEN 1 END) * 100.0) / COUNT(*), 2) AS percentage_r_posts FROM posts WHERE ownerdisplayname = 'Community'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Based on posts posted by Community, calculate the percentage of posts that use the R language. -- External Knowledge: {'Community': {'column_name': 'OwnerDisplayName', 'table_name': 'posts'}, 'posts': {'column_name': 'Id', 'table_name': 'posts'}, 'language': {'column_name': 'Tags', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 640,
    "db_id": "codebase_community",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "true_sql": "SELECT SUM(CASE WHEN T1.DisplayName = 'Mornington' THEN T3.ViewCount ELSE 0 END) - SUM(CASE WHEN T1.DisplayName = 'Amos' THEN T3.ViewCount ELSE 0 END) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "text_2_sql": "SELECT SUM(CASE WHEN p.ownerdisplayname = 'Mornington' THEN p.viewcount ELSE 0 END) - SUM(CASE WHEN p.ownerdisplayname = 'Amos' THEN p.viewcount ELSE 0 END) AS view_count_difference FROM posts p",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos. -- External Knowledge: {'post': {'column_name': 'Id', 'table_name': 'posts'}, 'posts': {'column_name': 'Id', 'table_name': 'posts'}, 'count': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}, 'view': {'column_name': 'ViewCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 665,
    "db_id": "codebase_community",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "true_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / NULLIF(12, 0) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND TO_CHAR(CAST(T1.CreationDate AS TIMESTAMP), 'YYYY') = '2010'",
    "text_2_sql": "SELECT AVG(monthly_count) as avg_monthly_links FROM ( SELECT DATE_TRUNC('month', pl.CreationDate) as month, COUNT(*) as monthly_count FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE EXTRACT(YEAR FROM pl.CreationDate) = 2010 AND (p.AnswerCount <= 2 OR p.AnswerCount IS NULL) GROUP BY DATE_TRUNC('month', pl.CreationDate) ) as monthly_counts",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average monthly number of links created in 2010 for posts that have no more than 2 answers? -- External Knowledge: {'answers': {'column_name': 'AnswerCount', 'table_name': 'posts'}, 'monthly': {'column_name': 'CreationDate', 'table_name': 'postLinks'}, 'links': {'column_name': 'Id', 'table_name': 'postLinks'}, 'created': {'column_name': 'CreationDate', 'table_name': 'postLinks'}, '2010': {'column_name': 'CreationDate', 'table_name': 'postLinks'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 669,
    "db_id": "codebase_community",
    "question": "When did 'chl' cast its first vote in a post?",
    "true_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT MIN(v.creationdate) AS first_vote_date FROM votes v JOIN users u ON v.userid = u.id WHERE u.displayname = 'chl'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- When did 'chl' cast its first vote in a post? -- External Knowledge: {'vote': {'column_name': 'VoteTypeId', 'table_name': 'votes'}, 'cast': {'column_name': 'CreationDate', 'table_name': 'votes'}, 'first': {'column_name': 'CreationDate', 'table_name': 'votes'}, 'When': {'column_name': 'CreationDate', 'table_name': 'votes'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 671,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "true_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.name = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "text_2_sql": "SELECT u.displayname FROM users u JOIN badges b ON u.id = b.userid WHERE b.name = 'Autobiographer' ORDER BY b.date ASC LIMIT 1;",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the display name of the user who acquired the first Autobiographer badge? -- External Knowledge: {'badge': {'column_name': 'Name', 'table_name': 'badges'}, 'display': {'column_name': 'DisplayName', 'table_name': 'users'}, 'acquired': {'column_name': 'Date', 'table_name': 'badges'}, 'Autobiographer': {'column_name': 'Name', 'table_name': 'badges'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 672,
    "db_id": "codebase_community",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "true_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "text_2_sql": "SELECT COUNT(DISTINCT u.id) AS user_count FROM users u JOIN posts p ON u.id = p.owneruserid WHERE u.location = 'United Kingdom' GROUP BY u.id HAVING SUM(COALESCE(p.favoritecount, 0)) >= 4",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more? -- External Knowledge: {'users': {'column_name': 'Id', 'table_name': 'users'}, 'United Kingdom': {'column_name': 'Location', 'table_name': 'users'}, 'favorite': {'column_name': 'FavoriteCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 678,
    "db_id": "codebase_community",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "true_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.id, p.title FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Harvey Motulsky' ORDER BY p.viewcount DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which post by Harvey Motulsky has the most views? Please give the id and title of this post. -- External Knowledge: {'post': {'column_name': 'Id', 'table_name': 'posts'}, 'title': {'column_name': 'Title', 'table_name': 'posts'}, 'views': {'column_name': 'ViewCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 682,
    "db_id": "codebase_community",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "true_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE TO_CHAR(CAST(T1.CreationDate AS TIMESTAMP), 'YYYY') = '2010' ORDER BY T2.FavoriteCount DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.id, COALESCE(p.ownerdisplayname, u.displayname) AS owner_display_name, p.score FROM posts p LEFT JOIN users u ON p.owneruserid = u.id WHERE EXTRACT(YEAR FROM p.creaiondate) = 2010 ORDER BY p.score DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which is the most valuable post in 2010? Please give its id and the owner's display name. -- External Knowledge: {'valuable': {'column_name': 'Score', 'table_name': 'posts'}, '2010': {'column_name': 'CreaionDate', 'table_name': 'posts'}, 'owner': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'display': {'column_name': 'OwnerDisplayName', 'table_name': 'posts'}, 'id': {'column_name': 'Id', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 683,
    "db_id": "codebase_community",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(T2.CreaionDate AS TIMESTAMP), 'YYYY') = '2011' AND T1.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN u.reputation > 1000 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM posts p JOIN users u ON p.owneruserid = u.id WHERE EXTRACT(YEAR FROM p.creaiondate) = 2011",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of posts whose owners had a reputation of over 1000 in 2011? -- External Knowledge: {'posts': {'column_name': 'Id', 'table_name': 'posts'}, 'owners': {'column_name': 'OwnerUserId', 'table_name': 'posts'}, 'reputation': {'column_name': 'Reputation', 'table_name': 'users'}, '2011': {'column_name': 'CreationDate', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 685,
    "db_id": "codebase_community",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "true_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "text_2_sql": "SELECT p.viewcount, u.displayname FROM posts p LEFT JOIN users u ON p.lasteditoruserid = u.id WHERE p.title = 'Computer Game Datasets' ORDER BY p.lasteditdate DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time. -- External Knowledge: {'views': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'Game': {'column_name': 'Title', 'table_name': 'posts'}, 'Datasets': {'column_name': 'Title', 'table_name': 'posts'}, 'posted': {'column_name': 'LastEditDate', 'table_name': 'posts'}, 'last': {'column_name': 'LastEditDate', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 687,
    "db_id": "codebase_community",
    "question": "How many comments were added to the post with the highest score?",
    "true_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY T1.Score DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT CommentCount FROM posts WHERE Score = (SELECT MAX(Score) FROM posts) LIMIT 1;",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many comments were added to the post with the highest score? -- External Knowledge: {'comments': {'column_name': 'CommentCount', 'table_name': 'posts'}, 'score': {'column_name': 'Score', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 694,
    "db_id": "codebase_community",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "true_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC NULLS LAST LIMIT 10",
    "text_2_sql": "SELECT c.text, c.userdisplayname FROM comments c JOIN posts p ON c.postid = p.id WHERE p.title = 'Analysing wind data with R' ORDER BY c.creationdate DESC LIMIT 10",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it. -- External Knowledge: {'comments': {'column_name': 'Text', 'table_name': 'comments'}, 'text': {'column_name': 'Text', 'table_name': 'comments'}, 'display': {'column_name': 'UserDisplayName', 'table_name': 'comments'}, 'title': {'column_name': 'Title', 'table_name': 'posts'}, 'wind': {'column_name': 'Title', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 701,
    "db_id": "codebase_community",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN (SELECT MAX(Reputation) AS max_reputation FROM users) AS T3 ON T1.Reputation = T3.max_reputation",
    "text_2_sql": "WITH most_influential_user AS ( SELECT id FROM users ORDER BY reputation DESC LIMIT 1 ), user_posts AS ( SELECT p.* FROM posts p JOIN most_influential_user miu ON p.owneruserid = miu.id ), high_score_posts AS ( SELECT COUNT(*) AS high_score_count FROM user_posts WHERE score > 50 ) SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE ROUND(high_score_count::NUMERIC / COUNT(*) * 100, 2) END AS percentage FROM user_posts, high_score_posts",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among all the posts posted by the most influential user, identify the percentage with a score above 50. -- External Knowledge: {'50': {'column_name': 'Score', 'table_name': 'posts'}, 'above': {'column_name': 'Score', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}, 'influential': {'column_name': 'Reputation', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 701,
    "db_id": "codebase_community",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN (SELECT MAX(Reputation) AS max_reputation FROM users) AS T3 ON T1.Reputation = T3.max_reputation",
    "text_2_sql": "WITH most_influential_user AS ( SELECT id FROM users ORDER BY reputation DESC LIMIT 1 ), user_posts AS ( SELECT p.* FROM posts p JOIN most_influential_user miu ON p.owneruserid = miu.id ), high_score_posts AS ( SELECT COUNT(*) AS high_score_count FROM user_posts WHERE score > 50 ), total_posts AS ( SELECT COUNT(*) AS total_count FROM user_posts ) SELECT ROUND(CAST(high_score_count AS NUMERIC) / CAST(total_count AS NUMERIC) * 100, 2) AS percentage FROM high_score_posts, total_posts",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among all the posts posted by the most influential user, identify the percentage with a score above 50. -- External Knowledge: {'50': {'column_name': 'Score', 'table_name': 'posts'}, 'above': {'column_name': 'Score', 'table_name': 'posts'}, 'posted': {'column_name': 'CreaionDate', 'table_name': 'posts'}, 'influential': {'column_name': 'Reputation', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 704,
    "db_id": "codebase_community",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "true_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "text_2_sql": "SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the excerpt post ID and wiki post ID of the tag named sample? -- External Knowledge: {'excerpt': {'column_name': 'ExcerptPostId', 'table_name': 'tags'}, 'ID': {'column_name': 'Id', 'table_name': 'tags'}, 'post': {'column_name': 'Id', 'table_name': 'posts'}, 'tag': {'column_name': 'TagName', 'table_name': 'tags'}, 'wiki': {'column_name': 'WikiPostId', 'table_name': 'tags'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 705,
    "db_id": "codebase_community",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "true_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "text_2_sql": "SELECT u.reputation, u.upvotes FROM users u JOIN comments c ON u.id = c.userid WHERE c.text = 'fine, you win :)'",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the user's reputation and up vote number of the user that commented \"fine, you win :)\". -- External Knowledge: {'user': {'column_name': 'UserId', 'table_name': 'users'}, 'vote': {'column_name': 'VoteTypeId', 'table_name': 'votes'}, 'reputation': {'column_name': 'Reputation', 'table_name': 'users'}, 'up': {'column_name': 'UpVotes', 'table_name': 'users'}, 'commented': {'column_name': 'Text', 'table_name': 'comments'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 707,
    "db_id": "codebase_community",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "true_sql": "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150) ORDER BY Score DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT c.text AS highest_scored_comment, c.score FROM posts p JOIN comments c ON p.id = c.postid WHERE p.viewcount BETWEEN 100 AND 150 ORDER BY c.score DESC LIMIT 1",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the posts with views ranging from 100 to 150, what is the comment with the highest score? -- External Knowledge: {'100': {'column_name': 'ViewCount', 'table_name': 'posts'}, '150': {'column_name': 'ViewCount', 'table_name': 'posts'}, 'comment': {'column_name': 'Text', 'table_name': 'comments'}, 'views': {'column_name': 'ViewCount', 'table_name': 'posts'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 710,
    "db_id": "codebase_community",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "true_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "text_2_sql": "SELECT COUNT(*) FROM posts p JOIN comments c ON p.id = c.postid WHERE p.commentcount = 1 AND c.score = 0",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In posts with 1 comment, how many of the comments have 0 score? -- External Knowledge: {'comments': {'column_name': 'CommentCount', 'table_name': 'posts'}, 'comment': {'column_name': 'Score', 'table_name': 'comments'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 716,
    "db_id": "codebase_community",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN u.upvotes = 0 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM comments c JOIN users u ON c.userid = u.id WHERE c.score BETWEEN 5 AND 10",
    "prompt": "CREATE TABLE posts ( `communityowneddate` TIMESTAMP WITH TIME ZONE NULL, `parentid` BIGINT NULL, `closeddate` TIMESTAMP WITH TIME ZONE NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `viewcount` BIGINT NULL, `posttypeid` BIGINT NULL, `owneruserid` BIGINT NULL, `lasactivitydate` TIMESTAMP WITH TIME ZONE NULL, `acceptedanswerid` BIGINT NULL, `creaiondate` TIMESTAMP WITH TIME ZONE NULL, `answercount` BIGINT NULL, `commentcount` BIGINT NULL, `favoritecount` BIGINT NULL, `lasteditoruserid` BIGINT NULL, `lasteditdate` TIMESTAMP WITH TIME ZONE NULL, `lasteditordisplayname` TEXT NULL, `body` TEXT NULL, `title` TEXT NULL, `tags` TEXT NULL, `ownerdisplayname` TEXT NULL ); CREATE TABLE users ( `upvotes` BIGINT NULL, `downvotes` BIGINT NULL, `accountid` BIGINT NULL, `age` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `reputation` BIGINT NULL, `lastaccessdate` TIMESTAMP WITH TIME ZONE NULL, `views` BIGINT NULL, `profileimageurl` TEXT NULL, `displayname` TEXT NULL, `websiteurl` TEXT NULL, `location` TEXT NULL, `aboutme` TEXT NULL ); CREATE TABLE badges ( `id` BIGINT NOT NULL, `userid` BIGINT NULL, `date` TIMESTAMP WITH TIME ZONE NULL, `name` TEXT NULL ); CREATE TABLE comments ( `userid` BIGINT NULL, `postid` BIGINT NULL, `score` BIGINT NULL, `id` BIGINT NOT NULL, `creationdate` TIMESTAMP WITH TIME ZONE NULL, `text` TEXT NULL, `userdisplayname` TEXT NULL ); CREATE TABLE postHistory ( ); CREATE TABLE postLinks ( ); CREATE TABLE tags ( `id` BIGINT NOT NULL, `count` BIGINT NULL, `excerptpostid` BIGINT NULL, `wikipostid` BIGINT NULL, `tagname` TEXT NULL ); CREATE TABLE votes ( `id` BIGINT NOT NULL, `postid` BIGINT NULL, `votetypeid` BIGINT NULL, `creationdate` DATE NULL, `userid` BIGINT NULL, `bountyamount` BIGINT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? -- External Knowledge: {'comments': {'column_name': 'Id', 'table_name': 'comments'}, 'scores': {'column_name': 'Score', 'table_name': 'comments'}, 'users': {'column_name': 'UserId', 'table_name': 'comments'}, 'up': {'column_name': 'UpVotes', 'table_name': 'users'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 340,
    "db_id": "card_games",
    "question": "Which are the cards that have incredibly powerful foils.",
    "true_sql": "SELECT id FROM cards WHERE NOT cardKingdomFoilId IS NULL AND NOT cardKingdomId IS NULL",
    "text_2_sql": "SELECT name, edhrecrank FROM cards WHERE hasfoil = 1 ORDER BY edhrecrank ASC LIMIT 10",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which are the cards that have incredibly powerful foils. -- External Knowledge: {'powerful': {'column_name': 'edhrecRank', 'table_name': 'cards'}, 'foils': {'column_name': 'hasFoil', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 341,
    "db_id": "card_games",
    "question": "What are the borderless cards available without powerful foils?",
    "true_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "text_2_sql": "SELECT name FROM cards WHERE borderColor = 'borderless' AND hasfoil = 0;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the borderless cards available without powerful foils? -- External Knowledge: {'borderless': {'column_name': 'borderColor', 'table_name': 'cards'}, 'foils': {'column_name': 'hasFoil', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 344,
    "db_id": "card_games",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "true_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "text_2_sql": "SELECT DISTINCT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'Banned' ORDER BY c.name;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the mythic rarity print cards banned in gladiator format. -- External Knowledge: {'format': {'column_name': 'format', 'table_name': 'legalities'}, 'rarity': {'column_name': 'rarity', 'table_name': 'cards'}, 'banned': {'column_name': 'status', 'table_name': 'legalities'}, 'mythic': {'column_name': 'rarity', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 345,
    "db_id": "card_games",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "true_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "text_2_sql": "SELECT DISTINCT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.type LIKE '%Artifact%' AND c.otherfaceids IS NULL AND l.format = 'vintage'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. -- External Knowledge: {'legalities': {'column_name': 'format', 'table_name': 'legalities'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'status': {'column_name': 'status', 'table_name': 'legalities'}, 'type': {'column_name': 'type', 'table_name': 'cards'}, 'vintage': {'column_name': 'format', 'table_name': 'legalities'}, 'cards': {'column_name': 'type', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 346,
    "db_id": "card_games",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "true_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
    "text_2_sql": "SELECT DISTINCT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.power IS NULL AND l.format = 'commander' AND l.status = 'Legal'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the card id and artist with unknown power which are legal for commander play format. -- External Knowledge: {'id': {'column_name': 'id', 'table_name': 'cards'}, 'artist': {'column_name': 'artist', 'table_name': 'cards'}, 'power': {'column_name': 'power', 'table_name': 'cards'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'legal': {'column_name': 'status', 'table_name': 'legalities'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 347,
    "db_id": "card_games",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "true_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "text_2_sql": "SELECT c.name AS card_name, r.text AS ruling_text, CASE WHEN c.name IS NULL OR c.name = '' THEN 'Missing name' WHEN c.text IS NULL OR c.text = '' THEN 'Missing text' WHEN c.type IS NULL OR c.type = '' THEN 'Missing type' WHEN c.rarity IS NULL OR c.rarity = '' THEN 'Missing rarity' WHEN c.setcode IS NULL OR c.setcode = '' THEN 'Missing set code' ELSE 'No missing properties' END AS property_status FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel' ORDER BY c.name, r.date",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values. -- External Knowledge: {'illustrated': {'column_name': 'artist', 'table_name': 'cards'}, 'Stephen': {'column_name': 'artist', 'table_name': 'cards'}, 'Daniel': {'column_name': 'artist', 'table_name': 'cards'}, 'cards': {'column_name': 'name', 'table_name': 'cards'}, 'text': {'column_name': 'text', 'table_name': 'rulings'}, 'ruling': {'column_name': 'text', 'table_name': 'rulings'}, 'properties': {'column_name': 'name', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 349,
    "db_id": "card_games",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "true_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM (SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist) AS subquery)) LIMIT 1",
    "text_2_sql": "SELECT c.name AS card_name, c.artist, c.ispromo AS is_promotional, COUNT(r.text) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.ispromo ORDER BY ruling_count DESC LIMIT 1",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the card and artist with the most ruling information. Also state if the card is a promotional printing. -- External Knowledge: {'ruling': {'column_name': 'text', 'table_name': 'rulings'}, 'card': {'column_name': 'name', 'table_name': 'cards'}, 'artist': {'column_name': 'artist', 'table_name': 'cards'}, 'promotional': {'column_name': 'isPromo', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 352,
    "db_id": "card_games",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT fd.uuid)::NUMERIC / COUNT(DISTINCT c.uuid)::NUMERIC * 100, 2) AS percentage FROM cards c LEFT JOIN foreign_data fd ON c.uuid = fd.uuid AND fd.language = 'Chinese Simplified' WHERE c.availability IS NOT NULL",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the percentage of the cards availabe in Chinese Simplified. -- External Knowledge: {'Chinese Simplified': {'column_name': 'language', 'table_name': 'foreign_data'}, 'availabe': {'column_name': 'availability', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 356,
    "db_id": "card_games",
    "question": "How many cards have infinite power?",
    "true_sql": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "text_2_sql": "SELECT COUNT(*) FROM cards WHERE power = '∞';",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many cards have infinite power? -- External Knowledge: {'power': {'column_name': 'power', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 358,
    "db_id": "card_games",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "true_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "text_2_sql": "SELECT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen';",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the border color of card \"Ancestor's Chosen\"? -- External Knowledge: {\"Ancestor's Chosen\": {'column_name': 'name', 'table_name': 'cards'}, 'border': {'column_name': 'borderColor', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 366,
    "db_id": "card_games",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "true_sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "text_2_sql": "SELECT r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Benalish Knight' ORDER BY r.date DESC LIMIT 1",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the rule of playing card \"Benalish Knight\"? -- External Knowledge: {'Benalish': {'column_name': 'name', 'table_name': 'cards'}, 'Knight': {'column_name': 'name', 'table_name': 'cards'}, 'rule': {'column_name': 'text', 'table_name': 'rulings'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 368,
    "db_id": "card_games",
    "question": "What is the percentage of borderless cards?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(id), 0) FROM cards",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN bordercolor = 'borderless' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_borderless FROM cards",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of borderless cards? -- External Knowledge: {'borderless': {'column_name': 'borderColor', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 371,
    "db_id": "card_games",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN fd.language = 'French' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_french FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.isstoryspotlight = 1",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of cards whose language is French among the Story Spotlight cards? -- External Knowledge: {'language': {'column_name': 'language', 'table_name': 'foreign_data'}, 'French': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Story': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}, 'Spotlight': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}, 'cards': {'column_name': 'name', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 377,
    "db_id": "card_games",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "true_sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes <> 'Angel'",
    "text_2_sql": "SELECT COUNT(*) FROM cards WHERE originaltype = 'Summon - Angel' AND (subtypes IS NULL OR subtypes NOT LIKE '%Angel%');",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"? -- External Knowledge: {'Angel': {'column_name': 'originalType', 'table_name': 'cards'}, 'subtype': {'column_name': 'subtypes', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 379,
    "db_id": "card_games",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "true_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "text_2_sql": "SELECT id FROM cards WHERE dueldeck = 'a'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the cards belong to duel deck a? List the ID. -- External Knowledge: {'duel': {'column_name': 'duelDeck', 'table_name': 'cards'}, 'deck': {'column_name': 'duelDeck', 'table_name': 'cards'}, 'belong': {'column_name': 'duelDeck', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 383,
    "db_id": "card_games",
    "question": "How many of the banned cards are white border?",
    "true_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "text_2_sql": "SELECT COUNT(DISTINCT c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned' AND c.bordercolor = 'white'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many of the banned cards are white border? -- External Knowledge: {'banned': {'column_name': 'status', 'table_name': 'legalities'}, 'white': {'column_name': 'borderColor', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 391,
    "db_id": "card_games",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "true_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "text_2_sql": "SELECT DISTINCT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.types LIKE '%Artifact%' AND c.colors LIKE '%Black%' AND fd.language IS NOT NULL AND fd.language != 'English'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the Artifact cards, which are black color and comes with foreign languague translation? -- External Knowledge: {'languague': {'column_name': 'language', 'table_name': 'foreign_data'}, 'translation': {'column_name': 'translation', 'table_name': 'set_translations'}, 'color': {'column_name': 'colors', 'table_name': 'cards'}, 'foreign': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Artifact': {'column_name': 'types', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 397,
    "db_id": "card_games",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "true_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = '2003' AND layout = 'normal'",
    "text_2_sql": "SELECT DISTINCT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability = '[\"paper\",\"mtgo\"]'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? -- External Knowledge: {'layout': {'column_name': 'layout', 'table_name': 'cards'}, 'frame': {'column_name': 'frameVersion', 'table_name': 'cards'}, 'border': {'column_name': 'borderColor', 'table_name': 'cards'}, 'mana': {'column_name': 'manaCost', 'table_name': 'cards'}, 'cost': {'column_name': 'convertedManaCost', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "db_id": "card_games",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(id), 0) FROM cards",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN text IS NULL THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage, STRING_AGG(CAST(id AS TEXT), ', ' ORDER BY id) AS spotlight_ids_without_text FROM cards WHERE isstoryspotlight = 1 AND text IS NULL;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID. -- External Knowledge: {'ID': {'column_name': 'id', 'table_name': 'cards'}, 'text': {'column_name': 'text', 'table_name': 'cards'}, 'Spotlight': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}, 'Story': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "db_id": "card_games",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(id), 0) FROM cards",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN text IS NULL THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_without_text, STRING_AGG(CAST(id AS TEXT), ', ' ORDER BY id) AS ids_without_text FROM cards WHERE isstoryspotlight = 1 AND text IS NULL;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID. -- External Knowledge: {'ID': {'column_name': 'id', 'table_name': 'cards'}, 'text': {'column_name': 'text', 'table_name': 'cards'}, 'Spotlight': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}, 'Story': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "db_id": "card_games",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(id), 0) FROM cards",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN text IS NULL THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage, ARRAY_AGG(id) AS spotlight_cards_without_text FROM cards WHERE isstoryspotlight = 1 AND text IS NULL GROUP BY isstoryspotlight;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID. -- External Knowledge: {'ID': {'column_name': 'id', 'table_name': 'cards'}, 'text': {'column_name': 'text', 'table_name': 'cards'}, 'Spotlight': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}, 'Story': {'column_name': 'isStorySpotlight', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 405,
    "db_id": "card_games",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "true_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "text_2_sql": "SELECT COUNT(DISTINCT st.setcode) FROM set_translations st JOIN sets s ON st.setcode = s.code WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brazil)'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many Brazilian Portuguese translated sets are inside the Commander block? -- External Knowledge: {'sets': {'column_name': 'name', 'table_name': 'sets'}, 'block': {'column_name': 'block', 'table_name': 'sets'}, 'Commander': {'column_name': 'block', 'table_name': 'sets'}, 'Portuguese': {'column_name': 'language', 'table_name': 'set_translations'}, 'translated': {'column_name': 'translation', 'table_name': 'set_translations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 407,
    "db_id": "card_games",
    "question": "Lists all types of cards in German.",
    "true_sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND NOT T1.subtypes IS NULL AND NOT T1.supertypes IS NULL",
    "text_2_sql": "SELECT DISTINCT fd.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'German' AND c.types IS NOT NULL ORDER BY fd.type;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Lists all types of cards in German. -- External Knowledge: {'German': {'column_name': 'language', 'table_name': 'foreign_data'}, 'types': {'column_name': 'types', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 408,
    "db_id": "card_games",
    "question": "How many unknown power cards contain info about the triggered ability",
    "true_sql": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
    "text_2_sql": "SELECT COUNT(*) FROM cards WHERE power = '*' AND text ILIKE '%triggered ability%'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many unknown power cards contain info about the triggered ability -- External Knowledge: {'power': {'column_name': 'power', 'table_name': 'cards'}, 'triggered': {'column_name': 'text', 'table_name': 'cards'}, 'ability': {'column_name': 'text', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 409,
    "db_id": "card_games",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "true_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN rulings r ON c.uuid = r.uuid WHERE l.format = 'premodern' AND r.text = 'This is a triggered mana ability.' AND c.layout NOT IN ('transform', 'modal_dfc', 'meld', 'flip', 'split', 'adventure')",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces. -- External Knowledge: {'format': {'column_name': 'format', 'table_name': 'legalities'}, 'ruling': {'column_name': 'text', 'table_name': 'rulings'}, 'mana': {'column_name': 'text', 'table_name': 'rulings'}, 'text': {'column_name': 'text', 'table_name': 'rulings'}, 'faces': {'column_name': 'layout', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 412,
    "db_id": "card_games",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "true_sql": "SELECT name FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson') AND language = 'French'",
    "text_2_sql": "SELECT fd.name AS foreign_name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.bordercolor = 'black' AND c.artist = 'Matthew D. Wilson' AND fd.language = 'French' LIMIT 1;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson? -- External Knowledge: {'layout': {'column_name': 'layout', 'table_name': 'cards'}, 'Creature': {'column_name': 'type', 'table_name': 'cards'}, 'artist': {'column_name': 'artist', 'table_name': 'cards'}, 'black': {'column_name': 'borderColor', 'table_name': 'cards'}, 'French': {'column_name': 'language', 'table_name': 'foreign_data'}, 'foreign': {'column_name': 'name', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 414,
    "db_id": "card_games",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "true_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "text_2_sql": "SELECT DISTINCT st.language FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE s.block = 'Ravnica' AND s.basesetsize = 180",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What language is the set of 180 cards that belongs to the Ravnica block translated into? -- External Knowledge: {'set': {'column_name': 'name', 'table_name': 'sets'}, 'language': {'column_name': 'language', 'table_name': 'set_translations'}, '180': {'column_name': 'baseSetSize', 'table_name': 'sets'}, 'Ravnica': {'column_name': 'block', 'table_name': 'sets'}, 'block': {'column_name': 'block', 'table_name': 'sets'}, 'translated': {'column_name': 'translation', 'table_name': 'set_translations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "text_2_sql": "SELECT ROUND( (COUNT(*) FILTER (WHERE c.hascontentwarning = 0 OR c.hascontentwarning IS NULL) * 100.0) / COUNT(*), 2 ) AS percentage_without_content_warning FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of cards with format commander and legal status do not have a content warning? -- External Knowledge: {'warning': {'column_name': 'hasContentWarning', 'table_name': 'cards'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'commander': {'column_name': 'format', 'table_name': 'legalities'}, 'status': {'column_name': 'status', 'table_name': 'legalities'}, 'legal': {'column_name': 'status', 'table_name': 'legalities'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "text_2_sql": "SELECT ROUND( (COUNT(*) FILTER (WHERE c.hascontentwarning = 0 OR c.hascontentwarning IS NULL) * 100.0) / COUNT(*), 2 ) AS percentage_without_content_warning FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of cards with format commander and legal status do not have a content warning? -- External Knowledge: {'warning': {'column_name': 'hasContentWarning', 'table_name': 'cards'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'commander': {'column_name': 'format', 'table_name': 'legalities'}, 'status': {'column_name': 'status', 'table_name': 'legalities'}, 'legal': {'column_name': 'status', 'table_name': 'legalities'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "text_2_sql": "SELECT ROUND( (COUNT(*) FILTER (WHERE c.hascontentwarning = 0 OR c.hascontentwarning IS NULL) * 100.0) / COUNT(*), 2 ) AS percentage_without_content_warning FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of cards with format commander and legal status do not have a content warning? -- External Knowledge: {'warning': {'column_name': 'hasContentWarning', 'table_name': 'cards'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'commander': {'column_name': 'format', 'table_name': 'legalities'}, 'status': {'column_name': 'status', 'table_name': 'legalities'}, 'legal': {'column_name': 'status', 'table_name': 'legalities'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 416,
    "db_id": "card_games",
    "question": "What percentage of cards without power are in French?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT fd.uuid)::NUMERIC / NULLIF(COUNT(DISTINCT c.uuid), 0) * 100, 2) AS percentage FROM cards c LEFT JOIN foreign_data fd ON c.uuid = fd.uuid AND fd.language = 'French' WHERE c.power IS NULL",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of cards without power are in French? -- External Knowledge: {'power': {'column_name': 'power', 'table_name': 'cards'}, 'French': {'column_name': 'language', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 422,
    "db_id": "card_games",
    "question": "What is the language of the card with the multiverse number 149934?",
    "true_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "text_2_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the language of the card with the multiverse number 149934? -- External Knowledge: {'multiverse': {'column_name': 'multiverseid', 'table_name': 'foreign_data'}, 'language': {'column_name': 'language', 'table_name': 'foreign_data'}, '149934': {'column_name': 'multiverseid', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 424,
    "db_id": "card_games",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(*), 0) FROM cards",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN text IS NULL AND layout = 'normal' THEN 1 END)::NUMERIC / NULLIF(COUNT(*), 0)::NUMERIC, 4) AS proportion_without_text FROM cards WHERE layout = 'normal'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What proportion of cards do not have a text box with a normal layout? -- External Knowledge: {'layout': {'column_name': 'layout', 'table_name': 'cards'}, 'text': {'column_name': 'text', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 427,
    "db_id": "card_games",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "true_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "text_2_sql": "SELECT DISTINCT fd.language FROM sets s JOIN cards c ON s.code = c.setcode JOIN foreign_data fd ON c.uuid = fd.uuid WHERE s.name = 'Archenemy' AND s.code = 'ARC'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What languages are available in the set known as Archenemy on the magic card market and having the code ARC? -- External Knowledge: {'set': {'column_name': 'name', 'table_name': 'sets'}, 'code': {'column_name': 'code', 'table_name': 'sets'}, 'languages': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Archenemy': {'column_name': 'name', 'table_name': 'sets'}, 'ARC': {'column_name': 'code', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 440,
    "db_id": "card_games",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "true_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "text_2_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which foreign language used by \"A Pedra Fellwar\"? -- External Knowledge: {'language': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Pedra': {'column_name': 'name', 'table_name': 'foreign_data'}, 'foreign': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Fellwar': {'column_name': 'name', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 459,
    "db_id": "card_games",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "true_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT c1.name AS card1, c1.convertedmanacost AS cost1, c2.name AS card2, c2.convertedmanacost AS cost2 FROM cards c1 CROSS JOIN cards c2 WHERE c1.name = 'Serra Angel' AND c2.name = 'Shrine Keeper'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"? -- External Knowledge: {'Angel': {'column_name': 'name', 'table_name': 'cards'}, 'Serra': {'column_name': 'name', 'table_name': 'cards'}, 'Keeper': {'column_name': 'name', 'table_name': 'cards'}, 'Shrine': {'column_name': 'name', 'table_name': 'cards'}, 'converted': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'mana': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'costs': {'column_name': 'convertedManaCost', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 462,
    "db_id": "card_games",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "true_sql": "SELECT translation FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen') AND language = 'Italian'",
    "text_2_sql": "SELECT DISTINCT st.translation FROM cards c JOIN sets s ON c.setcode = s.code JOIN set_translations st ON s.code = st.setcode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in? -- External Knowledge: {'Chosen': {'column_name': 'name', 'table_name': 'cards'}, 'Italian': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Ancestor': {'column_name': 'name', 'table_name': 'cards'}, 'set': {'column_name': 'setCode', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 465,
    "db_id": "card_games",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "true_sql": "SELECT CASE WHEN SUM(CASE WHEN T2.language = 'Korean' AND NOT T2.translation IS NULL THEN 1 ELSE 0 END) > 0 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "text_2_sql": "SELECT EXISTS ( SELECT 1 FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean' )",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it? -- External Knowledge: {'Ancestor': {'column_name': 'name', 'table_name': 'cards'}, 'Korean': {'column_name': 'language', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 466,
    "db_id": "card_games",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "true_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "text_2_sql": "SELECT COUNT(*) FROM cards c JOIN sets s ON c.setcode = s.code WHERE s.name = 'Hauptset Zehnte Edition' AND c.artist = 'Adam Rex'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex? -- External Knowledge: {'Hauptset Zehnte Edition': {'column_name': 'name', 'table_name': 'sets'}, 'set': {'column_name': 'setCode', 'table_name': 'cards'}, 'Adam Rex': {'column_name': 'artist', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 468,
    "db_id": "card_games",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "true_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "text_2_sql": "SELECT st.translation FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"? -- External Knowledge: {'Edition': {'column_name': 'name', 'table_name': 'sets'}, 'translation': {'column_name': 'translation', 'table_name': 'set_translations'}, 'set': {'column_name': 'setCode', 'table_name': 'set_translations'}, 'Simplified Chinese': {'column_name': 'language', 'table_name': 'set_translations'}, 'Eighth': {'column_name': 'name', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 469,
    "db_id": "card_games",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "true_sql": "SELECT CASE WHEN NOT T2.mtgoCode IS NULL THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "text_2_sql": "SELECT DISTINCT s.isOnlineOnly FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.name = 'Angel of Mercy' AND s.name LIKE '%Magic%' AND s.name LIKE '%Gathering%' LIMIT 1",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online? -- External Knowledge: {'Angel': {'column_name': 'name', 'table_name': 'cards'}, 'Mercy': {'column_name': 'name', 'table_name': 'cards'}, 'set': {'column_name': 'setCode', 'table_name': 'cards'}, 'Online': {'column_name': 'isOnlineOnly', 'table_name': 'sets'}, 'Magic': {'column_name': 'name', 'table_name': 'sets'}, 'Gathering': {'column_name': 'name', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 472,
    "db_id": "card_games",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "true_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND NOT T2.translation IS NULL",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE s.block = 'Ice Age' AND st.language = 'Italian'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the sets in the block \"Ice Age\", how many of them have an Italian translation? -- External Knowledge: {'sets': {'column_name': 'name', 'table_name': 'sets'}, 'block': {'column_name': 'block', 'table_name': 'sets'}, 'translation': {'column_name': 'translation', 'table_name': 'set_translations'}, 'Ice': {'column_name': 'block', 'table_name': 'sets'}, 'Italian': {'column_name': 'language', 'table_name': 'set_translations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 473,
    "db_id": "card_games",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "true_sql": "SELECT CASE WHEN isForeignOnly = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "text_2_sql": "SELECT CASE WHEN EXISTS ( SELECT 1 FROM cards c JOIN sets s ON c.setcode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isforeignonly = 1 ) THEN 'Yes' ELSE 'No' END AS is_foreign_only;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Is the set of cards with Adarkar Valkyrie only available outside the United States? -- External Knowledge: {'set': {'column_name': 'name', 'table_name': 'sets'}, 'Valkyrie': {'column_name': 'name', 'table_name': 'cards'}, 'Adarkar': {'column_name': 'name', 'table_name': 'cards'}, 'United': {'column_name': 'name', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 474,
    "db_id": "card_games",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "true_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE NOT T2.translation IS NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "text_2_sql": "SELECT COUNT(DISTINCT s.id) FROM sets s JOIN set_translations st ON s.code = st.setcode WHERE st.language = 'Italian' AND s.basesetsize < 100",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100? -- External Knowledge: {'sets': {'column_name': 'name', 'table_name': 'sets'}, 'base': {'column_name': 'baseSetSize', 'table_name': 'sets'}, 'translation': {'column_name': 'translation', 'table_name': 'set_translations'}, 'Italian': {'column_name': 'language', 'table_name': 'set_translations'}, 'set': {'column_name': 'setCode', 'table_name': 'set_translations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 477,
    "db_id": "card_games",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "true_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "text_2_sql": "SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setcode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? -- External Knowledge: {'artists': {'column_name': 'artist', 'table_name': 'cards'}, 'set': {'column_name': 'name', 'table_name': 'sets'}, 'Coldsnap': {'column_name': 'name', 'table_name': 'sets'}, 'Aaron Miller': {'column_name': 'artist', 'table_name': 'cards'}, 'Jeremy Jarvis': {'column_name': 'artist', 'table_name': 'cards'}, 'Chippy': {'column_name': 'artist', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 479,
    "db_id": "card_games",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "true_sql": "SELECT SUM(CASE WHEN T1.power = '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "text_2_sql": "SELECT COUNT(*) FROM cards c JOIN sets s ON c.setcode = s.code WHERE s.name = 'Coldsnap' AND c.convertedmanacost > 5 AND (c.power IS NULL OR c.power = '')",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? -- External Knowledge: {'converted': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'set': {'column_name': 'setCode', 'table_name': 'cards'}, 'Coldsnap': {'column_name': 'name', 'table_name': 'sets'}, 'mana': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'cost': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'power': {'column_name': 'power', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 480,
    "db_id": "card_games",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "true_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "text_2_sql": "SELECT fd.flavortext FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the Italian flavor text of the card \"Ancestor's Chosen\"? -- External Knowledge: {'flavor': {'column_name': 'flavorText', 'table_name': 'foreign_data'}, 'text': {'column_name': 'flavorText', 'table_name': 'foreign_data'}, 'Italian': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Ancestor': {'column_name': 'name', 'table_name': 'cards'}, 'Chosen': {'column_name': 'name', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 483,
    "db_id": "card_games",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "true_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "text_2_sql": "SELECT DISTINCT fd.text FROM sets s JOIN cards c ON s.code = c.setcode JOIN rulings r ON c.uuid = r.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE s.name = 'Coldsnap' AND fd.language = 'Italian'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the Italian text ruling of all the cards in the set Coldsnap. -- External Knowledge: {'set': {'column_name': 'code', 'table_name': 'sets'}, 'ruling': {'column_name': 'text', 'table_name': 'rulings'}, 'text': {'column_name': 'text', 'table_name': 'foreign_data'}, 'Italian': {'column_name': 'language', 'table_name': 'foreign_data'}, 'Coldsnap': {'column_name': 'name', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 484,
    "db_id": "card_games",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "true_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC NULLS LAST",
    "text_2_sql": "SELECT fd.name AS italian_name, c.convertedmanacost FROM cards c JOIN sets s ON c.setcode = s.code JOIN foreign_data fd ON c.uuid = fd.uuid WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedmanacost = ( SELECT MAX(convertedmanacost) FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' ) ORDER BY fd.name;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost. -- External Knowledge: {'set': {'column_name': 'code', 'table_name': 'sets'}, 'Coldsnap': {'column_name': 'name', 'table_name': 'sets'}, 'converted mana cost': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'Italian': {'column_name': 'language', 'table_name': 'foreign_data'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 486,
    "db_id": "card_games",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.convertedmanacost = 7 THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage FROM cards c JOIN sets s ON c.setcode = s.code WHERE s.name = 'Coldsnap'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? -- External Knowledge: {'converted': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'set': {'column_name': 'name', 'table_name': 'sets'}, 'Coldsnap': {'column_name': 'name', 'table_name': 'sets'}, 'mana': {'column_name': 'convertedManaCost', 'table_name': 'cards'}, 'cost': {'column_name': 'convertedManaCost', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 487,
    "db_id": "card_games",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN NOT T1.cardKingdomFoilId IS NULL AND NOT T1.cardKingdomId IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "text_2_sql": "SELECT COUNT(CASE WHEN c.power = '4' AND c.toughness = '4' THEN 1 END) * 100.0 / COUNT(*) AS percentage_powerful_cards FROM cards c JOIN sets s ON c.setcode = s.code WHERE s.code = 'CSP' AND c.type LIKE '%Creature%'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of incredibly powerful cards in the set Coldsnap? -- External Knowledge: {'Coldsnap': {'column_name': 'code', 'table_name': 'sets'}, 'set': {'column_name': 'setCode', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 518,
    "db_id": "card_games",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "true_sql": "WITH MaxBanned AS (SELECT format FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1)SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "text_2_sql": "SELECT l.format, COUNT(*) as banned_count, STRING_AGG(c.name, ', ') as banned_cards FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'Banned' GROUP BY l.format ORDER BY banned_count DESC LIMIT 1",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition. -- External Knowledge: {'format': {'column_name': 'format', 'table_name': 'legalities'}, 'condition': {'column_name': 'status', 'table_name': 'legalities'}, 'play': {'column_name': 'format', 'table_name': 'legalities'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "true_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "text_2_sql": "SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecrank = 1 AND l.status = 'Banned'",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format. -- External Knowledge: {'ranked': {'column_name': 'edhrecRank', 'table_name': 'cards'}, 'EDHRec': {'column_name': 'edhrecRank', 'table_name': 'cards'}, 'banned': {'column_name': 'status', 'table_name': 'legalities'}, 'format': {'column_name': 'format', 'table_name': 'legalities'}, 'cards': {'column_name': 'name', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 528,
    "db_id": "card_games",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "true_sql": "SELECT DISTINCT T2.name, CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN (SELECT code FROM sets WHERE name = 'Hour of Devastation')",
    "text_2_sql": "SELECT DISTINCT c.name, l.format FROM cards c JOIN sets s ON c.setcode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal' ORDER BY c.name, l.format;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal. -- External Knowledge: {'cards': {'column_name': 'name', 'table_name': 'cards'}, 'set': {'column_name': 'name', 'table_name': 'sets'}, 'Devastation': {'column_name': 'name', 'table_name': 'sets'}, 'legal': {'column_name': 'status', 'table_name': 'legalities'}, 'formats': {'column_name': 'format', 'table_name': 'legalities'}, 'Hour': {'column_name': 'name', 'table_name': 'sets'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 529,
    "db_id": "card_games",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "true_sql": "SELECT name FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Korean' AND NOT language LIKE '%Japanese%')",
    "text_2_sql": "SELECT DISTINCT s.name FROM sets s JOIN set_translations st_korean ON s.code = st_korean.setcode LEFT JOIN set_translations st_japanese ON s.code = st_japanese.setcode AND st_japanese.language = 'Japanese' WHERE st_korean.language = 'Korean' AND st_japanese.setcode IS NULL",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find and list the names of sets which doesn't have Japanese translation but have Korean translation. -- External Knowledge: {'translation': {'column_name': 'translation', 'table_name': 'set_translations'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 530,
    "db_id": "card_games",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "true_sql": "SELECT DISTINCT T1.frameVersion, T1.name, CASE WHEN T2.status = 'Banned' THEN T1.name ELSE 'NO' END FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "text_2_sql": "SELECT DISTINCT c.name AS card_name, c.frameversion AS frame_style, c.frameeffects AS frame_effects, l.status AS legality_status FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' AND (l.status = 'Banned' OR l.status IS NULL) ORDER BY c.name;",
    "prompt": "CREATE TABLE cards ( `faceconvertedmanacost` REAL NULL, `hasalternativedecklimit` BIGINT NULL, `hascontentwarning` BIGINT NULL, `hasfoil` BIGINT NULL, `hasnonfoil` BIGINT NULL, `isalternative` BIGINT NULL, `isfullart` BIGINT NULL, `isonlineonly` BIGINT NULL, `isoversized` BIGINT NULL, `ispromo` BIGINT NULL, `isreprint` BIGINT NULL, `isreserved` BIGINT NULL, `isstarter` BIGINT NULL, `isstoryspotlight` BIGINT NULL, `istextless` BIGINT NULL, `istimeshifted` BIGINT NULL, `convertedmanacost` REAL NULL, `edhrecrank` BIGINT NULL, `id` BIGINT NOT NULL, `leadershipskills` TEXT NULL, `life` TEXT NULL, `loyalty` TEXT NULL, `manacost` TEXT NULL, `mcmid` TEXT NULL, `mcmmetaid` TEXT NULL, `mtgarenaid` TEXT NULL, `mtgjsonv4id` TEXT NULL, `mtgofoilid` TEXT NULL, `mtgoid` TEXT NULL, `multiverseid` TEXT NULL, `name` TEXT NULL, `number` TEXT NULL, `originalreleasedate` TEXT NULL, `originaltext` TEXT NULL, `originaltype` TEXT NULL, `otherfaceids` TEXT NULL, `power` TEXT NULL, `printings` TEXT NULL, `promotypes` TEXT NULL, `purchaseurls` TEXT NULL, `rarity` TEXT NULL, `scryfallid` TEXT NULL, `scryfallillustrationid` TEXT NULL, `scryfalloracleid` TEXT NULL, `setcode` TEXT NULL, `side` TEXT NULL, `subtypes` TEXT NULL, `supertypes` TEXT NULL, `tcgplayerproductid` TEXT NULL, `text` TEXT NULL, `toughness` TEXT NULL, `type` TEXT NULL, `types` TEXT NULL, `uuid` TEXT NULL, `variations` TEXT NULL, `watermark` TEXT NULL, `artist` TEXT NULL, `asciiname` TEXT NULL, `availability` TEXT NULL, `bordercolor` TEXT NULL, `cardkingdomfoilid` TEXT NULL, `cardkingdomid` TEXT NULL, `coloridentity` TEXT NULL, `colorindicator` TEXT NULL, `colors` TEXT NULL, `dueldeck` TEXT NULL, `facename` TEXT NULL, `flavorname` TEXT NULL, `flavortext` TEXT NULL, `frameeffects` TEXT NULL, `frameversion` TEXT NULL, `hand` TEXT NULL, `keywords` TEXT NULL, `layout` TEXT NULL ); CREATE TABLE foreign_data ( `multiverseid` BIGINT NULL, `id` BIGINT NOT NULL, `language` TEXT NULL, `name` TEXT NULL, `text` TEXT NULL, `type` TEXT NULL, `uuid` TEXT NULL, `flavortext` TEXT NULL ); CREATE TABLE legalities ( `id` BIGINT NOT NULL, `format` TEXT NULL, `status` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE rulings ( `id` BIGINT NOT NULL, `date` DATE NULL, `text` TEXT NULL, `uuid` TEXT NULL ); CREATE TABLE set_translations ( `id` BIGINT NOT NULL, `language` TEXT NULL, `setcode` TEXT NULL, `translation` TEXT NULL ); CREATE TABLE sets ( `mcmidextras` BIGINT NULL, `isfoilonly` BIGINT NULL, `isforeignonly` BIGINT NULL, `isnonfoilonly` BIGINT NULL, `isonlineonly` BIGINT NULL, `releasedate` DATE NULL, `tcgplayergroupid` BIGINT NULL, `totalsetsize` BIGINT NULL, `id` BIGINT NOT NULL, `ispartialpreview` BIGINT NULL, `basesetsize` BIGINT NULL, `mcmid` BIGINT NULL, `type` TEXT NULL, `block` TEXT NULL, `booster` TEXT NULL, `code` TEXT NULL, `keyrunecode` TEXT NULL, `mcmname` TEXT NULL, `mtgocode` TEXT NULL, `name` TEXT NULL, `parentcode` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any. -- External Knowledge: {'frame': {'column_name': 'frameVersion', 'table_name': 'cards'}, 'styles': {'column_name': 'frameEffects', 'table_name': 'cards'}, 'banned': {'column_name': 'status', 'table_name': 'legalities'}, 'Williams': {'column_name': 'artist', 'table_name': 'cards'}, 'Allen': {'column_name': 'artist', 'table_name': 'cards'}, 'cards': {'column_name': 'name', 'table_name': 'cards'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 195,
    "db_id": "toxicology",
    "question": "What is the most common bond type?",
    "true_sql": "SELECT T.bond_type FROM (SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC NULLS LAST LIMIT 1) AS T",
    "text_2_sql": "SELECT bond_type, COUNT(*) as count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the most common bond type? -- External Knowledge: {'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "true_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id) AS oxygen_counts",
    "text_2_sql": "SELECT AVG(oxygen_count) AS avg_oxygen_atoms FROM ( SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element = 'oxygen' AND b.bond_type = 'single' GROUP BY m.molecule_id ) subquery",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the average number of oxygen atoms in single-bonded molecules. -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'oxygen': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 198,
    "db_id": "toxicology",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "true_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "text_2_sql": "SELECT AVG(single_bond_count) AS avg_single_bonded_carcinogenic_molecules FROM ( SELECT m.molecule_id, COUNT(DISTINCT b.bond_id) AS single_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'single' GROUP BY m.molecule_id ) AS subquery",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- On average how many carcinogenic molecules are single bonded? -- External Knowledge: {'single': {'column_name': 'bond_type', 'table_name': 'bond'}, 'bonded': {'column_name': 'bond_type', 'table_name': 'bond'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 200,
    "db_id": "toxicology",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "true_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "text_2_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = 'carcinogenic' AND b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Find the triple-bonded molecules which are carcinogenic. -- External Knowledge: {'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'carcinogenic': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 201,
    "db_id": "toxicology",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T1.atom_id), 0) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "text_2_sql": "SELECT ROUND( (COUNT(DISTINCT CASE WHEN a.element = 'C' THEN a.atom_id END)::FLOAT / NULLIF(COUNT(DISTINCT a.atom_id), 0) * 100 )::NUMERIC, 2 ) AS carbon_percentage FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = 'double'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of carbon in double-bond molecules? -- External Knowledge: {'carbon': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 206,
    "db_id": "toxicology",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "true_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "text_2_sql": "SELECT DISTINCT a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE m.label = 'TR004_8_9'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What elements are in the TR004_8_9 bond atoms? -- External Knowledge: {'TR004_8_9': {'column_name': 'label', 'table_name': 'molecule'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 207,
    "db_id": "toxicology",
    "question": "What elements are in a double type bond?",
    "true_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'double'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What elements are in a double type bond? -- External Knowledge: {'double': {'column_name': 'bond_type', 'table_name': 'bond'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'bond': {'column_name': 'bond_id', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 208,
    "db_id": "toxicology",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "true_sql": "SELECT T.label FROM (SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC NULLS LAST LIMIT 1) AS t",
    "text_2_sql": "SELECT m.label, COUNT(*) as count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'hydrogen' GROUP BY m.label ORDER BY count DESC LIMIT 1",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which type of label is the most numerous in atoms with hydrogen? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'hydrogen': {'column_name': 'element', 'table_name': 'atom'}, 'label': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 212,
    "db_id": "toxicology",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "true_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC NULLS FIRST LIMIT 1) AS t",
    "text_2_sql": "SELECT a.element, COUNT(*) as element_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label != 'carcinogenic' GROUP BY a.element ORDER BY element_count ASC LIMIT 1",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which element is the least numerous in non-carcinogenic molecules? -- External Knowledge: {'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'element': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 213,
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "true_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "text_2_sql": "SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8')",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What type of bond is there between the atoms TR004_8 and TR004_20? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}, 'bond': {'column_name': 'bond_id', 'table_name': 'bond'}, 'TR004_8': {'column_name': 'atom_id', 'table_name': 'connected'}, 'TR004_20': {'column_name': 'atom_id2', 'table_name': 'connected'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 215,
    "db_id": "toxicology",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "true_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums, COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "text_2_sql": "SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element IN ('iodine', 'sulfur') AND b.bond_type = 'single'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many atoms with iodine and with sulfur type elements are there in single bond molecules? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'sulfur': {'column_name': 'element', 'table_name': 'atom'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'iodine': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "SELECT (COUNT(DISTINCT m.molecule_id) - COUNT(DISTINCT f.molecule_id)) * 100.0 / COUNT(DISTINCT m.molecule_id) AS percentage FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'fluorine') f ON m.molecule_id = f.molecule_id WHERE m.label = 'carcinogenic'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of carcinogenic-type molecules does not contain fluorine? -- External Knowledge: {'fluorine': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'contain': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "SELECT (COUNT(DISTINCT m.molecule_id) - COUNT(DISTINCT f.molecule_id)) * 100.0 / COUNT(DISTINCT m.molecule_id) AS percentage FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'fluorine') f ON m.molecule_id = f.molecule_id WHERE m.label = 'carcinogenic'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of carcinogenic-type molecules does not contain fluorine? -- External Knowledge: {'fluorine': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'contain': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "WITH fluorine_molecules AS ( SELECT DISTINCT molecule_id FROM atom WHERE element = 'F' ), total_molecules AS ( SELECT COUNT(*) AS total FROM molecule WHERE label = 'carcinogenic' ), non_fluorine_molecules AS ( SELECT COUNT(*) AS count FROM molecule m WHERE m.label = 'carcinogenic' AND m.molecule_id NOT IN (SELECT molecule_id FROM fluorine_molecules) ) SELECT ROUND((non_fluorine_molecules.count::FLOAT / total_molecules.total) * 100, 2) AS percentage FROM non_fluorine_molecules, total_molecules",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of carcinogenic-type molecules does not contain fluorine? -- External Knowledge: {'fluorine': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'contain': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "text_2_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN m.label = 'carcinogenic' THEN m.molecule_id END) AS FLOAT) / CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT) * 100 AS percentage FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of carcinogenic molecules in triple type bonds? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}, 'triple': {'column_name': 'bond_type', 'table_name': 'bond'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "text_2_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN m.label = 'carcinogenic' THEN m.molecule_id END) AS FLOAT) / CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT) * 100 AS percentage_carcinogenic FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of carcinogenic molecules in triple type bonds? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}, 'triple': {'column_name': 'bond_type', 'table_name': 'bond'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "true_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(DISTINCT T2.molecule_id), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "text_2_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN m.label = 'carcinogenic' THEN m.molecule_id END) AS FLOAT) / NULLIF(COUNT(DISTINCT m.molecule_id), 0) * 100 AS percentage_carcinogenic FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of carcinogenic molecules in triple type bonds? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'type': {'column_name': 'bond_type', 'table_name': 'bond'}, 'triple': {'column_name': 'bond_type', 'table_name': 'bond'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 220,
    "db_id": "toxicology",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "true_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element NULLS FIRST LIMIT 3",
    "text_2_sql": "SELECT DISTINCT a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR000' ORDER BY a.element LIMIT 3",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. -- External Knowledge: {'TR000': {'column_name': 'label', 'table_name': 'molecule'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 226,
    "db_id": "toxicology",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "true_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS NUMERIC) * 100 / CAST(COUNT(T.bond_id) AS NUMERIC), 5) AS percentage FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN b.bond_type = 'double' THEN 1 END)::FLOAT / NULLIF(COUNT(*), 0) * 100), 5 ) AS double_bond_percentage FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR008'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places. -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'double': {'column_name': 'bond_type', 'table_name': 'bond'}, 'TR008': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 226,
    "db_id": "toxicology",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "true_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS NUMERIC) * 100 / CAST(COUNT(T.bond_id) AS NUMERIC), 5) AS percentage FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN b.bond_type = 'double' THEN 1 END)::FLOAT / NULLIF(COUNT(*), 0) * 100), 5 ) AS double_bond_percentage FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR008'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places. -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'double': {'column_name': 'bond_type', 'table_name': 'bond'}, 'TR008': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 226,
    "db_id": "toxicology",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "true_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS NUMERIC) * 100 / CAST(COUNT(T.bond_id) AS NUMERIC), 5) AS percentage FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN b.bond_type = 'double' THEN 1 END)::FLOAT / NULLIF(COUNT(*), 0) * 100), 5 ) AS double_bond_percentage FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR008'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places. -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'double': {'column_name': 'bond_type', 'table_name': 'bond'}, 'TR008': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 227,
    "db_id": "toxicology",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "true_sql": "SELECT ROUND(CAST((CAST(COUNT(CASE WHEN t.label = '+' THEN t.molecule_id ELSE NULL END) AS REAL) / NULLIF(COUNT(t.molecule_id), 0) * 100) AS NUMERIC), 3) AS percentage FROM molecule t",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN label = 'carcinogenic' THEN 1 END) * 100.0 / COUNT(*))::numeric, 3 ) AS carcinogenic_percentage FROM molecule",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places. -- External Knowledge: {'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'percentage': {'column_name': 'label', 'table_name': 'molecule'}, 'carcinogenic': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 228,
    "db_id": "toxicology",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "true_sql": "SELECT ROUND(CAST((CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0)) AS NUMERIC), 4) AS percentage FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN a.element = 'H' THEN 1 END)::NUMERIC / (SELECT COUNT(*) FROM atom WHERE molecule_id = m.molecule_id AND element = 'H')) * 100, 4 ) AS hydrogen_percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'TR206' AND a.element = 'H' AND EXISTS ( SELECT 1 FROM connected c WHERE c.atom_id = a.atom_id )",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places. -- External Knowledge: {'hydrogen': {'column_name': 'element', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'TR206': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 228,
    "db_id": "toxicology",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "true_sql": "SELECT ROUND(CAST((CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0)) AS NUMERIC), 4) AS percentage FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN a.element = 'H' THEN 1 END)::NUMERIC / (SELECT COUNT(*) FROM atom WHERE molecule_id = m.molecule_id AND element = 'H')) * 100, 4 ) AS hydrogen_percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE m.label = 'TR206' AND a.element = 'H' GROUP BY m.molecule_id",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places. -- External Knowledge: {'hydrogen': {'column_name': 'element', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'TR206': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 230,
    "db_id": "toxicology",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "true_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "text_2_sql": "SELECT DISTINCT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR060'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the elements of the toxicology and label of molecule TR060? -- External Knowledge: {'elements': {'column_name': 'element', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'label': {'column_name': 'label', 'table_name': 'molecule'}, 'TR060': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 231,
    "db_id": "toxicology",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "true_sql": "SELECT T.bond_type FROM (SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC NULLS LAST LIMIT 1) AS T",
    "text_2_sql": "SELECT bond.bond_type, COUNT(*) as bond_count, molecule.label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond.bond_type, molecule.label ORDER BY bond_count DESC LIMIT 1",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'TR010': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 232,
    "db_id": "toxicology",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "true_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id NULLS FIRST LIMIT 3",
    "text_2_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = 'single' AND m.label NOT LIKE '%carcinogenic%' GROUP BY m.molecule_id, m.label HAVING COUNT(DISTINCT c.atom_id) = 2 ORDER BY m.label LIMIT 3",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. -- External Knowledge: {'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'single': {'column_name': 'bond_type', 'table_name': 'bond'}, 'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'alphabetical': {'column_name': 'label', 'table_name': 'molecule'}, 'carcinogenic': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 234,
    "db_id": "toxicology",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "true_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
    "text_2_sql": "SELECT COUNT(DISTINCT c.bond_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE m.label = 'TR009' AND (c.atom_id = '12' OR c.atom_id2 = '12')",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many bonds which involved atom 12 does molecule TR009 have? -- External Knowledge: {'TR009': {'column_name': 'label', 'table_name': 'molecule'}, 'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'atom': {'column_name': 'atom_id', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, '12': {'column_name': 'atom_id', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 236,
    "db_id": "toxicology",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "true_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "text_2_sql": "SELECT b.bond_type, c1.atom_id AS atom1, c2.atom_id AS atom2 FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON b.bond_id = c2.bond_id WHERE m.label = 'TR001_6_9' AND c1.atom_id < c2.atom_id",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the bond type and the atoms of the bond ID of TR001_6_9? -- External Knowledge: {'TR001_6_9': {'column_name': 'label', 'table_name': 'molecule'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 239,
    "db_id": "toxicology",
    "question": "How many connections does the atom 19 have?",
    "true_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE RIGHT(T.atom_id, 2) = '19'",
    "text_2_sql": "SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id = '19' OR atom_id2 = '19'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many connections does the atom 19 have? -- External Knowledge: {'connections': {'column_name': 'atom_id2', 'table_name': 'connected'}, 'atom': {'column_name': 'atom_id', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 240,
    "db_id": "toxicology",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "true_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR004'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the elements of the toxicology of the molecule \"TR004\". -- External Knowledge: {'elements': {'column_name': 'element', 'table_name': 'atom'}, 'molecule': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 242,
    "db_id": "toxicology",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "true_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE RIGHT(T1.atom_id, 2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "text_2_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id BETWEEN '21' AND '25' AND m.label ILIKE '%carcinogenic%'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among all the atoms from 21 to 25, list all the molecules that are carcinogenic. -- External Knowledge: {'21': {'column_name': 'atom_id', 'table_name': 'atom'}, '25': {'column_name': 'atom_id', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 243,
    "db_id": "toxicology",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "true_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN (SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p') AND T1.element = 'n'",
    "text_2_sql": "SELECT DISTINCT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'phosphorus' AND a2.element = 'nitrogen') OR (a1.element = 'nitrogen' AND a2.element = 'phosphorus')",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the bonds that have phosphorus and nitrogen as their atom elements? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'atom': {'column_name': 'atom_id', 'table_name': 'atom'}, 'nitrogen': {'column_name': 'element', 'table_name': 'atom'}, 'phosphorus': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 244,
    "db_id": "toxicology",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "true_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC NULLS LAST LIMIT 1) AS T2 ON T1.molecule_id = T2.molecule_id",
    "text_2_sql": "SELECT m.molecule_id, m.label, COUNT(b.bond_id) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'double' GROUP BY m.molecule_id, m.label ORDER BY double_bond_count DESC LIMIT 1",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Is the molecule with the most double bonds carcinogenic? -- External Knowledge: {'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'double': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 245,
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "true_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / NULLIF(COUNT(T1.atom_id), 0) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "text_2_sql": "SELECT AVG(bond_count) AS avg_bonds_for_iodine FROM ( SELECT a.atom_id, COUNT(DISTINCT c.bond_id) AS bond_count FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'iodine' GROUP BY a.atom_id ) subquery",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average number of bonds the atoms with the element iodine have? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'bonds': {'column_name': 'bond_id', 'table_name': 'bond'}, 'iodine': {'column_name': 'element', 'table_name': 'atom'}, 'element': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 247,
    "db_id": "toxicology",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "true_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE NOT T.element IN (SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id)",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id IS NULL AND a.element IS NOT NULL",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the elements of atoms that can not bond with any other atoms. -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'other': {'column_name': 'atom_id2', 'table_name': 'connected'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 248,
    "db_id": "toxicology",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "true_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id AND b.molecule_id = m.molecule_id WHERE m.label = 'TR041' AND b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the atoms of the triple bond with the molecule \"TR041\"? -- External Knowledge: {'atoms': {'column_name': 'element', 'table_name': 'atom'}, 'TR041': {'column_name': 'label', 'table_name': 'molecule'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'triple': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 249,
    "db_id": "toxicology",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "true_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "text_2_sql": "SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR144_8_19'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the elements of the atoms of TR144_8_19? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'elements': {'column_name': 'element', 'table_name': 'atom'}, 'TR144_8_19': {'column_name': 'label', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 253,
    "db_id": "toxicology",
    "question": "List the elements of all the triple bonds.",
    "true_sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'triple'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the elements of all the triple bonds. -- External Knowledge: {'elements': {'column_name': 'element', 'table_name': 'atom'}, 'bonds': {'column_name': 'bond_type', 'table_name': 'bond'}, 'triple': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 255,
    "db_id": "toxicology",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "true_sql": "SELECT ROUND(CAST((CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.bond_id), 0)) AS NUMERIC), 5) AS percentage FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "text_2_sql": "SELECT ROUND( (COUNT(CASE WHEN b.bond_type = 'single' AND m.label = 'carcinogenic' THEN 1 END)::NUMERIC / NULLIF(COUNT(CASE WHEN b.bond_type = 'single' THEN 1 END), 0) * 100), 5 ) AS percentage_carcinogenic_single_bonds FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. -- External Knowledge: {'single': {'column_name': 'bond_type', 'table_name': 'bond'}, 'bonds': {'column_name': 'bond_type', 'table_name': 'bond'}, 'proportion': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 260,
    "db_id": "toxicology",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "true_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "text_2_sql": "SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = 'TRIPLE' AND (a.element = 'P' OR a.element = 'Br')",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine. -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'element': {'column_name': 'element', 'table_name': 'atom'}, 'phosphorus': {'column_name': 'element', 'table_name': 'atom'}, 'bromine': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 263,
    "db_id": "toxicology",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT CASE WHEN a.element = 'chlorine' THEN a.atom_id END) * 100.0 / COUNT(DISTINCT a.atom_id), 2) AS chlorine_percentage FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = 'single' GROUP BY m.molecule_id",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the composition of element chlorine in percentage among the single bond molecules? -- External Knowledge: {'element': {'column_name': 'element', 'table_name': 'atom'}, 'chlorine': {'column_name': 'element', 'table_name': 'atom'}, 'bond': {'column_name': 'bond_type', 'table_name': 'bond'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}, 'single': {'column_name': 'bond_type', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 268,
    "db_id": "toxicology",
    "question": "What are the elements for bond id TR001_10_11?",
    "true_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "text_2_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR001_10_11'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the elements for bond id TR001_10_11? -- External Knowledge: {'elements': {'column_name': 'element', 'table_name': 'atom'}, 'bond': {'column_name': 'bond_id', 'table_name': 'bond'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.element), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN a.element = 'chlorine' THEN 1 END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_chlorine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'carcinogenic'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of element chlorine in carcinogenic molecules? -- External Knowledge: {'chlorine': {'column_name': 'element', 'table_name': 'atom'}, 'element': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.element), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN a.element = 'chlorine' THEN 1 END) * 100.0 / COUNT(DISTINCT m.molecule_id), 2) AS percentage_chlorine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'carcinogenic'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of element chlorine in carcinogenic molecules? -- External Knowledge: {'chlorine': {'column_name': 'element', 'table_name': 'atom'}, 'element': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "true_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T1.element), 0) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "text_2_sql": "SELECT (COUNT(CASE WHEN a.element = 'chlorine' THEN 1 END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_chlorine FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'carcinogenic'",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of element chlorine in carcinogenic molecules? -- External Knowledge: {'chlorine': {'column_name': 'element', 'table_name': 'atom'}, 'element': {'column_name': 'element', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 281,
    "db_id": "toxicology",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "true_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND RIGHT(T1.atom_id, 1) = '4' AND LENGTH(T1.atom_id) = 7",
    "text_2_sql": "SELECT a.element, COUNT(*) as count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'carcinogenic' AND a.atom_id = ( SELECT atom_id FROM ( SELECT molecule_id, atom_id, ROW_NUMBER() OVER (PARTITION BY molecule_id ORDER BY atom_id) as row_num FROM atom ) ranked WHERE ranked.molecule_id = m.molecule_id AND ranked.row_num = 4 ) GROUP BY a.element",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. -- External Knowledge: {'element': {'column_name': 'element', 'table_name': 'atom'}, 'atom': {'column_name': 'atom_id', 'table_name': 'atom'}, 'molecule': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 282,
    "db_id": "toxicology",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "true_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / NULLIF(COUNT(atom_id), 0) AS ratio, label FROM SubQuery GROUP BY label",
    "text_2_sql": "SELECT m.label, COUNT(CASE WHEN a.element = 'Hydrogen' THEN 1 END)::FLOAT / NULLIF(COUNT(*), 0) AS hydrogen_ratio FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR006' GROUP BY m.molecule_id, m.label",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. -- External Knowledge: {'TR006': {'column_name': 'label', 'table_name': 'molecule'}, 'Hydrogen': {'column_name': 'element', 'table_name': 'atom'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 327,
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "true_sql": "SELECT T.molecule_id FROM (SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5) AS t",
    "text_2_sql": "SELECT m.molecule_id, m.label FROM molecule m JOIN ( SELECT molecule_id, COUNT(DISTINCT atom_id) as atom_count FROM atom GROUP BY molecule_id HAVING COUNT(DISTINCT atom_id) > 5 ) a ON m.molecule_id = a.molecule_id WHERE m.label != 'carcinogenic' OR m.label IS NULL",
    "prompt": "CREATE TABLE molecule ( `molecule_id` TEXT NOT NULL, `label` TEXT NULL ); CREATE TABLE atom ( `atom_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `element` TEXT NULL ); CREATE TABLE bond ( `bond_id` TEXT NOT NULL, `molecule_id` TEXT NULL, `bond_type` TEXT NULL ); CREATE TABLE connected ( `atom_id` TEXT NOT NULL, `atom_id2` TEXT NOT NULL, `bond_id` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which non-carcinogenic molecules consisted more than 5 atoms? -- External Knowledge: {'atoms': {'column_name': 'atom_id', 'table_name': 'atom'}, 'molecules': {'column_name': 'molecule_id', 'table_name': 'molecule'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 5,
    "db_id": "california_schools",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "true_sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "text_2_sql": "SELECT COUNT(DISTINCT s.cdscode) FROM satscores sat JOIN schools s ON sat.cds = s.cdscode WHERE sat.avgscrmath > 400 AND s.virtual = 'Y'",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual? -- External Knowledge: {'400': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'Math': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'greater': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'virtual': {'column_name': 'Virtual', 'table_name': 'schools'}, 'SAT': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 11,
    "db_id": "california_schools",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "true_sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.\"Enrollment (K-12)\" + T2.\"Enrollment (Ages 5-17)\" > 500",
    "text_2_sql": "SELECT cdscode FROM frpm WHERE \"Enrollment (K-12)\" > 500;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the codes of the schools with a total enrollment of over 500. -- External Knowledge: {'enrollment': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'over': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'codes': {'column_name': 'CDSCode', 'table_name': 'frpm'}, 'total': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, '500': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 12,
    "db_id": "california_schools",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "true_sql": "SELECT MAX(CAST(T1.\"Free Meal Count (Ages 5-17)\" AS REAL) / NULLIF(T1.\"Enrollment (Ages 5-17)\", 0)) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / NULLIF(T2.NumTstTakr, 0) > 0.3",
    "text_2_sql": "SELECT MAX(f.\"Percent (%) Eligible Free (Ages 5-17)\") as highest_eligible_free_rate FROM satscores s JOIN frpm f ON s.cds = f.cdscode WHERE s.numge1500::float / NULLIF(s.numtsttakr, 0) > 0.3 AND s.numtsttakr > 0 AND f.\"Percent (%) Eligible Free (Ages 5-17)\" IS NOT NULL",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17? -- External Knowledge: {'SAT': {'column_name': 'NumGE1500', 'table_name': 'satscores'}, 'aged': {'column_name': 'Percent (%) Eligible Free (Ages 5-17)', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 17,
    "db_id": "california_schools",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "true_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC NULLS LAST) AS WritingScoreRank FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND NOT CharterNum IS NULL",
    "text_2_sql": "SELECT s.charternum, sa.avgscrwrite FROM schools s JOIN satscores sa ON s.cdscode = sa.cds WHERE sa.avgscrwrite > 499 ORDER BY sa.avgscrwrite DESC",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers. -- External Knowledge: {'charter': {'column_name': 'CharterNum', 'table_name': 'schools'}, 'Writing': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, 'score': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, 'greater': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, '499': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 23,
    "db_id": "california_schools",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "true_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.\"Enrollment (K-12)\" - T2.\"Enrollment (Ages 5-17)\" > 30",
    "text_2_sql": "SELECT f.\"School Name\", s.street FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30 ORDER BY f.\"School Name\"",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. -- External Knowledge: {'enrollements': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'schools': {'column_name': 'School Name', 'table_name': 'frpm'}, 'street': {'column_name': 'Street', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 24,
    "db_id": "california_schools",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "true_sql": "SELECT T2.\"School Name\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.\"Free Meal Count (K-12)\" AS REAL) / NULLIF(T2.\"Enrollment (K-12)\", 0) > 0.1 AND T1.NumGE1500 > 0",
    "text_2_sql": "SELECT DISTINCT s.school FROM schools s JOIN frpm f ON s.cdscode = f.cdscode JOIN satscores sat ON s.cdscode = sat.cds WHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1 AND sat.numtsttakr > 0 AND sat.numge1500 >= 1500",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500? -- External Knowledge: {'test': {'column_name': 'NumTstTakr', 'table_name': 'satscores'}, 'than': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'equal': {'column_name': 'NumGE1500', 'table_name': 'satscores'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 25,
    "db_id": "california_schools",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "true_sql": "SELECT T1.sname, T2.\"Charter Funding Type\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.\"District Name\" LIKE 'Riverside%' GROUP BY T1.sname, T2.\"Charter Funding Type\" HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / NULLIF(COUNT(T1.cds), 0) > 400",
    "text_2_sql": "SELECT schools.school, schools.fundingtype FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Riverside' AND satscores.avgscrmath > 400 GROUP BY schools.school, schools.fundingtype;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools? -- External Knowledge: {'schools': {'column_name': 'School', 'table_name': 'schools'}, 'Riverside': {'column_name': 'County', 'table_name': 'schools'}, 'average': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'math': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'SAT': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'funding': {'column_name': 'FundingType', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "true_sql": "SELECT T1.\"School Name\", T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\" > 800 AND T1.\"School Type\" = 'High Schools (Public)'",
    "text_2_sql": "SELECT f.School_Name, s.street, s.city, s.state, s.zip, s.phone FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE f.\"County Name\" = 'Monterey' AND f.\"School Type\" = 'High School' AND (f.\"Free Meal Count (Ages 5-17)\" > 800 OR f.\"FRPM Count (Ages 5-17)\" > 800)",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? -- External Knowledge: {'free': {'column_name': 'Free Meal Count (Ages 5-17)', 'table_name': 'frpm'}, 'reduced': {'column_name': 'FRPM Count (Ages 5-17)', 'table_name': 'frpm'}, 'address': {'column_name': 'Street', 'table_name': 'schools'}, 'high': {'column_name': 'School Type', 'table_name': 'frpm'}, 'Monterey': {'column_name': 'County Name', 'table_name': 'frpm'}, 'communication': {'column_name': 'Phone', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "true_sql": "SELECT T1.\"School Name\", T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\" > 800 AND T1.\"School Type\" = 'High Schools (Public)'",
    "text_2_sql": "SELECT f.School_Name, s.street, s.city, s.state, s.zip, s.phone FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE f.\"County Name\" = 'Monterey' AND f.\"School Type\" = 'High School' AND (f.\"Free Meal Count (Ages 5-17)\" > 800 OR f.\"FRPM Count (Ages 5-17)\" > 800)",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? -- External Knowledge: {'free': {'column_name': 'Free Meal Count (Ages 5-17)', 'table_name': 'frpm'}, 'reduced': {'column_name': 'FRPM Count (Ages 5-17)', 'table_name': 'frpm'}, 'address': {'column_name': 'Street', 'table_name': 'schools'}, 'high': {'column_name': 'School Type', 'table_name': 'frpm'}, 'Monterey': {'column_name': 'County Name', 'table_name': 'frpm'}, 'communication': {'column_name': 'Phone', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "true_sql": "SELECT T1.\"School Name\", T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\" > 800 AND T1.\"School Type\" = 'High Schools (Public)'",
    "text_2_sql": "SELECT f.School_Name, s.street, s.city, s.state, s.zip, s.phone FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE f.\"County Name\" = 'Monterey' AND f.\"School Type\" = 'High School' AND (f.\"Free Meal Count (Ages 5-17)\" > 800 OR f.\"FRPM Count (Ages 5-17)\" > 800) AND s.street IS NOT NULL AND s.phone IS NOT NULL;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17? -- External Knowledge: {'free': {'column_name': 'Free Meal Count (Ages 5-17)', 'table_name': 'frpm'}, 'reduced': {'column_name': 'FRPM Count (Ages 5-17)', 'table_name': 'frpm'}, 'address': {'column_name': 'Street', 'table_name': 'schools'}, 'high': {'column_name': 'School Type', 'table_name': 'frpm'}, 'Monterey': {'column_name': 'County Name', 'table_name': 'frpm'}, 'communication': {'column_name': 'Phone', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 27,
    "db_id": "california_schools",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "true_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE TO_CHAR(CAST(T2.OpenDate AS TIMESTAMP), 'YYYY') > '1991' OR TO_CHAR(CAST(T2.ClosedDate AS TIMESTAMP), 'YYYY') < '2000'",
    "text_2_sql": "SELECT s.school, sc.avgscrwrite, s.phone FROM schools s JOIN satscores sc ON s.cdscode = sc.cds WHERE (s.opendate > '1991-12-31' OR s.closeddate < '2000-01-01') AND sc.avgscrwrite IS NOT NULL ORDER BY sc.avgscrwrite DESC;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any. -- External Knowledge: {'schools': {'column_name': 'School', 'table_name': 'schools'}, 'score': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, 'school': {'column_name': 'School', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 28,
    "db_id": "california_schools",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "true_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.\"Enrollment (K-12)\" - T1.\"Enrollment (Ages 5-17)\") > (SELECT AVG(T3.\"Enrollment (K-12)\" - T3.\"Enrollment (Ages 5-17)\") FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "text_2_sql": "WITH locally_funded_schools AS ( SELECT f.cdscode, f.\"School Name\", f.\"Enrollment (K-12)\", f.\"Enrollment (Ages 5-17)\", s.doctype FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE s.fundingtype = 'Locally funded' ), avg_difference AS ( SELECT AVG(\"Enrollment (K-12)\" - \"Enrollment (Ages 5-17)\") AS avg_diff FROM locally_funded_schools ) SELECT lfs.\"School Name\", lfs.doctype FROM locally_funded_schools lfs, avg_difference ad WHERE (lfs.\"Enrollment (K-12)\" - lfs.\"Enrollment (Ages 5-17)\") > ad.avg_diff ORDER BY lfs.\"School Name\"",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. -- External Knowledge: {'enrollment': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'schools': {'column_name': 'School Name', 'table_name': 'frpm'}, 'difference': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 31,
    "db_id": "california_schools",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "true_sql": "SELECT CAST(\"Free Meal Count (K-12)\" AS REAL) / NULLIF(\"Enrollment (K-12)\", 0) FROM frpm ORDER BY \"Enrollment (K-12)\" DESC NULLS LAST LIMIT 2 OFFSET 9",
    "text_2_sql": "SELECT f.\"Percent (%) Eligible Free (K-12)\" as eligible_free_rate FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE s.gsserved LIKE '%1-12%' AND f.\"High Grade\" = '12' ORDER BY f.\"Enrollment (K-12)\" DESC LIMIT 2 OFFSET 9",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? -- External Knowledge: {'free': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'enrolment': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'eligible': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'grades': {'column_name': 'GSserved', 'table_name': 'schools'}, '12': {'column_name': 'High Grade', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 32,
    "db_id": "california_schools",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "true_sql": "SELECT CAST(T1.\"FRPM Count (K-12)\" AS REAL) / NULLIF(T1.\"Enrollment (K-12)\", 0) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC::integer = 66 ORDER BY T1.\"FRPM Count (K-12)\" DESC NULLS LAST LIMIT 5",
    "text_2_sql": "SELECT f.\"School Name\", f.\"FRPM Count (K-12)\", f.\"Percent (%) Eligible FRPM (K-12)\" FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE s.doc = '66' AND s.gsoffered LIKE '%1%' AND s.gsoffered LIKE '%12%' ORDER BY f.\"FRPM Count (K-12)\" DESC LIMIT 5",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66? -- External Knowledge: {'free': {'column_name': 'Free Meal Count (K-12)', 'table_name': 'frpm'}, 'reduced': {'column_name': 'FRPM Count (K-12)', 'table_name': 'frpm'}, 'price': {'column_name': 'FRPM Count (K-12)', 'table_name': 'frpm'}, 'meal': {'column_name': 'FRPM Count (K-12)', 'table_name': 'frpm'}, 'schools': {'column_name': 'School Name', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 37,
    "db_id": "california_schools",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "true_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / NULLIF(T1.NumTstTakr, 0) ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT s.street, s.city, s.zip, s.state FROM schools s JOIN satscores sat ON s.cdscode = sat.cds JOIN frpm f ON s.cdscode = f.cdscode WHERE f.\"Percent (%) Eligible FRPM (K-12)\" IS NOT NULL AND sat.avgscrread IS NOT NULL AND sat.avgscrmath IS NOT NULL AND sat.avgscrwrite IS NOT NULL ORDER BY (sat.avgscrread + sat.avgscrmath + sat.avgscrwrite) / 3 ASC LIMIT 1",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. -- External Knowledge: {'Zip': {'column_name': 'Zip', 'table_name': 'schools'}, 'Street': {'column_name': 'Street', 'table_name': 'schools'}, 'City': {'column_name': 'City', 'table_name': 'schools'}, 'State': {'column_name': 'State', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 36,
    "db_id": "california_schools",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "true_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT s.AdmFName1 || ' ' || s.AdmLName1 AS Administrator FROM satscores sat JOIN schools s ON sat.cds = s.cdscode WHERE sat.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL ) AND sat.NumGE1500 IS NOT NULL LIMIT 1",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. -- External Knowledge: {'students': {'column_name': 'NumTstTakr', 'table_name': 'satscores'}, 'scoring': {'column_name': 'NumGE1500', 'table_name': 'satscores'}, '1500': {'column_name': 'NumGE1500', 'table_name': 'satscores'}, 'SAT': {'column_name': 'NumGE1500', 'table_name': 'satscores'}, 'administration': {'column_name': 'AdmFName1', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 39,
    "db_id": "california_schools",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "true_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE TO_CHAR(CAST(T2.OpenDate AS TIMESTAMP), 'YYYY') = '1980' AND T2.County = 'Fresno'",
    "text_2_sql": "SELECT AVG(s.numtsttakr) AS avg_test_takers FROM satscores s JOIN schools sc ON s.cds = sc.cdscode WHERE sc.county = 'Fresno' AND sc.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980? -- External Knowledge: {'takers': {'column_name': 'NumTstTakr', 'table_name': 'satscores'}, 'opened': {'column_name': 'OpenDate', 'table_name': 'schools'}, 'Fresno': {'column_name': 'County', 'table_name': 'schools'}, 'schools': {'column_name': 'School', 'table_name': 'schools'}, 'test': {'column_name': 'NumTstTakr', 'table_name': 'satscores'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 40,
    "db_id": "california_schools",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "true_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND NOT T1.AvgScrRead IS NULL ORDER BY T1.AvgScrRead ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT s.phone FROM schools s JOIN satscores sat ON s.cdscode = sat.cds WHERE s.district = 'Fresno Unified' AND sat.avgscrread = ( SELECT MIN(avgscrread) FROM satscores sat2 JOIN schools s2 ON sat2.cds = s2.cdscode WHERE s2.district = 'Fresno Unified' AND sat2.avgscrread IS NOT NULL ) AND sat.avgscrread IS NOT NULL LIMIT 1",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the telephone number for the school with the lowest average score in reading in Fresno Unified? -- External Knowledge: {'telephone': {'column_name': 'Phone', 'table_name': 'schools'}, 'reading': {'column_name': 'AvgScrRead', 'table_name': 'satscores'}, 'Fresno': {'column_name': 'District', 'table_name': 'schools'}, 'Unified': {'column_name': 'District', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 41,
    "db_id": "california_schools",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "true_sql": "SELECT School FROM (SELECT T2.School, T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC NULLS LAST) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F') AS ranked_schools WHERE rnk <= 5",
    "text_2_sql": "WITH ranked_schools AS ( SELECT s.school, s.county, sat.avgscrread, ROW_NUMBER() OVER (PARTITION BY s.county ORDER BY sat.avgscrread DESC) AS rank FROM schools s JOIN satscores sat ON s.cdscode = sat.cds WHERE s.virtual = 'Y' ) SELECT school, county, avgscrread FROM ranked_schools WHERE rank <= 5 ORDER BY county, avgscrread DESC",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores. -- External Knowledge: {'virtual': {'column_name': 'Virtual', 'table_name': 'schools'}, 'reading': {'column_name': 'AvgScrRead', 'table_name': 'satscores'}, 'counties': {'column_name': 'County', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 45,
    "db_id": "california_schools",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "true_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "text_2_sql": "SELECT satscores.sname, satscores.avgscrwrite FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.admlname1 = 'Ulrich' AND schools.admfname1 = 'Ricci' GROUP BY satscores.sname, satscores.avgscrwrite ORDER BY satscores.sname",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores. -- External Knowledge: {'scores': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, 'schools': {'column_name': 'sname', 'table_name': 'satscores'}, 'score': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}, 'writing': {'column_name': 'AvgScrWrite', 'table_name': 'satscores'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 46,
    "db_id": "california_schools",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "true_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = '31' ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1",
    "text_2_sql": "SELECT s.school, f.\"Enrollment (K-12)\" as enrollees FROM schools s JOIN frpm f ON s.cdscode = f.cdscode WHERE s.state = 'CA' AND f.\"School Type\" = 'Special' AND s.gsserved LIKE '%1%2%3%4%5%6%7%8%9%10%11%12%' ORDER BY f.\"Enrollment (K-12)\" DESC LIMIT 5",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which state special schools have the highest number of enrollees from grades 1 through 12? -- External Knowledge: {'grades': {'column_name': 'GSserved', 'table_name': 'schools'}, 'enrollees': {'column_name': 'Enrollment (K-12)', 'table_name': 'frpm'}, 'special': {'column_name': 'School Type', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 47,
    "db_id": "california_schools",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "true_sql": "SELECT CAST(COUNT(School) AS REAL) / NULLIF(12, 0) FROM schools WHERE DOC = '52' AND County = 'Alameda' AND EXTRACT(YEAR FROM OpenDate) = 1980",
    "text_2_sql": "SELECT AVG(monthly_count) as avg_monthly_schools_opened FROM ( SELECT EXTRACT(MONTH FROM opendate) as month, COUNT(*) as monthly_count FROM schools WHERE county = 'Alameda' AND district LIKE '%Elementary School District%' AND EXTRACT(YEAR FROM opendate) = 1980 GROUP BY EXTRACT(MONTH FROM opendate) ) as monthly_counts;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980? -- External Knowledge: {'opened': {'column_name': 'OpenDate', 'table_name': 'schools'}, 'County': {'column_name': 'County', 'table_name': 'schools'}, 'District': {'column_name': 'District', 'table_name': 'schools'}, 'School': {'column_name': 'School', 'table_name': 'schools'}, 'Alameda': {'column_name': 'County', 'table_name': 'schools'}, '1980': {'column_name': 'OpenDate', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 48,
    "db_id": "california_schools",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN DOC::integer = 54 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN DOC::integer = 52 THEN 1 ELSE 0 END), 0) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "text_2_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN f.\"District Type\" LIKE '%Unified%' THEN 1 END) AS NUMERIC) / NULLIF(COUNT(CASE WHEN f.\"District Type\" LIKE '%Elementary%' THEN 1 END), 0), 2) AS unified_to_elementary_ratio FROM frpm f WHERE f.\"County Name\" = 'Orange' AND f.\"School Type\" = 'Public' GROUP BY f.\"County Name\"",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools? -- External Knowledge: {'School': {'column_name': 'School Name', 'table_name': 'frpm'}, 'District': {'column_name': 'District Name', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "true_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC NULLS LAST LIMIT 1 OFFSET 6",
    "text_2_sql": "SELECT s.school, s.streetabr FROM satscores sat JOIN schools s ON sat.cds = s.cdscode WHERE sat.avgscrmath IS NOT NULL ORDER BY sat.avgscrmath DESC LIMIT 1 OFFSET 6",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the postal street address for the school with the 7th highest Math average? Indicate the school's name. -- External Knowledge: {'Math': {'column_name': 'AvgScrMath', 'table_name': 'satscores'}, 'address': {'column_name': 'Street', 'table_name': 'schools'}, 'postal': {'column_name': 'StreetAbr', 'table_name': 'schools'}, 'school': {'column_name': 'School', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 62,
    "db_id": "california_schools",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "true_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.\"Free Meal Count (K-12)\" AS REAL) * 100 / NULLIF(T1.\"Enrollment (K-12)\", 0) < 0.18",
    "text_2_sql": "SELECT COUNT(*) FROM frpm WHERE \"County Name\" = 'Los Angeles' AND \"Charter School (Y/N)\" = 0 AND \"Percent (%) Eligible Free (K-12)\" < 0.18",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? -- External Knowledge: {'Los Angeles': {'column_name': 'County Name', 'table_name': 'frpm'}, 'free': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'eligible': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'meals': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'schools': {'column_name': 'School Name', 'table_name': 'frpm'}, 'county': {'column_name': 'County Name', 'table_name': 'frpm'}, 'percent': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'Charter': {'column_name': 'Charter School (Y/N)', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "true_sql": "SELECT T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.\"Academic Year\" = '2014-2015'",
    "text_2_sql": "SELECT f.\"Enrollment (Ages 5-17)\" FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE f.\"School Type\" = 'State Special School' AND s.city = 'Fremont' AND f.\"Academic Year\" = '2014-2015'",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year? -- External Knowledge: {'students': {'column_name': 'Enrollment (Ages 5-17)', 'table_name': 'frpm'}, 'Special': {'column_name': 'School Type', 'table_name': 'frpm'}, 'academic': {'column_name': 'Academic Year', 'table_name': 'frpm'}, 'Fremont': {'column_name': 'City', 'table_name': 'schools'}, 'School': {'column_name': 'School Name', 'table_name': 'frpm'}, 'enrolled': {'column_name': 'Enrollment (Ages 5-17)', 'table_name': 'frpm'}, '17': {'column_name': 'Enrollment (Ages 5-17)', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 77,
    "db_id": "california_schools",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "true_sql": "SELECT T2.School, T1.\"FRPM Count (Ages 5-17)\" * 100 / NULLIF(T1.\"Enrollment (Ages 5-17)\", 0) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "text_2_sql": "SELECT s.school, f.\"Percent (%) Eligible FRPM (Ages 5-17)\" FROM schools s JOIN frpm f ON s.cdscode = f.cdscode WHERE s.county = 'Los Angeles' AND s.GSserved LIKE '%K%' AND s.GSserved LIKE '%9%' AND s.GSserved NOT LIKE '%10%' AND s.GSserved NOT LIKE '%11%' AND s.GSserved NOT LIKE '%12%'",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)? -- External Knowledge: {'grade': {'column_name': 'GSserved', 'table_name': 'schools'}, 'FRPM': {'column_name': 'Percent (%) Eligible FRPM (Ages 5-17)', 'table_name': 'frpm'}, '9th': {'column_name': 'GSserved', 'table_name': 'schools'}, 'served': {'column_name': 'GSserved', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 79,
    "db_id": "california_schools",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "true_sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT county, COUNT(*) as virtual_schools FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'Y' GROUP BY county ORDER BY virtual_schools DESC LIMIT 1",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount. -- External Knowledge: {'offer': {'column_name': 'Virtual', 'table_name': 'schools'}, 'offers': {'column_name': 'Virtual', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 82,
    "db_id": "california_schools",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "true_sql": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT gsoffered FROM schools WHERE longitude = (SELECT MAX(longitude) FROM schools) LIMIT 1;",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the grade span offered in the school with the highest longitude? -- External Knowledge: {'grade': {'column_name': 'GSoffered', 'table_name': 'schools'}, 'longitude': {'column_name': 'Longitude', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 83,
    "db_id": "california_schools",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "true_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.\"NSLP Provision Status\" = 'Multiple Provision Types' GROUP BY T2.City",
    "text_2_sql": "WITH k8_magnet_schools AS ( SELECT cdscode, city FROM schools WHERE magnet = 1 AND gsserved LIKE '%K-08%' ), provision_types AS ( SELECT cdscode, COUNT(DISTINCT \"NSLP Provision Status\") AS provision_count FROM frpm GROUP BY cdscode ), multiple_provision_schools AS ( SELECT COUNT(*) AS count FROM k8_magnet_schools kms JOIN provision_types pt ON kms.cdscode = pt.cdscode WHERE pt.provision_count > 1 ), city_school_counts AS ( SELECT city, COUNT(*) AS school_count FROM k8_magnet_schools GROUP BY city ) SELECT (SELECT count FROM multiple_provision_schools) AS multiple_provision_count, COUNT(DISTINCT city) AS city_count, STRING_AGG(city || ': ' || school_count::text, ', ' ORDER BY city) AS city_school_counts FROM city_school_counts",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. -- External Knowledge: {'grade': {'column_name': 'GSserved', 'table_name': 'schools'}, 'magnet': {'column_name': 'Magnet', 'table_name': 'schools'}, 'span': {'column_name': 'GSserved', 'table_name': 'schools'}, '8th': {'column_name': 'GSserved', 'table_name': 'schools'}, 'offers': {'column_name': 'GSoffered', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 85,
    "db_id": "california_schools",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "true_sql": "SELECT T1.\"Free Meal Count (K-12)\" * 100 / NULLIF(T1.\"Enrollment (K-12)\", 0), T1.\"District Code\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "text_2_sql": "SELECT f.\"Percent (%) Eligible Free (K-12)\", f.\"District Code\" FROM frpm f JOIN schools s ON f.cdscode = s.cdscode WHERE s.admfname1 = 'Alusine' LIMIT 1",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school. -- External Knowledge: {'Percent': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'Eligible': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'Free': {'column_name': 'Percent (%) Eligible Free (K-12)', 'table_name': 'frpm'}, 'school': {'column_name': 'School Name', 'table_name': 'frpm'}, 'administrator': {'column_name': 'AdmFName1', 'table_name': 'schools'}, 'first': {'column_name': 'AdmFName1', 'table_name': 'schools'}, 'district': {'column_name': 'District Code', 'table_name': 'frpm'}, 'code': {'column_name': 'District Code', 'table_name': 'frpm'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 87,
    "db_id": "california_schools",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "true_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC::integer = 54 AND EXTRACT(YEAR FROM T2.OpenDate) BETWEEN 2009 AND 2010 AND T2.SOC::integer = 62",
    "text_2_sql": "SELECT DISTINCT admemail1, admemail2, admemail3 FROM schools WHERE county = 'San Bernardino' AND district = 'San Bernardino City Unified' AND city = 'San Bernardino' AND opendate BETWEEN '2009-01-01' AND '2010-12-31' AND ( (gsserved LIKE '%6%' AND gsserved LIKE '%7%' AND gsserved LIKE '%8%') OR (gsserved LIKE '%K%' AND gsserved LIKE '%1%' AND gsserved LIKE '%2%' AND gsserved LIKE '%3%' AND gsserved LIKE '%4%' AND gsserved LIKE '%5%' AND gsserved LIKE '%6%' AND gsserved LIKE '%7%' AND gsserved LIKE '%8%' AND gsserved LIKE '%9%' AND gsserved LIKE '%10%' AND gsserved LIKE '%11%' AND gsserved LIKE '%12%') ) AND charter = 0",
    "prompt": "CREATE TABLE satscores ( `numge1500` BIGINT NULL, `enroll12` BIGINT NULL, `numtsttakr` BIGINT NULL, `avgscrread` BIGINT NULL, `avgscrmath` BIGINT NULL, `avgscrwrite` BIGINT NULL, `rtype` TEXT NULL, `sname` TEXT NULL, `dname` TEXT NULL, `cname` TEXT NULL, `cds` TEXT NOT NULL ); CREATE TABLE frpm ( `irc` BIGINT NULL, `District Code` BIGINT NULL, `Charter School (Y/N)` BIGINT NULL, `Enrollment (K-12)` REAL NULL, `Free Meal Count (K-12)` REAL NULL, `Percent (%) Eligible Free (K-12)` REAL NULL, `FRPM Count (K-12)` REAL NULL, `Percent (%) Eligible FRPM (K-12)` REAL NULL, `Enrollment (Ages 5-17)` REAL NULL, `Free Meal Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible Free (Ages 5-17)` REAL NULL, `FRPM Count (Ages 5-17)` REAL NULL, `Percent (%) Eligible FRPM (Ages 5-17)` REAL NULL, `2013-14 CALPADS Fall 1 Certification Status` BIGINT NULL, `High Grade` TEXT NULL, `Charter Funding Type` TEXT NULL, `Academic Year` TEXT NULL, `County Code` TEXT NULL, `School Code` TEXT NULL, `County Name` TEXT NULL, `District Name` TEXT NULL, `School Name` TEXT NULL, `District Type` TEXT NULL, `School Type` TEXT NULL, `Educational Option Type` TEXT NULL, `NSLP Provision Status` TEXT NULL, `Charter School Number` TEXT NULL, `cdscode` TEXT NULL, `Low Grade` TEXT NULL ); CREATE TABLE schools ( `magnet` BIGINT NULL, `latitude` REAL NULL, `longitude` REAL NULL, `closeddate` DATE NULL, `charter` BIGINT NULL, `opendate` DATE NULL, `lastupdate` DATE NULL, `street` TEXT NULL, `streetabr` TEXT NULL, `city` TEXT NULL, `zip` TEXT NULL, `state` TEXT NULL, `mailstreet` TEXT NULL, `mailstrabr` TEXT NULL, `mailcity` TEXT NULL, `mailzip` TEXT NULL, `mailstate` TEXT NULL, `phone` TEXT NULL, `ext` TEXT NULL, `website` TEXT NULL, `charternum` TEXT NULL, `fundingtype` TEXT NULL, `doc` TEXT NULL, `doctype` TEXT NULL, `soc` TEXT NULL, `soctype` TEXT NULL, `edopscode` TEXT NULL, `cdscode` TEXT NULL, `eilcode` TEXT NULL, `eilname` TEXT NULL, `gsoffered` TEXT NULL, `gsserved` TEXT NULL, `virtual` TEXT NULL, `admfname1` TEXT NULL, `admlname1` TEXT NULL, `admemail1` TEXT NULL, `admfname2` TEXT NULL, `admlname2` TEXT NULL, `admemail2` TEXT NULL, `admfname3` TEXT NULL, `admlname3` TEXT NULL, `admemail3` TEXT NULL, `edopsname` TEXT NULL, `ncesdist` TEXT NULL, `ncesschool` TEXT NULL, `statustype` TEXT NULL, `county` TEXT NULL, `district` TEXT NULL, `school` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? -- External Knowledge: {'City': {'column_name': 'City', 'table_name': 'schools'}, 'Schools': {'column_name': 'School', 'table_name': 'schools'}, 'Bernardino': {'column_name': 'County', 'table_name': 'schools'}, 'Unified': {'column_name': 'District', 'table_name': 'schools'}, 'school': {'column_name': 'School', 'table_name': 'schools'}, 'San': {'column_name': 'City', 'table_name': 'schools'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 89,
    "db_id": "financial",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "true_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "text_2_sql": "SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN disp di ON a.account_id = di.account_id JOIN card c ON di.disp_id = c.disp_id JOIN trans t ON a.account_id = t.account_id WHERE d.a3 = 'east Bohemia' AND t.date < c.issued",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many accounts who choose issuance after transaction are staying in East Bohemia region? -- External Knowledge: {'transaction': {'column_name': 'type', 'table_name': 'trans'}, 'issuance': {'column_name': 'issued', 'table_name': 'card'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'region': {'column_name': 'A3', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 92,
    "db_id": "financial",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "true_sql": "SELECT COUNT(DISTINCT T2.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "text_2_sql": "SELECT COUNT(DISTINCT d.district_id) FROM district d WHERE d.a13 > 6000 AND d.a13 < 10000",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List out the no. of districts that have female average salary is more than 6000 but less than 10000? -- External Knowledge: {'districts': {'column_name': 'district_id', 'table_name': 'district'}, 'female': {'column_name': 'gender', 'table_name': 'client'}, 'salary': {'column_name': 'A13', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 93,
    "db_id": "financial",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "true_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "text_2_sql": "SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'male' AND d.a3 = 'north Bohemia' AND d.a13 > 8000",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many male customers who are living in North Bohemia have average salary greater than 8000? -- External Knowledge: {'male': {'column_name': 'gender', 'table_name': 'client'}, 'Bohemia': {'column_name': 'A3', 'table_name': 'district'}, 'North': {'column_name': 'A3', 'table_name': 'district'}, 'salary': {'column_name': 'A13', 'table_name': 'district'}, '8000': {'column_name': 'A13', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 94,
    "db_id": "financial",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "true_sql": "SELECT T1.account_id, (SELECT MAX(A11) - MIN(A11) FROM district) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = (SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC NULLS FIRST LIMIT 1) ORDER BY T2.A11 DESC NULLS LAST LIMIT 1",
    "text_2_sql": "WITH female_clients AS ( SELECT c.client_id, c.birth_date, d.account_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE c.gender = 'F' ), client_avg_salary AS ( SELECT fc.client_id, fc.birth_date, fc.account_id, AVG(t.amount) as avg_salary FROM female_clients fc JOIN trans t ON fc.account_id = t.account_id WHERE t.type = 'credit' GROUP BY fc.client_id, fc.birth_date, fc.account_id ), oldest_lowest_salary AS ( SELECT account_id, avg_salary FROM client_avg_salary WHERE (birth_date, avg_salary) = ( SELECT birth_date, avg_salary FROM client_avg_salary ORDER BY birth_date ASC, avg_salary ASC LIMIT 1 ) ), highest_avg_salary AS ( SELECT MAX(avg_salary) as max_salary FROM client_avg_salary ) SELECT ols.account_id, ols.avg_salary as lowest_avg_salary, has.max_salary as highest_avg_salary, has.max_salary - ols.avg_salary as salary_gap FROM oldest_lowest_salary ols, highest_avg_salary has",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? -- External Knowledge: {'salary': {'column_name': 'amount', 'table_name': 'trans'}, 'average': {'column_name': 'amount', 'table_name': 'trans'}, 'lowest': {'column_name': 'amount', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 95,
    "db_id": "financial",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "true_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T4.district_id = T1.district_id WHERE T2.client_id = (SELECT client_id FROM client ORDER BY birth_date DESC NULLS LAST LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "text_2_sql": "SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN trans t ON a.account_id = t.account_id WHERE c.birth_date = (SELECT MAX(birth_date) FROM client) AND t.type = 'CREDIT' GROUP BY a.account_id, c.birth_date HAVING AVG(t.amount) = ( SELECT AVG(t2.amount) FROM trans t2 JOIN account a2 ON t2.account_id = a2.account_id JOIN disp d2 ON a2.account_id = d2.account_id JOIN client c2 ON d2.client_id = c2.client_id WHERE c2.birth_date = (SELECT MAX(birth_date) FROM client) AND t2.type = 'CREDIT' GROUP BY a2.account_id ORDER BY AVG(t2.amount) DESC LIMIT 1 ) ORDER BY a.account_id",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List out the account numbers of clients who are youngest and have highest average salary? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'youngest': {'column_name': 'birth_date', 'table_name': 'client'}, 'salary': {'column_name': 'amount', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 98,
    "db_id": "financial",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "true_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE EXTRACT(YEAR FROM l.date) = 1997 AND l.status = 'A' AND a.frequency = 'WEEKLY' AND l.amount = ( SELECT MIN(amount) FROM loan WHERE EXTRACT(YEAR FROM date) = 1997 AND status = 'A' )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement. -- External Knowledge: {'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'approved': {'column_name': 'status', 'table_name': 'loan'}, 'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'date': {'column_name': 'date', 'table_name': 'loan'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'weekly': {'column_name': 'frequency', 'table_name': 'account'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 99,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "true_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T2.date AS TIMESTAMP), 'YYYY') = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT a.account_id, l.amount, a.date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND EXTRACT(YEAR FROM a.date) = 1993 AND l.amount = ( SELECT MAX(l2.amount) FROM loan l2 JOIN account a2 ON l2.account_id = a2.account_id WHERE l2.duration > 12 AND EXTRACT(YEAR FROM a2.date) = 1993 ) ORDER BY l.amount DESC, a.date",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993. -- External Knowledge: {'account': {'column_name': 'account_id', 'table_name': 'account'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'loan': {'column_name': 'loan_id', 'table_name': 'loan'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 100,
    "db_id": "financial",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "true_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND TO_CHAR(CAST(T2.birth_date AS TIMESTAMP), 'YYYY') < '1950' AND T1.A2 = 'Sokolov'",
    "text_2_sql": "SELECT COUNT(DISTINCT c.client_id) FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.a2 = 'Sokolov'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov? -- External Knowledge: {'born': {'column_name': 'birth_date', 'table_name': 'client'}, 'opened': {'column_name': 'date', 'table_name': 'account'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'female': {'column_name': 'gender', 'table_name': 'client'}, 'Sokolov': {'column_name': 'A2', 'table_name': 'district'}, '1950': {'column_name': 'birth_date', 'table_name': 'client'}, 'customers': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 112,
    "db_id": "financial",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "true_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "text_2_sql": "SELECT DISTINCT d.district_id FROM client c JOIN disp dp ON c.client_id = dp.client_id JOIN account a ON dp.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date = '1976-01-29' AND c.gender = 'female'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the female client who was born in 1976/1/29, which district did she opened her account? -- External Knowledge: {'born': {'column_name': 'birth_date', 'table_name': 'client'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'female': {'column_name': 'gender', 'table_name': 'client'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 115,
    "db_id": "financial",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.client_id), 0) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(*), 2) AS male_percentage FROM district d JOIN client c ON d.district_id = c.district_id WHERE d.a3 = 'south Bohemia' AND d.district_id = ( SELECT district_id FROM district WHERE a3 = 'south Bohemia' ORDER BY CAST(a4 AS INTEGER) DESC LIMIT 1 )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'inhabitants': {'column_name': 'A4', 'table_name': 'district'}, 'male': {'column_name': 'gender', 'table_name': 'client'}, 'Bohemia': {'column_name': 'A3', 'table_name': 'district'}, 'south': {'column_name': 'A3', 'table_name': 'district'}, 'biggest': {'column_name': 'A4', 'table_name': 'district'}, 'branch': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T3.date = '1998-12-27' THEN T3.balance ELSE 0 END) - SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END)) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END), 0) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "text_2_sql": "SELECT (MAX(CASE WHEN t.date = '1998-12-27' THEN t.balance END) - MIN(CASE WHEN t.date = '1993-03-22' THEN t.balance END)) * 100.0 / MIN(CASE WHEN t.date = '1993-03-22' THEN t.balance END) AS balance_increase_rate FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN trans t ON l.account_id = t.account_id WHERE l.status = 'A' AND l.date = '1993-07-05' AND d.type = 'OWNER' AND t.date IN ('1993-03-22', '1998-12-27') GROUP BY l.account_id ORDER BY l.date LIMIT 1",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? -- External Knowledge: {'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'balance': {'column_name': 'balance', 'table_name': 'trans'}, 'approved': {'column_name': 'status', 'table_name': 'loan'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T3.date = '1998-12-27' THEN T3.balance ELSE 0 END) - SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END)) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END), 0) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "text_2_sql": "SELECT (end_balance - start_balance) / NULLIF(start_balance, 0) * 100 AS balance_increase_rate FROM (SELECT MIN(t1.balance) AS start_balance, MAX(t2.balance) AS end_balance FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN trans t1 ON l.account_id = t1.account_id JOIN trans t2 ON l.account_id = t2.account_id WHERE l.status = 'A' AND l.date = '1993-07-05' AND t1.date = '1993-03-22' AND t2.date = '1998-12-27' GROUP BY l.account_id ORDER BY l.date LIMIT 1) subquery",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? -- External Knowledge: {'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'balance': {'column_name': 'balance', 'table_name': 'trans'}, 'approved': {'column_name': 'status', 'table_name': 'loan'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN T3.date = '1998-12-27' THEN T3.balance ELSE 0 END) - SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END)) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END), 0) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "text_2_sql": "SELECT (MAX(CASE WHEN t.date = '1998-12-27' THEN t.balance END) - MIN(CASE WHEN t.date = '1993-03-22' THEN t.balance END)) * 100.0 / MIN(CASE WHEN t.date = '1993-03-22' THEN t.balance END) AS balance_increase_rate FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN trans t ON l.account_id = t.account_id WHERE l.status = 'A' AND l.date = '1993-07-05' AND d.type = 'OWNER' AND t.date IN ('1993-03-22', '1998-12-27') GROUP BY l.account_id ORDER BY l.date LIMIT 1",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? -- External Knowledge: {'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'balance': {'column_name': 'balance', 'table_name': 'trans'}, 'approved': {'column_name': 'status', 'table_name': 'loan'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "challenging"
  },
  {
    "question_id": 117,
    "db_id": "financial",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "true_sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / NULLIF(SUM(amount), 0) FROM loan",
    "text_2_sql": "SELECT (SUM(CASE WHEN payments = amount AND status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_fully_paid_no_issue FROM loan WHERE status IS NOT NULL AND amount IS NOT NULL AND payments IS NOT NULL",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the percentage of loan amount that has been fully paid with no issue. -- External Knowledge: {'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'paid': {'column_name': 'payments', 'table_name': 'loan'}, 'issue': {'column_name': 'status', 'table_name': 'loan'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 118,
    "db_id": "financial",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "true_sql": "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(account_id), 0) FROM loan WHERE amount < 100000",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN l.status = 'running' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_running_no_issue FROM loan l WHERE l.amount < 100000",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue. -- External Knowledge: {'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'running': {'column_name': 'status', 'table_name': 'loan'}, 'issue': {'column_name': 'status', 'table_name': 'loan'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 125,
    "db_id": "financial",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "true_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / NULLIF(T3.A12, 0) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "text_2_sql": "SELECT d.district_id, d.a2 AS district_name, ((d.a13 - d.a12) / d.a12) * 100 AS unemployment_rate_increase_percentage FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'running' AND l.amount > 0 ORDER BY unemployment_rate_increase_percentage DESC",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. -- External Knowledge: {'loans': {'column_name': 'loan_id', 'table_name': 'loan'}, 'running': {'column_name': 'status', 'table_name': 'loan'}, 'debt': {'column_name': 'amount', 'table_name': 'loan'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, 'unemployment': {'column_name': 'A12', 'table_name': 'district'}, '1995': {'column_name': 'A12', 'table_name': 'district'}, '1996': {'column_name': 'A13', 'table_name': 'district'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 128,
    "db_id": "financial",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "true_sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC NULLS LAST LIMIT 9",
    "text_2_sql": "SELECT d.district_id, COUNT(DISTINCT c.client_id) AS female_account_holders FROM district d JOIN account a ON d.district_id = a.district_id JOIN disp dp ON a.account_id = dp.account_id JOIN client c ON dp.client_id = c.client_id WHERE c.gender = 'Female' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 9",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders. -- External Knowledge: {'districts': {'column_name': 'district_id', 'table_name': 'district'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'female': {'column_name': 'gender', 'table_name': 'client'}, 'holders': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 136,
    "db_id": "financial",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "true_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "text_2_sql": "SELECT COUNT(DISTINCT l.account_id) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'MONTHLY' AND l.status = 'A'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved? -- External Knowledge: {'loans': {'column_name': 'loan_id', 'table_name': 'loan'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'monthly': {'column_name': 'frequency', 'table_name': 'account'}, 'approved': {'column_name': 'status', 'table_name': 'loan'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'issuance': {'column_name': 'date', 'table_name': 'loan'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 137,
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1?",
    "true_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "text_2_sql": "SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE d.district_id = 1 AND l.status = 'running'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many accounts have running contracts in Branch location 1? -- External Knowledge: {'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'contracts': {'column_name': 'loan_id', 'table_name': 'loan'}, 'Branch': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "true_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC NULLS LAST LIMIT 1 OFFSET 1)",
    "text_2_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.district_id = ( SELECT district_id FROM district WHERE a14 = ( SELECT a14 FROM ( SELECT a14, ROW_NUMBER() OVER (ORDER BY a14 DESC) AS rank FROM district ) ranked WHERE rank = 2 ) )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'male': {'column_name': 'gender', 'table_name': 'client'}, '1995': {'column_name': 'date', 'table_name': 'trans'}, 'crimes': {'column_name': 'A14', 'table_name': 'district'}, 'branch': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 129,
    "db_id": "financial",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "true_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND CAST(T3.date AS TEXT) LIKE '1996-01%' ORDER BY T1.A2 ASC LIMIT 10",
    "text_2_sql": "SELECT d.a2 AS district_name, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'withdrawal' AND t.operation != 'credit card withdrawal' AND DATE_TRUNC('month', t.date) = DATE '1996-01-01' ORDER BY t.amount DESC LIMIT 10",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996? -- External Knowledge: {'withdrawals': {'column_name': 'type', 'table_name': 'trans'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, '1996': {'column_name': 'date', 'table_name': 'trans'}, 'month': {'column_name': 'date', 'table_name': 'trans'}, 'January': {'column_name': 'date', 'table_name': 'trans'}, 'amount': {'column_name': 'amount', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 137,
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1?",
    "true_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "text_2_sql": "SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE d.district_id = 1 AND l.status = 'running'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How many accounts have running contracts in Branch location 1? -- External Knowledge: {'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'contracts': {'column_name': 'loan_id', 'table_name': 'loan'}, 'Branch': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "true_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC NULLS LAST LIMIT 1 OFFSET 1)",
    "text_2_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_clients_count FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.district_id = ( SELECT district_id FROM ( SELECT district_id, a14, DENSE_RANK() OVER (ORDER BY a14 DESC) AS crime_rank FROM district ) ranked_districts WHERE crime_rank = 2 )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'male': {'column_name': 'gender', 'table_name': 'client'}, '1995': {'column_name': 'date', 'table_name': 'trans'}, 'crimes': {'column_name': 'A14', 'table_name': 'district'}, 'branch': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 145,
    "db_id": "financial",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "true_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE TO_CHAR(CAST(date AS TIMESTAMP), 'YYYY') = '1998')",
    "text_2_sql": "SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cd ON d.disp_id = cd.disp_id JOIN trans t ON a.account_id = t.account_id WHERE cd.type = 'credit' AND EXTRACT(YEAR FROM t.date) = 1998 AND t.amount < ( SELECT AVG(amount) FROM trans WHERE EXTRACT(YEAR FROM date) = 1998 ) ORDER BY c.client_id",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998? -- External Knowledge: {'account': {'column_name': 'account_id', 'table_name': 'account'}, 'holder': {'column_name': 'client_id', 'table_name': 'client'}, 'transactions': {'column_name': 'trans_id', 'table_name': 'trans'}, 'credit': {'column_name': 'type', 'table_name': 'card'}, 'amount': {'column_name': 'amount', 'table_name': 'trans'}, '1998': {'column_name': 'date', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 149,
    "db_id": "financial",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "true_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type <> 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "text_2_sql": "SELECT DISTINCT a.frequency AS account_type FROM account a JOIN district d ON a.district_id = d.district_id LEFT JOIN loan l ON a.account_id = l.account_id WHERE d.a11 > 8000 AND d.a11 <= 9000 AND l.loan_id IS NULL ORDER BY a.frequency",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. -- External Knowledge: {'account': {'column_name': 'account_id', 'table_name': 'account'}, '9000': {'column_name': 'A11', 'table_name': 'district'}, '8000': {'column_name': 'A11', 'table_name': 'district'}, 'income': {'column_name': 'A11', 'table_name': 'district'}, 'residents': {'column_name': 'A11', 'table_name': 'district'}, 'located': {'column_name': 'district_id', 'table_name': 'account'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 152,
    "db_id": "financial",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "true_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE TO_CHAR(CAST(T2.date AS TIMESTAMP), 'YYYY') >= '1997' AND T1.A15 > 4000",
    "text_2_sql": "SELECT AVG(d.a14) AS avg_crimes_1995 FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.a14 > 4000 AND EXISTS ( SELECT 1 FROM account a2 WHERE a2.district_id = d.district_id AND a2.date >= '1997-01-01' )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997? -- External Knowledge: {'regions': {'column_name': 'district_id', 'table_name': 'district'}, 'region': {'column_name': 'district_id', 'table_name': 'district'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 159,
    "db_id": "financial",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "true_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "text_2_sql": "SELECT t.trans_id, t.date, t.amount, t.balance FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.type = 'withdrawal' AND t.operation = 'cash'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- List all the withdrawals in cash transactions that the client with the id 3356 makes. -- External Knowledge: {'withdrawals': {'column_name': 'type', 'table_name': 'trans'}, 'cash': {'column_name': 'type', 'table_name': 'trans'}, 'transactions': {'column_name': 'trans_id', 'table_name': 'trans'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}, '3356': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "simple"
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.client_id), 0) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_women FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dt ON a.district_id = dt.district_id WHERE dt.a12 > 10000 AND d.type = 'OWNER'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, 'opened': {'column_name': 'date', 'table_name': 'account'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'salary': {'column_name': 'A12', 'table_name': 'district'}, '10000': {'column_name': 'A12', 'table_name': 'district'}, 'women': {'column_name': 'gender', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.client_id), 0) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_women FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dt ON a.district_id = dt.district_id WHERE dt.a12 > 10000 AND d.type = 'OWNER'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, 'opened': {'column_name': 'date', 'table_name': 'account'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'salary': {'column_name': 'A12', 'table_name': 'district'}, '10000': {'column_name': 'A12', 'table_name': 'district'}, 'women': {'column_name': 'gender', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 2,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.client_id), 0) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "text_2_sql": "SELECT ROUND(COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*), 2) AS percentage_women FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dt ON a.district_id = dt.district_id WHERE dt.a12 > 10000 AND d.type = 'OWNER'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'district': {'column_name': 'district_id', 'table_name': 'district'}, 'opened': {'column_name': 'date', 'table_name': 'account'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'salary': {'column_name': 'A12', 'table_name': 'district'}, '10000': {'column_name': 'A12', 'table_name': 'district'}, 'women': {'column_name': 'gender', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 3,
    "is_valid": false,
    "difficulty": "moderate"
  },
  {
    "question_id": 169,
    "db_id": "financial",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "true_sql": "SELECT CAST((SUM(CASE WHEN TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / NULLIF(SUM(CASE WHEN TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1996' THEN T1.amount ELSE 0 END), 0) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "text_2_sql": "SELECT (SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1997 THEN l.amount ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1996 THEN l.amount ELSE 0 END)) / NULLIF(SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1996 THEN l.amount ELSE 0 END), 0) * 100 AS growth_rate FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'male' AND EXTRACT(YEAR FROM l.date) IN (1996, 1997) AND d.type = 'OWNER'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? -- External Knowledge: {'male': {'column_name': 'gender', 'table_name': 'client'}, 'loans': {'column_name': 'amount', 'table_name': 'loan'}, '1996': {'column_name': 'date', 'table_name': 'loan'}, '1997': {'column_name': 'date', 'table_name': 'loan'}, 'accounts': {'column_name': 'account_id', 'table_name': 'account'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 173,
    "db_id": "financial",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "true_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM \"order\" GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "text_2_sql": "SELECT a.frequency, COUNT(*) AS statement_count, SUM(CASE WHEN t.type = 'debit' THEN t.amount ELSE 0 END) AS total_debit FROM account a LEFT JOIN trans t ON a.account_id = t.account_id WHERE a.account_id = 3 AND t.k_symbol = 'statement' GROUP BY a.frequency HAVING SUM(CASE WHEN t.type = 'debit' AND t.amount = 3539 THEN 1 ELSE 0 END) > 0",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? -- External Knowledge: {'account': {'column_name': 'account_id', 'table_name': 'account'}, 'released': {'column_name': 'date', 'table_name': 'trans'}, 'debiting': {'column_name': 'type', 'table_name': 'trans'}, '3539': {'column_name': 'amount', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "challenging"
  },
  {
    "question_id": 186,
    "db_id": "financial",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.client_id), 0) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "text_2_sql": "SELECT ROUND(COUNT(DISTINCT c.client_id) * 100.0 / (SELECT COUNT(*) FROM client WHERE gender = 'M'), 2) AS percentage FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE c.gender = 'M' AND a.frequency = 'WEEKLY'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What percentage of male clients request for weekly statements to be issued? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'male': {'column_name': 'gender', 'table_name': 'client'}, 'issued': {'column_name': 'issued', 'table_name': 'card'}, 'weekly': {'column_name': 'frequency', 'table_name': 'account'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 189,
    "db_id": "financial",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "true_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC NULLS FIRST, T2.A11 ASC NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'female' AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'female') AND t.k_symbol = 'SALARY' GROUP BY a.account_id HAVING AVG(t.amount) = ( SELECT MIN(avg_salary) FROM ( SELECT AVG(t2.amount) as avg_salary FROM account a2 JOIN disp d2 ON a2.account_id = d2.account_id JOIN client c2 ON d2.client_id = c2.client_id JOIN trans t2 ON a2.account_id = t2.account_id WHERE c2.gender = 'female' AND c2.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'female') AND t2.k_symbol = 'SALARY' GROUP BY a2.account_id ) subquery )",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Name the account numbers of female clients who are oldest and have lowest average salary? -- External Knowledge: {'clients': {'column_name': 'client_id', 'table_name': 'client'}, 'account': {'column_name': 'account_id', 'table_name': 'account'}, 'female': {'column_name': 'gender', 'table_name': 'client'}, 'oldest': {'column_name': 'birth_date', 'table_name': 'client'}, 'salary': {'column_name': 'amount', 'table_name': 'trans'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 192,
    "db_id": "financial",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "true_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "text_2_sql": "SELECT AVG(l.amount) AS avg_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id JOIN trans t ON a.account_id = t.account_id WHERE l.status = 'Running' AND c.issued < t.date GROUP BY t.trans_id",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- What is the average amount of loan which are still on running contract with statement issuance after each transaction? -- External Knowledge: {'transaction': {'column_name': 'trans_id', 'table_name': 'trans'}, 'loan': {'column_name': 'loan_id', 'table_name': 'loan'}, 'amount': {'column_name': 'amount', 'table_name': 'loan'}, 'contract': {'column_name': 'status', 'table_name': 'loan'}, 'issuance': {'column_name': 'issued', 'table_name': 'card'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  },
  {
    "question_id": 194,
    "db_id": "financial",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "true_sql": "SELECT T1.client_id, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T3.birth_date) AS age FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "text_2_sql": "SELECT DISTINCT c.client_id, EXTRACT(YEAR FROM AGE(CURRENT_DATE, c.birth_date)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cd ON d.disp_id = cd.disp_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE cd.type = 'gold' OR cd.type = 'platinum' AND l.status = 'A'",
    "prompt": "CREATE TABLE district ( `a16` BIGINT NULL, `a11` BIGINT NULL, `a12` REAL NULL, `a13` REAL NULL, `a14` BIGINT NULL, `a15` BIGINT NULL, `district_id` BIGINT NOT NULL, `a8` BIGINT NULL, `a9` BIGINT NULL, `a10` REAL NULL, `a2` TEXT NULL, `a3` TEXT NULL, `a4` TEXT NULL, `a5` TEXT NULL, `a6` TEXT NULL, `a7` TEXT NULL ); CREATE TABLE account ( `account_id` BIGINT NOT NULL, `district_id` BIGINT NULL, `date` DATE NULL, `frequency` TEXT NULL ); CREATE TABLE client ( `client_id` BIGINT NOT NULL, `birth_date` DATE NULL, `district_id` BIGINT NULL, `gender` TEXT NULL ); CREATE TABLE disp ( `disp_id` BIGINT NOT NULL, `client_id` BIGINT NULL, `account_id` BIGINT NULL, `type` TEXT NULL ); CREATE TABLE card ( `card_id` BIGINT NOT NULL, `disp_id` BIGINT NULL, `issued` DATE NULL, `type` TEXT NULL ); CREATE TABLE loan ( `loan_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `duration` BIGINT NULL, `payments` REAL NULL, `status` TEXT NULL ); CREATE TABLE order ( `order_id` BIGINT NOT NULL, `account_id` BIGINT NULL, `account_to` BIGINT NULL, `amount` REAL NULL, `bank_to` TEXT NULL, `k_symbol` TEXT NULL ); CREATE TABLE trans ( `account` BIGINT NULL, `account_id` BIGINT NULL, `date` DATE NULL, `amount` BIGINT NULL, `balance` BIGINT NULL, `trans_id` BIGINT NOT NULL, `bank` TEXT NULL, `type` TEXT NULL, `operation` TEXT NULL, `k_symbol` TEXT NULL ); -- Using valid PostgreSQL and understanding External Knowledge, answer the following questions for the tables provided above. -- Provide the IDs and age of the client with high level credit card, which is eligible for loans. -- External Knowledge: {'IDs': {'column_name': 'client_id', 'table_name': 'client'}, 'age': {'column_name': 'birth_date', 'table_name': 'client'}, 'credit': {'column_name': 'type', 'table_name': 'card'}, 'loans': {'column_name': 'loan_id', 'table_name': 'loan'}, 'client': {'column_name': 'client_id', 'table_name': 'client'}} Generate the PostgreSQL for the above question after thinking step by step: In your response, you do not need to mention your intermediate steps. Do not include any comments in your response. Do not need to start with the symbol ``` You only need to return the result PostgreSQL SQL code start from SELECT",
    "attempt": 1,
    "is_valid": true,
    "difficulty": "moderate"
  }
]