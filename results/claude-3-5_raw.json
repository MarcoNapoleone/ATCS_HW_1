[
  {
    "question_id": 1357,
    "db_id": "student_club",
    "question": "State the date Connor Hilton paid his/her dues.",
    "true_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "text_2_sql": "SELECT date_received\nFROM income\nJOIN member ON income.link_to_member = member.member_id\nWHERE member.first_name = 'Connor' AND member.last_name = 'Hilton'\nAND income.source = 'Dues'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- State the date Connor Hilton paid his/her dues.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END), 0) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "text_2_sql": "SELECT COUNT(*) AS count\nFROM (\n    SELECT b1.amount AS kickoff_amount, b2.amount AS october_amount\n    FROM budget b1\n    JOIN event e1 ON b1.link_to_event = e1.event_id\n    JOIN budget b2 ON b2.category = b1.category\n    JOIN event e2 ON b2.link_to_event = e2.event_id\n    WHERE b1.category = 'Advertisement'\n    AND e1.event_name = 'Yearly Kickoff'\n    AND e2.event_name = 'October Meeting'\n    AND b1.amount > b2.amount\n) subquery",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1361,
    "db_id": "student_club",
    "question": "What is the total cost of the pizzas for all the events?",
    "true_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "text_2_sql": "SELECT SUM(e.cost) AS total_pizza_cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE e.expense_description ILIKE '%pizza%'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the total cost of the pizzas for all the events?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1362,
    "db_id": "student_club",
    "question": "How many cities are there in Orange County, Virginia?",
    "true_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "text_2_sql": "SELECT COUNT(DISTINCT city)\nFROM zip_code\nWHERE county = 'Orange' AND state = 'Virginia';",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many cities are there in Orange County, Virginia?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1368,
    "db_id": "student_club",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "true_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "text_2_sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.phone = '809-555-3360'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What does the person with the phone number \"809-555-3360\" major in?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1371,
    "db_id": "student_club",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "true_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "text_2_sql": "SELECT COUNT(DISTINCT a.link_to_member) AS attendees_count\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many members attended the \"Women's Soccer\" event?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1375,
    "db_id": "student_club",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "true_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "text_2_sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.department = 'School of Applied Sciences, Technology and Education';",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List all the members of the \"School of Applied Sciences, Technology and Education\" department.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1376,
    "db_id": "student_club",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / NULLIF(T1.amount, 0) DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.event_name, b.spent / b.amount AS spend_ratio\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed' AND b.amount > 0\nORDER BY spend_ratio DESC\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Among all the closed events, which event has the highest spend-to-budget ratio?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1378,
    "db_id": "student_club",
    "question": "What is the highest amount of budget spend for an event?",
    "true_sql": "SELECT MAX(spent) FROM budget",
    "text_2_sql": "SELECT MAX(spent) AS highest_budget_spend\nFROM budget\nWHERE link_to_event IS NOT NULL",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the highest amount of budget spend for an event?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1380,
    "db_id": "student_club",
    "question": "What is the total amount of money spent for food?",
    "true_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "text_2_sql": "SELECT SUM(spent) AS total_spent_on_food\nFROM budget\nWHERE category = 'food'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the total amount of money spent for food?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1381,
    "db_id": "student_club",
    "question": "List the name of students that have attended more than 7 events.",
    "true_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id, T1.first_name, T1.last_name HAVING COUNT(T2.link_to_event) > 7",
    "text_2_sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nGROUP BY m.member_id, m.first_name, m.last_name\nHAVING COUNT(DISTINCT a.link_to_event) > 7",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List the name of students that have attended more than 7 events.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "true_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "text_2_sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'Yearly Kickoff'\nAND e.approved = 'Yes'\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Which student has been entrusted to manage the budget for the Yearly Kickoff?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1389,
    "db_id": "student_club",
    "question": "Which event has the lowest cost?",
    "true_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT e.event_name, SUM(b.spent) as total_cost\nFROM event e\nLEFT JOIN budget b ON e.event_id = b.link_to_event\nGROUP BY e.event_id, e.event_name\nORDER BY total_cost ASC\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Which event has the lowest cost?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(T3.cost), 0) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "text_2_sql": "SELECT\n    (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.spent ELSE 0 END) / SUM(b.spent)) * 100 AS yearly_kickoff_percentage\nFROM\n    event e\nJOIN\n    budget b ON e.event_id = b.link_to_event\nWHERE\n    b.spent IS NOT NULL",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1392,
    "db_id": "student_club",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "true_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY source DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT source, SUM(amount) as total_amount\nFROM income\nWHERE EXTRACT(YEAR FROM date_received::date) = 2019\n  AND EXTRACT(MONTH FROM date_received::date) = 9\nGROUP BY source\nORDER BY total_amount DESC\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Indicate the top source of funds received in September 2019 based on their amount.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1394,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "true_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "text_2_sql": "SELECT COUNT(m.member_id)\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Physics Teaching'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many members of the Student_Club have major in 'Physics Teaching'?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1398,
    "db_id": "student_club",
    "question": "Name the event with the highest amount spent on advertisement.",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'advertisement'\nORDER BY b.spent DESC\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Name the event with the highest amount spent on advertisement.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "true_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "text_2_sql": "SELECT COUNT(*) > 0 AS attended\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member_id\nJOIN event e ON a.link_to_event = e.event_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'\nAND e.event_name = 'Women''s Soccer'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Did Maya Mclean attend the 'Women's Soccer' event?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1401,
    "db_id": "student_club",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "true_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "text_2_sql": "SELECT e.cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'September Speaker'\nAND e.expense_description LIKE '%poster%'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Indicate the cost of posters for 'September Speaker' event.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1403,
    "db_id": "student_club",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "true_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining NULLS FIRST LIMIT 1",
    "text_2_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'closed'\n  AND b.event_status = 'closed'\n  AND b.spent > b.amount\nORDER BY (b.spent - b.amount) DESC\nLIMIT 1",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Indicate the name of the closed event whose cost has exceeded the budget the most.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1404,
    "db_id": "student_club",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "true_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' GROUP BY T1.type",
    "text_2_sql": "SELECT e.expense_description, SUM(e.cost) AS total_cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE ev.event_name = 'October Meeting'\nAND e.approved = 'Yes'\nGROUP BY e.expense_description",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Identify the type of expenses and their total value approved for 'October Meeting' event.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1405,
    "db_id": "student_club",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "true_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "text_2_sql": "SELECT category, amount\nFROM budget\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event.event_name = 'April Speaker'\nORDER BY amount ASC;",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1409,
    "db_id": "student_club",
    "question": "Mention the total expense used on 8/20/2019.",
    "true_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "text_2_sql": "SELECT SUM(cost) AS total_expense\nFROM expense\nWHERE expense_date = '2019-08-20'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Mention the total expense used on 8/20/2019.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1410,
    "db_id": "student_club",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "true_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY m.member_id, m.first_name, m.last_name",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1411,
    "db_id": "student_club",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "true_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "text_2_sql": "SELECT expense_description\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- State what kind of expenses that Sacha Harrison incurred?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1422,
    "db_id": "student_club",
    "question": "State the category of events were held at MU 215.",
    "true_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "text_2_sql": "SELECT DISTINCT type\nFROM event\nWHERE location = 'MU 215';",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- State the category of events were held at MU 215.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "true_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "text_2_sql": "SELECT DISTINCT m.last_name, maj.department, maj.college\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Environmental Engineering'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List the last name of members with a major in environmental engineering and include its department and college name.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1427,
    "db_id": "student_club",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "true_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "text_2_sql": "SELECT DISTINCT b.category\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.location = 'MU 215'\nAND e.type = 'guest speaker'\nAND b.spent = 0",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T2.income_id), 0) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "text_2_sql": "SELECT\n    (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE m.t_shirt_size = 'medium'\n    AND i.source = 'Student_Club'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1435,
    "db_id": "student_club",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "true_sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND DATE(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "text_2_sql": "SELECT event_name\nFROM event\nWHERE type = 'game'\nAND status = 'closed'\nAND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "true_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > (SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member)",
    "text_2_sql": "SELECT DISTINCT m.first_name, m.last_name, m.phone\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.cost > (\n    SELECT AVG(cost)\n    FROM expense\n)\nORDER BY m.last_name, m.first_name",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Give the full name and contact number of members who had to spend more than average on each expense.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1460,
    "db_id": "student_club",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "true_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "text_2_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE e.expense_description LIKE '%water%'\n   OR e.expense_description LIKE '%veggie tray%'\n   OR e.expense_description LIKE '%supplies%'",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1464,
    "db_id": "student_club",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "true_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "text_2_sql": "SELECT m.first_name, m.last_name, i.amount\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE i.date_received = '9/9/2019';",
    "prompt": "CREATE TABLE major\n(\n    `major_id` TEXT NOT NULL,\n    `major_name` TEXT NULL,\n    `department` TEXT NULL,\n    `college` TEXT NULL\n);\n\nCREATE TABLE member\n(\n    `zip` BIGINT NULL,\n    `first_name` TEXT NULL,\n    `last_name` TEXT NULL,\n    `email` TEXT NULL,\n    `position` TEXT NULL,\n    `t_shirt_size` TEXT NULL,\n    `phone` TEXT NULL,\n    `member_id` TEXT NOT NULL,\n    `link_to_major` TEXT NULL\n);\n\nCREATE TABLE attendance\n(\n    `link_to_event` TEXT NOT NULL,\n    `link_to_member` TEXT NOT NULL\n);\n\nCREATE TABLE budget\n(\n    `remaining` REAL NULL,\n    `spent` REAL NULL,\n    `amount` BIGINT NULL,\n    `budget_id` TEXT NOT NULL,\n    `link_to_event` TEXT NULL,\n    `category` TEXT NULL,\n    `event_status` TEXT NULL\n);\n\nCREATE TABLE event\n(\n    `event_id` TEXT NOT NULL,\n    `event_name` TEXT NULL,\n    `event_date` TEXT NULL,\n    `type` TEXT NULL,\n    `notes` TEXT NULL,\n    `location` TEXT NULL,\n    `status` TEXT NULL\n);\n\nCREATE TABLE expense\n(\n    `cost` REAL NULL,\n    `expense_description` TEXT NULL,\n    `expense_date` TEXT NULL,\n    `expense_id` TEXT NOT NULL,\n    `approved` TEXT NULL,\n    `link_to_member` TEXT NULL,\n    `link_to_budget` TEXT NULL\n);\n\nCREATE TABLE income\n(\n    `amount` BIGINT NULL,\n    `income_id` TEXT NOT NULL,\n    `date_received` TEXT NULL,\n    `source` TEXT NULL,\n    `notes` TEXT NULL,\n    `link_to_member` TEXT NULL\n);\n\nCREATE TABLE zip_code\n(\n    `zip_code` BIGINT NOT NULL,\n    `type` TEXT NULL,\n    `city` TEXT NULL,\n    `county` TEXT NULL,\n    `state` TEXT NULL,\n    `short_state` TEXT NULL\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1149,
    "db_id": "thrombosis_prediction",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) FROM Patient WHERE SEX = 'M'",
    "text_2_sql": "SELECT\n    CASE\n        WHEN inpatient_count > outpatient_count THEN 'In-patient'\n        ELSE 'Outpatient'\n    END AS more_frequent,\n    ABS(inpatient_percentage - outpatient_percentage) AS percentage_deviation\nFROM (\n    SELECT\n        COUNT(*) FILTER (WHERE patient_type = 'In-patient' AND gender = 'Male') AS inpatient_count,\n        COUNT(*) FILTER (WHERE patient_type = 'Outpatient' AND gender = 'Male') AS outpatient_count,\n        COUNT(*) FILTER (WHERE patient_type = 'In-patient' AND gender = 'Male') * 100.0 / NULLIF(COUNT(*) FILTER (WHERE gender = 'Male'), 0) AS inpatient_percentage,\n        COUNT(*) FILTER (WHERE patient_type = 'Outpatient' AND gender = 'Male') * 100.0 / NULLIF(COUNT(*) FILTER (WHERE gender = 'Male'), 0) AS outpatient_percentage\n    FROM Patient\n) subquery",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- Are there more in-patient or outpatient who were male? What is the deviation in percentage?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1150,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient were born after 1930?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN TO_CHAR(CAST(Birthday AS TIMESTAMP), 'YYYY') > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(*), 0) FROM Patient WHERE SEX = 'F'",
    "text_2_sql": "SELECT\n    (COUNT(CASE WHEN gender = 'Female' AND EXTRACT(YEAR FROM date_of_birth) > 1930 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_born_after_1930\nFROM\n    Patient\nWHERE\n    gender = 'Female'",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the percentage of female patient were born after 1930?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1152,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "true_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) FROM Patient WHERE Diagnosis = 'SLE'",
    "text_2_sql": "SELECT\n    CASE\n        WHEN COUNT(CASE WHEN e.treatment_type = 'outpatient' THEN 1 END) = 0 THEN NULL\n        ELSE ROUND(\n            CAST(COUNT(CASE WHEN e.treatment_type = 'outpatient' THEN 1 END) AS NUMERIC) /\n            NULLIF(COUNT(CASE WHEN e.treatment_type = 'inpatient' THEN 1 END), 0),\n            2\n        )\n    END AS outpatient_to_inpatient_ratio\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nWHERE p.diagnosis = 'SLE'\n    AND e.follow_up = true",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "true_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "text_2_sql": "SELECT DISTINCT p.disease, l.test_date\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nJOIN Laboratory l ON e.examination_id = l.examination_id\nWHERE p.patient_id = '30609'\nORDER BY l.test_date;",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "text_2_sql": "SELECT DISTINCT p.patient_id, p.sex, p.birthday\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nJOIN Laboratory l ON e.examination_id = l.examination_id\nWHERE l.test_name = 'LDH' AND (l.result < l.normal_range_bottom OR l.result > l.normal_range_top)",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- List the patient ID, sex and birthday of patient with LDH beyond normal range.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "true_sql": "SELECT DISTINCT T1.ID, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.Birthday) AS Age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "text_2_sql": "SELECT p.id, p.age\nFROM Patient p\nJOIN Examination e ON p.id = e.patient_id\nJOIN Laboratory l ON e.id = l.examination_id\nWHERE l.coagulation > 0",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- State the ID and age of patient with positive degree of coagulation.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "true_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "text_2_sql": "SELECT p.patient_id, p.sex, p.diagnosis\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nWHERE e.thrombosis_degree = 'severe'",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "true_sql": "SELECT COUNT(*) FROM Patient WHERE TO_CHAR(CAST(Description AS TIMESTAMP), 'YYYY') = '1997' AND SEX = 'F' AND Admission = '-'",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id)\nFROM Patient p\nJOIN Examination e1 ON p.patient_id = e1.patient_id\nJOIN Examination e2 ON p.patient_id = e2.patient_id\nWHERE p.gender = 'F'\n  AND EXTRACT(YEAR FROM e1.exam_date) = 1997\n  AND e1.exam_type = 'Hospital'\n  AND e2.exam_type = 'Outpatient'\n  AND e2.exam_date > e1.exam_date\n  AND NOT EXISTS (\n    SELECT 1\n    FROM Examination e3\n    WHERE e3.patient_id = p.patient_id\n      AND e3.exam_date > e1.exam_date\n      AND e3.exam_date < e2.exam_date\n  )",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "true_sql": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND TO_CHAR(CAST(T2.\"Examination Date\" AS TIMESTAMP), 'YYYY') = '1997' AND T2.Thrombosis = 1",
    "text_2_sql": "SELECT COUNT(*) AS serious_thrombosis_women_1997\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nWHERE p.gender = 'F'\n  AND e.examination_date BETWEEN '1997-01-01' AND '1997-12-31'\n  AND e.thrombosis_severity = (\n    SELECT MAX(thrombosis_severity)\n    FROM Examination\n    WHERE examination_date BETWEEN '1997-01-01' AND '1997-12-31'\n  )",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many of the patients with the most serious thrombosis cases examined in 1997 are women?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "true_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE NOT T2.Symptoms IS NULL ORDER BY T1.Birthday DESC NULLS LAST LIMIT 1",
    "text_2_sql": "SELECT p.symptoms, e.diagnosis\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nWHERE p.date_of_birth = (\n    SELECT MAX(date_of_birth)\n    FROM Patient\n    WHERE patient_id IN (\n        SELECT DISTINCT patient_id\n        FROM Examination\n    )\n)\nORDER BY e.examination_date\nLIMIT 1",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "simple"
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "true_sql": "SELECT T1.Date, EXTRACT(YEAR FROM T2.\"First Date\") - EXTRACT(YEAR FROM T2.Birthday) AS Age, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "text_2_sql": "SELECT l.examination_date, p.age_at_admission\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nJOIN Laboratory l ON e.examination_id = l.examination_id\nWHERE p.diagnosis = 'SJS'\nORDER BY p.date_of_birth ASC\nLIMIT 1",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "true_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END), 0) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "text_2_sql": "SELECT\n    ROUND(CAST(COUNT(CASE WHEN p.gender = 'Male' THEN 1 END) AS NUMERIC) /\n    NULLIF(COUNT(CASE WHEN p.gender = 'Female' THEN 1 END), 0), 2) AS male_to_female_ratio\nFROM\n    Patient p\nJOIN\n    Examination e ON p.patient_id = e.patient_id\nJOIN\n    Laboratory l ON e.examination_id = l.examination_id\nWHERE\n    l.test_name = 'Uric Acid'\n    AND l.result NOT BETWEEN l.normal_range_low AND l.normal_range_high",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- What is the ratio of male to female patients among all those with abnormal uric acid counts?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "true_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN 1990 AND 1993 AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.Birthday) < 18",
    "text_2_sql": "SELECT COUNT(DISTINCT p.patient_id)\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nWHERE p.date_of_birth > '1972-01-01'\n  AND e.examination_date BETWEEN '1990-01-01' AND '1993-12-31'",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How many underage patients were examined during the course of the three-year period from 1990 to 1993?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "true_sql": "SELECT EXTRACT(YEAR FROM T2.Date) - EXTRACT(YEAR FROM T1.Birthday) AS age_difference, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB IS NOT NULL ORDER BY T2.HGB DESC LIMIT 1",
    "text_2_sql": "SELECT p.age, e.diagnosis\nFROM Patient p\nJOIN Examination e ON p.patient_id = e.patient_id\nJOIN Laboratory l ON e.examination_id = l.examination_id\nWHERE l.hemoglobin = (SELECT MAX(hemoglobin) FROM Laboratory)\nLIMIT 1",
    "prompt": "CREATE TABLE Patient\n(\n);\n\nCREATE TABLE Examination\n(\n);\n\nCREATE TABLE Laboratory\n(\n);\n\n-- Using valid PostgreSQL, answer the following questions for the tables provided above.\n-- How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?\n\n\n\nGenerate the PostgreSQL for the above question after thinking step by step: \n\n\n        \nIn your response, you do not need to mention your intermediate steps. \n        Do not include any comments in your response.\n        Do not need to start with the symbol ```\n        You only need to return the result PostgreSQL SQL code\n        start from SELECT\n        ",
    "difficulty": "moderate"
  }
]